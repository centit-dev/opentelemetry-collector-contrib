// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/exceptioncategory"
)

// ExceptionCategory is the model entity for the ExceptionCategory schema.
type ExceptionCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// IsValid holds the value of the "is_valid" field.
	IsValid int `json:"is_valid,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExceptionCategoryQuery when eager-loading is set.
	Edges        ExceptionCategoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ExceptionCategoryEdges holds the relations/edges for other nodes in the graph.
type ExceptionCategoryEdges struct {
	// ExceptionDefinitions holds the value of the exception_definitions edge.
	ExceptionDefinitions []*ExceptionDefinition `json:"exception_definitions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ExceptionDefinitionsOrErr returns the ExceptionDefinitions value or an error if the edge
// was not loaded in eager-loading.
func (e ExceptionCategoryEdges) ExceptionDefinitionsOrErr() ([]*ExceptionDefinition, error) {
	if e.loadedTypes[0] {
		return e.ExceptionDefinitions, nil
	}
	return nil, &NotLoadedError{edge: "exception_definitions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExceptionCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exceptioncategory.FieldID, exceptioncategory.FieldIsValid:
			values[i] = new(sql.NullInt64)
		case exceptioncategory.FieldName:
			values[i] = new(sql.NullString)
		case exceptioncategory.FieldCreateTime, exceptioncategory.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExceptionCategory fields.
func (ec *ExceptionCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exceptioncategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ec.ID = int64(value.Int64)
		case exceptioncategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ec.Name = value.String
			}
		case exceptioncategory.FieldIsValid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_valid", values[i])
			} else if value.Valid {
				ec.IsValid = int(value.Int64)
			}
		case exceptioncategory.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ec.CreateTime = value.Time
			}
		case exceptioncategory.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ec.UpdateTime = value.Time
			}
		default:
			ec.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExceptionCategory.
// This includes values selected through modifiers, order, etc.
func (ec *ExceptionCategory) Value(name string) (ent.Value, error) {
	return ec.selectValues.Get(name)
}

// QueryExceptionDefinitions queries the "exception_definitions" edge of the ExceptionCategory entity.
func (ec *ExceptionCategory) QueryExceptionDefinitions() *ExceptionDefinitionQuery {
	return NewExceptionCategoryClient(ec.config).QueryExceptionDefinitions(ec)
}

// Update returns a builder for updating this ExceptionCategory.
// Note that you need to call ExceptionCategory.Unwrap() before calling this method if this ExceptionCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ec *ExceptionCategory) Update() *ExceptionCategoryUpdateOne {
	return NewExceptionCategoryClient(ec.config).UpdateOne(ec)
}

// Unwrap unwraps the ExceptionCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ec *ExceptionCategory) Unwrap() *ExceptionCategory {
	_tx, ok := ec.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExceptionCategory is not a transactional entity")
	}
	ec.config.driver = _tx.drv
	return ec
}

// String implements the fmt.Stringer.
func (ec *ExceptionCategory) String() string {
	var builder strings.Builder
	builder.WriteString("ExceptionCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ec.ID))
	builder.WriteString("name=")
	builder.WriteString(ec.Name)
	builder.WriteString(", ")
	builder.WriteString("is_valid=")
	builder.WriteString(fmt.Sprintf("%v", ec.IsValid))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(ec.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ec.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ExceptionCategories is a parsable slice of ExceptionCategory.
type ExceptionCategories []*ExceptionCategory
