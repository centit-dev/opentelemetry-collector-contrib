// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/exceptioncategory"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/exceptiondefinition"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/predicate"
)

// ExceptionDefinitionUpdate is the builder for updating ExceptionDefinition entities.
type ExceptionDefinitionUpdate struct {
	config
	hooks    []Hook
	mutation *ExceptionDefinitionMutation
}

// Where appends a list predicates to the ExceptionDefinitionUpdate builder.
func (edu *ExceptionDefinitionUpdate) Where(ps ...predicate.ExceptionDefinition) *ExceptionDefinitionUpdate {
	edu.mutation.Where(ps...)
	return edu
}

// SetCategoryID sets the "category_id" field.
func (edu *ExceptionDefinitionUpdate) SetCategoryID(i int64) *ExceptionDefinitionUpdate {
	edu.mutation.SetCategoryID(i)
	return edu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (edu *ExceptionDefinitionUpdate) SetNillableCategoryID(i *int64) *ExceptionDefinitionUpdate {
	if i != nil {
		edu.SetCategoryID(*i)
	}
	return edu
}

// SetShortName sets the "short_name" field.
func (edu *ExceptionDefinitionUpdate) SetShortName(s string) *ExceptionDefinitionUpdate {
	edu.mutation.SetShortName(s)
	return edu
}

// SetNillableShortName sets the "short_name" field if the given value is not nil.
func (edu *ExceptionDefinitionUpdate) SetNillableShortName(s *string) *ExceptionDefinitionUpdate {
	if s != nil {
		edu.SetShortName(*s)
	}
	return edu
}

// SetLongName sets the "long_name" field.
func (edu *ExceptionDefinitionUpdate) SetLongName(s string) *ExceptionDefinitionUpdate {
	edu.mutation.SetLongName(s)
	return edu
}

// SetNillableLongName sets the "long_name" field if the given value is not nil.
func (edu *ExceptionDefinitionUpdate) SetNillableLongName(s *string) *ExceptionDefinitionUpdate {
	if s != nil {
		edu.SetLongName(*s)
	}
	return edu
}

// SetIsValid sets the "is_valid" field.
func (edu *ExceptionDefinitionUpdate) SetIsValid(i int) *ExceptionDefinitionUpdate {
	edu.mutation.ResetIsValid()
	edu.mutation.SetIsValid(i)
	return edu
}

// SetNillableIsValid sets the "is_valid" field if the given value is not nil.
func (edu *ExceptionDefinitionUpdate) SetNillableIsValid(i *int) *ExceptionDefinitionUpdate {
	if i != nil {
		edu.SetIsValid(*i)
	}
	return edu
}

// AddIsValid adds i to the "is_valid" field.
func (edu *ExceptionDefinitionUpdate) AddIsValid(i int) *ExceptionDefinitionUpdate {
	edu.mutation.AddIsValid(i)
	return edu
}

// SetUpdateTime sets the "update_time" field.
func (edu *ExceptionDefinitionUpdate) SetUpdateTime(t time.Time) *ExceptionDefinitionUpdate {
	edu.mutation.SetUpdateTime(t)
	return edu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (edu *ExceptionDefinitionUpdate) SetNillableUpdateTime(t *time.Time) *ExceptionDefinitionUpdate {
	if t != nil {
		edu.SetUpdateTime(*t)
	}
	return edu
}

// SetExceptionCategoryID sets the "exception_category" edge to the ExceptionCategory entity by ID.
func (edu *ExceptionDefinitionUpdate) SetExceptionCategoryID(id int64) *ExceptionDefinitionUpdate {
	edu.mutation.SetExceptionCategoryID(id)
	return edu
}

// SetExceptionCategory sets the "exception_category" edge to the ExceptionCategory entity.
func (edu *ExceptionDefinitionUpdate) SetExceptionCategory(e *ExceptionCategory) *ExceptionDefinitionUpdate {
	return edu.SetExceptionCategoryID(e.ID)
}

// Mutation returns the ExceptionDefinitionMutation object of the builder.
func (edu *ExceptionDefinitionUpdate) Mutation() *ExceptionDefinitionMutation {
	return edu.mutation
}

// ClearExceptionCategory clears the "exception_category" edge to the ExceptionCategory entity.
func (edu *ExceptionDefinitionUpdate) ClearExceptionCategory() *ExceptionDefinitionUpdate {
	edu.mutation.ClearExceptionCategory()
	return edu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (edu *ExceptionDefinitionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, edu.sqlSave, edu.mutation, edu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (edu *ExceptionDefinitionUpdate) SaveX(ctx context.Context) int {
	affected, err := edu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (edu *ExceptionDefinitionUpdate) Exec(ctx context.Context) error {
	_, err := edu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edu *ExceptionDefinitionUpdate) ExecX(ctx context.Context) {
	if err := edu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (edu *ExceptionDefinitionUpdate) check() error {
	if v, ok := edu.mutation.CategoryID(); ok {
		if err := exceptiondefinition.CategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "category_id", err: fmt.Errorf(`ent: validator failed for field "ExceptionDefinition.category_id": %w`, err)}
		}
	}
	if v, ok := edu.mutation.ShortName(); ok {
		if err := exceptiondefinition.ShortNameValidator(v); err != nil {
			return &ValidationError{Name: "short_name", err: fmt.Errorf(`ent: validator failed for field "ExceptionDefinition.short_name": %w`, err)}
		}
	}
	if v, ok := edu.mutation.LongName(); ok {
		if err := exceptiondefinition.LongNameValidator(v); err != nil {
			return &ValidationError{Name: "long_name", err: fmt.Errorf(`ent: validator failed for field "ExceptionDefinition.long_name": %w`, err)}
		}
	}
	if _, ok := edu.mutation.ExceptionCategoryID(); edu.mutation.ExceptionCategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ExceptionDefinition.exception_category"`)
	}
	return nil
}

func (edu *ExceptionDefinitionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := edu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(exceptiondefinition.Table, exceptiondefinition.Columns, sqlgraph.NewFieldSpec(exceptiondefinition.FieldID, field.TypeInt64))
	if ps := edu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := edu.mutation.ShortName(); ok {
		_spec.SetField(exceptiondefinition.FieldShortName, field.TypeString, value)
	}
	if value, ok := edu.mutation.LongName(); ok {
		_spec.SetField(exceptiondefinition.FieldLongName, field.TypeString, value)
	}
	if value, ok := edu.mutation.IsValid(); ok {
		_spec.SetField(exceptiondefinition.FieldIsValid, field.TypeInt, value)
	}
	if value, ok := edu.mutation.AddedIsValid(); ok {
		_spec.AddField(exceptiondefinition.FieldIsValid, field.TypeInt, value)
	}
	if value, ok := edu.mutation.UpdateTime(); ok {
		_spec.SetField(exceptiondefinition.FieldUpdateTime, field.TypeTime, value)
	}
	if edu.mutation.ExceptionCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exceptiondefinition.ExceptionCategoryTable,
			Columns: []string{exceptiondefinition.ExceptionCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exceptioncategory.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := edu.mutation.ExceptionCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exceptiondefinition.ExceptionCategoryTable,
			Columns: []string{exceptiondefinition.ExceptionCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exceptioncategory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, edu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exceptiondefinition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	edu.mutation.done = true
	return n, nil
}

// ExceptionDefinitionUpdateOne is the builder for updating a single ExceptionDefinition entity.
type ExceptionDefinitionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExceptionDefinitionMutation
}

// SetCategoryID sets the "category_id" field.
func (eduo *ExceptionDefinitionUpdateOne) SetCategoryID(i int64) *ExceptionDefinitionUpdateOne {
	eduo.mutation.SetCategoryID(i)
	return eduo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (eduo *ExceptionDefinitionUpdateOne) SetNillableCategoryID(i *int64) *ExceptionDefinitionUpdateOne {
	if i != nil {
		eduo.SetCategoryID(*i)
	}
	return eduo
}

// SetShortName sets the "short_name" field.
func (eduo *ExceptionDefinitionUpdateOne) SetShortName(s string) *ExceptionDefinitionUpdateOne {
	eduo.mutation.SetShortName(s)
	return eduo
}

// SetNillableShortName sets the "short_name" field if the given value is not nil.
func (eduo *ExceptionDefinitionUpdateOne) SetNillableShortName(s *string) *ExceptionDefinitionUpdateOne {
	if s != nil {
		eduo.SetShortName(*s)
	}
	return eduo
}

// SetLongName sets the "long_name" field.
func (eduo *ExceptionDefinitionUpdateOne) SetLongName(s string) *ExceptionDefinitionUpdateOne {
	eduo.mutation.SetLongName(s)
	return eduo
}

// SetNillableLongName sets the "long_name" field if the given value is not nil.
func (eduo *ExceptionDefinitionUpdateOne) SetNillableLongName(s *string) *ExceptionDefinitionUpdateOne {
	if s != nil {
		eduo.SetLongName(*s)
	}
	return eduo
}

// SetIsValid sets the "is_valid" field.
func (eduo *ExceptionDefinitionUpdateOne) SetIsValid(i int) *ExceptionDefinitionUpdateOne {
	eduo.mutation.ResetIsValid()
	eduo.mutation.SetIsValid(i)
	return eduo
}

// SetNillableIsValid sets the "is_valid" field if the given value is not nil.
func (eduo *ExceptionDefinitionUpdateOne) SetNillableIsValid(i *int) *ExceptionDefinitionUpdateOne {
	if i != nil {
		eduo.SetIsValid(*i)
	}
	return eduo
}

// AddIsValid adds i to the "is_valid" field.
func (eduo *ExceptionDefinitionUpdateOne) AddIsValid(i int) *ExceptionDefinitionUpdateOne {
	eduo.mutation.AddIsValid(i)
	return eduo
}

// SetUpdateTime sets the "update_time" field.
func (eduo *ExceptionDefinitionUpdateOne) SetUpdateTime(t time.Time) *ExceptionDefinitionUpdateOne {
	eduo.mutation.SetUpdateTime(t)
	return eduo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (eduo *ExceptionDefinitionUpdateOne) SetNillableUpdateTime(t *time.Time) *ExceptionDefinitionUpdateOne {
	if t != nil {
		eduo.SetUpdateTime(*t)
	}
	return eduo
}

// SetExceptionCategoryID sets the "exception_category" edge to the ExceptionCategory entity by ID.
func (eduo *ExceptionDefinitionUpdateOne) SetExceptionCategoryID(id int64) *ExceptionDefinitionUpdateOne {
	eduo.mutation.SetExceptionCategoryID(id)
	return eduo
}

// SetExceptionCategory sets the "exception_category" edge to the ExceptionCategory entity.
func (eduo *ExceptionDefinitionUpdateOne) SetExceptionCategory(e *ExceptionCategory) *ExceptionDefinitionUpdateOne {
	return eduo.SetExceptionCategoryID(e.ID)
}

// Mutation returns the ExceptionDefinitionMutation object of the builder.
func (eduo *ExceptionDefinitionUpdateOne) Mutation() *ExceptionDefinitionMutation {
	return eduo.mutation
}

// ClearExceptionCategory clears the "exception_category" edge to the ExceptionCategory entity.
func (eduo *ExceptionDefinitionUpdateOne) ClearExceptionCategory() *ExceptionDefinitionUpdateOne {
	eduo.mutation.ClearExceptionCategory()
	return eduo
}

// Where appends a list predicates to the ExceptionDefinitionUpdate builder.
func (eduo *ExceptionDefinitionUpdateOne) Where(ps ...predicate.ExceptionDefinition) *ExceptionDefinitionUpdateOne {
	eduo.mutation.Where(ps...)
	return eduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eduo *ExceptionDefinitionUpdateOne) Select(field string, fields ...string) *ExceptionDefinitionUpdateOne {
	eduo.fields = append([]string{field}, fields...)
	return eduo
}

// Save executes the query and returns the updated ExceptionDefinition entity.
func (eduo *ExceptionDefinitionUpdateOne) Save(ctx context.Context) (*ExceptionDefinition, error) {
	return withHooks(ctx, eduo.sqlSave, eduo.mutation, eduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eduo *ExceptionDefinitionUpdateOne) SaveX(ctx context.Context) *ExceptionDefinition {
	node, err := eduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eduo *ExceptionDefinitionUpdateOne) Exec(ctx context.Context) error {
	_, err := eduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eduo *ExceptionDefinitionUpdateOne) ExecX(ctx context.Context) {
	if err := eduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eduo *ExceptionDefinitionUpdateOne) check() error {
	if v, ok := eduo.mutation.CategoryID(); ok {
		if err := exceptiondefinition.CategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "category_id", err: fmt.Errorf(`ent: validator failed for field "ExceptionDefinition.category_id": %w`, err)}
		}
	}
	if v, ok := eduo.mutation.ShortName(); ok {
		if err := exceptiondefinition.ShortNameValidator(v); err != nil {
			return &ValidationError{Name: "short_name", err: fmt.Errorf(`ent: validator failed for field "ExceptionDefinition.short_name": %w`, err)}
		}
	}
	if v, ok := eduo.mutation.LongName(); ok {
		if err := exceptiondefinition.LongNameValidator(v); err != nil {
			return &ValidationError{Name: "long_name", err: fmt.Errorf(`ent: validator failed for field "ExceptionDefinition.long_name": %w`, err)}
		}
	}
	if _, ok := eduo.mutation.ExceptionCategoryID(); eduo.mutation.ExceptionCategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ExceptionDefinition.exception_category"`)
	}
	return nil
}

func (eduo *ExceptionDefinitionUpdateOne) sqlSave(ctx context.Context) (_node *ExceptionDefinition, err error) {
	if err := eduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(exceptiondefinition.Table, exceptiondefinition.Columns, sqlgraph.NewFieldSpec(exceptiondefinition.FieldID, field.TypeInt64))
	id, ok := eduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExceptionDefinition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exceptiondefinition.FieldID)
		for _, f := range fields {
			if !exceptiondefinition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exceptiondefinition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eduo.mutation.ShortName(); ok {
		_spec.SetField(exceptiondefinition.FieldShortName, field.TypeString, value)
	}
	if value, ok := eduo.mutation.LongName(); ok {
		_spec.SetField(exceptiondefinition.FieldLongName, field.TypeString, value)
	}
	if value, ok := eduo.mutation.IsValid(); ok {
		_spec.SetField(exceptiondefinition.FieldIsValid, field.TypeInt, value)
	}
	if value, ok := eduo.mutation.AddedIsValid(); ok {
		_spec.AddField(exceptiondefinition.FieldIsValid, field.TypeInt, value)
	}
	if value, ok := eduo.mutation.UpdateTime(); ok {
		_spec.SetField(exceptiondefinition.FieldUpdateTime, field.TypeTime, value)
	}
	if eduo.mutation.ExceptionCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exceptiondefinition.ExceptionCategoryTable,
			Columns: []string{exceptiondefinition.ExceptionCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exceptioncategory.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eduo.mutation.ExceptionCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exceptiondefinition.ExceptionCategoryTable,
			Columns: []string{exceptiondefinition.ExceptionCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exceptioncategory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ExceptionDefinition{config: eduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exceptiondefinition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eduo.mutation.done = true
	return _node, nil
}
