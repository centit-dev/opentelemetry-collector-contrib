// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/exceptioncategory"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/exceptiondefinition"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ExceptionCategory is the client for interacting with the ExceptionCategory builders.
	ExceptionCategory *ExceptionCategoryClient
	// ExceptionDefinition is the client for interacting with the ExceptionDefinition builders.
	ExceptionDefinition *ExceptionDefinitionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ExceptionCategory = NewExceptionCategoryClient(c.config)
	c.ExceptionDefinition = NewExceptionDefinitionClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		ExceptionCategory:   NewExceptionCategoryClient(cfg),
		ExceptionDefinition: NewExceptionDefinitionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		ExceptionCategory:   NewExceptionCategoryClient(cfg),
		ExceptionDefinition: NewExceptionDefinitionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ExceptionCategory.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ExceptionCategory.Use(hooks...)
	c.ExceptionDefinition.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.ExceptionCategory.Intercept(interceptors...)
	c.ExceptionDefinition.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ExceptionCategoryMutation:
		return c.ExceptionCategory.mutate(ctx, m)
	case *ExceptionDefinitionMutation:
		return c.ExceptionDefinition.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ExceptionCategoryClient is a client for the ExceptionCategory schema.
type ExceptionCategoryClient struct {
	config
}

// NewExceptionCategoryClient returns a client for the ExceptionCategory from the given config.
func NewExceptionCategoryClient(c config) *ExceptionCategoryClient {
	return &ExceptionCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exceptioncategory.Hooks(f(g(h())))`.
func (c *ExceptionCategoryClient) Use(hooks ...Hook) {
	c.hooks.ExceptionCategory = append(c.hooks.ExceptionCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exceptioncategory.Intercept(f(g(h())))`.
func (c *ExceptionCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExceptionCategory = append(c.inters.ExceptionCategory, interceptors...)
}

// Create returns a builder for creating a ExceptionCategory entity.
func (c *ExceptionCategoryClient) Create() *ExceptionCategoryCreate {
	mutation := newExceptionCategoryMutation(c.config, OpCreate)
	return &ExceptionCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExceptionCategory entities.
func (c *ExceptionCategoryClient) CreateBulk(builders ...*ExceptionCategoryCreate) *ExceptionCategoryCreateBulk {
	return &ExceptionCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ExceptionCategoryClient) MapCreateBulk(slice any, setFunc func(*ExceptionCategoryCreate, int)) *ExceptionCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ExceptionCategoryCreateBulk{err: fmt.Errorf("calling to ExceptionCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ExceptionCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ExceptionCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExceptionCategory.
func (c *ExceptionCategoryClient) Update() *ExceptionCategoryUpdate {
	mutation := newExceptionCategoryMutation(c.config, OpUpdate)
	return &ExceptionCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExceptionCategoryClient) UpdateOne(ec *ExceptionCategory) *ExceptionCategoryUpdateOne {
	mutation := newExceptionCategoryMutation(c.config, OpUpdateOne, withExceptionCategory(ec))
	return &ExceptionCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExceptionCategoryClient) UpdateOneID(id int64) *ExceptionCategoryUpdateOne {
	mutation := newExceptionCategoryMutation(c.config, OpUpdateOne, withExceptionCategoryID(id))
	return &ExceptionCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExceptionCategory.
func (c *ExceptionCategoryClient) Delete() *ExceptionCategoryDelete {
	mutation := newExceptionCategoryMutation(c.config, OpDelete)
	return &ExceptionCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExceptionCategoryClient) DeleteOne(ec *ExceptionCategory) *ExceptionCategoryDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExceptionCategoryClient) DeleteOneID(id int64) *ExceptionCategoryDeleteOne {
	builder := c.Delete().Where(exceptioncategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExceptionCategoryDeleteOne{builder}
}

// Query returns a query builder for ExceptionCategory.
func (c *ExceptionCategoryClient) Query() *ExceptionCategoryQuery {
	return &ExceptionCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExceptionCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a ExceptionCategory entity by its id.
func (c *ExceptionCategoryClient) Get(ctx context.Context, id int64) (*ExceptionCategory, error) {
	return c.Query().Where(exceptioncategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExceptionCategoryClient) GetX(ctx context.Context, id int64) *ExceptionCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExceptionDefinitions queries the exception_definitions edge of a ExceptionCategory.
func (c *ExceptionCategoryClient) QueryExceptionDefinitions(ec *ExceptionCategory) *ExceptionDefinitionQuery {
	query := (&ExceptionDefinitionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exceptioncategory.Table, exceptioncategory.FieldID, id),
			sqlgraph.To(exceptiondefinition.Table, exceptiondefinition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exceptioncategory.ExceptionDefinitionsTable, exceptioncategory.ExceptionDefinitionsColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExceptionCategoryClient) Hooks() []Hook {
	return c.hooks.ExceptionCategory
}

// Interceptors returns the client interceptors.
func (c *ExceptionCategoryClient) Interceptors() []Interceptor {
	return c.inters.ExceptionCategory
}

func (c *ExceptionCategoryClient) mutate(ctx context.Context, m *ExceptionCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExceptionCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExceptionCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExceptionCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExceptionCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExceptionCategory mutation op: %q", m.Op())
	}
}

// ExceptionDefinitionClient is a client for the ExceptionDefinition schema.
type ExceptionDefinitionClient struct {
	config
}

// NewExceptionDefinitionClient returns a client for the ExceptionDefinition from the given config.
func NewExceptionDefinitionClient(c config) *ExceptionDefinitionClient {
	return &ExceptionDefinitionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exceptiondefinition.Hooks(f(g(h())))`.
func (c *ExceptionDefinitionClient) Use(hooks ...Hook) {
	c.hooks.ExceptionDefinition = append(c.hooks.ExceptionDefinition, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exceptiondefinition.Intercept(f(g(h())))`.
func (c *ExceptionDefinitionClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExceptionDefinition = append(c.inters.ExceptionDefinition, interceptors...)
}

// Create returns a builder for creating a ExceptionDefinition entity.
func (c *ExceptionDefinitionClient) Create() *ExceptionDefinitionCreate {
	mutation := newExceptionDefinitionMutation(c.config, OpCreate)
	return &ExceptionDefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExceptionDefinition entities.
func (c *ExceptionDefinitionClient) CreateBulk(builders ...*ExceptionDefinitionCreate) *ExceptionDefinitionCreateBulk {
	return &ExceptionDefinitionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ExceptionDefinitionClient) MapCreateBulk(slice any, setFunc func(*ExceptionDefinitionCreate, int)) *ExceptionDefinitionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ExceptionDefinitionCreateBulk{err: fmt.Errorf("calling to ExceptionDefinitionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ExceptionDefinitionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ExceptionDefinitionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExceptionDefinition.
func (c *ExceptionDefinitionClient) Update() *ExceptionDefinitionUpdate {
	mutation := newExceptionDefinitionMutation(c.config, OpUpdate)
	return &ExceptionDefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExceptionDefinitionClient) UpdateOne(ed *ExceptionDefinition) *ExceptionDefinitionUpdateOne {
	mutation := newExceptionDefinitionMutation(c.config, OpUpdateOne, withExceptionDefinition(ed))
	return &ExceptionDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExceptionDefinitionClient) UpdateOneID(id int64) *ExceptionDefinitionUpdateOne {
	mutation := newExceptionDefinitionMutation(c.config, OpUpdateOne, withExceptionDefinitionID(id))
	return &ExceptionDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExceptionDefinition.
func (c *ExceptionDefinitionClient) Delete() *ExceptionDefinitionDelete {
	mutation := newExceptionDefinitionMutation(c.config, OpDelete)
	return &ExceptionDefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExceptionDefinitionClient) DeleteOne(ed *ExceptionDefinition) *ExceptionDefinitionDeleteOne {
	return c.DeleteOneID(ed.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExceptionDefinitionClient) DeleteOneID(id int64) *ExceptionDefinitionDeleteOne {
	builder := c.Delete().Where(exceptiondefinition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExceptionDefinitionDeleteOne{builder}
}

// Query returns a query builder for ExceptionDefinition.
func (c *ExceptionDefinitionClient) Query() *ExceptionDefinitionQuery {
	return &ExceptionDefinitionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExceptionDefinition},
		inters: c.Interceptors(),
	}
}

// Get returns a ExceptionDefinition entity by its id.
func (c *ExceptionDefinitionClient) Get(ctx context.Context, id int64) (*ExceptionDefinition, error) {
	return c.Query().Where(exceptiondefinition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExceptionDefinitionClient) GetX(ctx context.Context, id int64) *ExceptionDefinition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExceptionCategory queries the exception_category edge of a ExceptionDefinition.
func (c *ExceptionDefinitionClient) QueryExceptionCategory(ed *ExceptionDefinition) *ExceptionCategoryQuery {
	query := (&ExceptionCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ed.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exceptiondefinition.Table, exceptiondefinition.FieldID, id),
			sqlgraph.To(exceptioncategory.Table, exceptioncategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exceptiondefinition.ExceptionCategoryTable, exceptiondefinition.ExceptionCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(ed.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExceptionDefinitionClient) Hooks() []Hook {
	return c.hooks.ExceptionDefinition
}

// Interceptors returns the client interceptors.
func (c *ExceptionDefinitionClient) Interceptors() []Interceptor {
	return c.inters.ExceptionDefinition
}

func (c *ExceptionDefinitionClient) mutate(ctx context.Context, m *ExceptionDefinitionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExceptionDefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExceptionDefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExceptionDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExceptionDefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExceptionDefinition mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ExceptionCategory, ExceptionDefinition []ent.Hook
	}
	inters struct {
		ExceptionCategory, ExceptionDefinition []ent.Interceptor
	}
)
