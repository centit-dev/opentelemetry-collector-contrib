// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/exceptioncategory"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/exceptiondefinition"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeExceptionCategory   = "ExceptionCategory"
	TypeExceptionDefinition = "ExceptionDefinition"
)

// ExceptionCategoryMutation represents an operation that mutates the ExceptionCategory nodes in the graph.
type ExceptionCategoryMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int64
	name                         *string
	is_valid                     *int
	addis_valid                  *int
	create_time                  *time.Time
	update_time                  *time.Time
	clearedFields                map[string]struct{}
	exception_definitions        map[int64]struct{}
	removedexception_definitions map[int64]struct{}
	clearedexception_definitions bool
	done                         bool
	oldValue                     func(context.Context) (*ExceptionCategory, error)
	predicates                   []predicate.ExceptionCategory
}

var _ ent.Mutation = (*ExceptionCategoryMutation)(nil)

// exceptioncategoryOption allows management of the mutation configuration using functional options.
type exceptioncategoryOption func(*ExceptionCategoryMutation)

// newExceptionCategoryMutation creates new mutation for the ExceptionCategory entity.
func newExceptionCategoryMutation(c config, op Op, opts ...exceptioncategoryOption) *ExceptionCategoryMutation {
	m := &ExceptionCategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeExceptionCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExceptionCategoryID sets the ID field of the mutation.
func withExceptionCategoryID(id int64) exceptioncategoryOption {
	return func(m *ExceptionCategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *ExceptionCategory
		)
		m.oldValue = func(ctx context.Context) (*ExceptionCategory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExceptionCategory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExceptionCategory sets the old ExceptionCategory of the mutation.
func withExceptionCategory(node *ExceptionCategory) exceptioncategoryOption {
	return func(m *ExceptionCategoryMutation) {
		m.oldValue = func(context.Context) (*ExceptionCategory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExceptionCategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExceptionCategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ExceptionCategory entities.
func (m *ExceptionCategoryMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExceptionCategoryMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExceptionCategoryMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExceptionCategory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ExceptionCategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ExceptionCategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ExceptionCategory entity.
// If the ExceptionCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionCategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ExceptionCategoryMutation) ResetName() {
	m.name = nil
}

// SetIsValid sets the "is_valid" field.
func (m *ExceptionCategoryMutation) SetIsValid(i int) {
	m.is_valid = &i
	m.addis_valid = nil
}

// IsValid returns the value of the "is_valid" field in the mutation.
func (m *ExceptionCategoryMutation) IsValid() (r int, exists bool) {
	v := m.is_valid
	if v == nil {
		return
	}
	return *v, true
}

// OldIsValid returns the old "is_valid" field's value of the ExceptionCategory entity.
// If the ExceptionCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionCategoryMutation) OldIsValid(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsValid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsValid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsValid: %w", err)
	}
	return oldValue.IsValid, nil
}

// AddIsValid adds i to the "is_valid" field.
func (m *ExceptionCategoryMutation) AddIsValid(i int) {
	if m.addis_valid != nil {
		*m.addis_valid += i
	} else {
		m.addis_valid = &i
	}
}

// AddedIsValid returns the value that was added to the "is_valid" field in this mutation.
func (m *ExceptionCategoryMutation) AddedIsValid() (r int, exists bool) {
	v := m.addis_valid
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsValid resets all changes to the "is_valid" field.
func (m *ExceptionCategoryMutation) ResetIsValid() {
	m.is_valid = nil
	m.addis_valid = nil
}

// SetCreateTime sets the "create_time" field.
func (m *ExceptionCategoryMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ExceptionCategoryMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ExceptionCategory entity.
// If the ExceptionCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionCategoryMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ExceptionCategoryMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ExceptionCategoryMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ExceptionCategoryMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the ExceptionCategory entity.
// If the ExceptionCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionCategoryMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ExceptionCategoryMutation) ResetUpdateTime() {
	m.update_time = nil
}

// AddExceptionDefinitionIDs adds the "exception_definitions" edge to the ExceptionDefinition entity by ids.
func (m *ExceptionCategoryMutation) AddExceptionDefinitionIDs(ids ...int64) {
	if m.exception_definitions == nil {
		m.exception_definitions = make(map[int64]struct{})
	}
	for i := range ids {
		m.exception_definitions[ids[i]] = struct{}{}
	}
}

// ClearExceptionDefinitions clears the "exception_definitions" edge to the ExceptionDefinition entity.
func (m *ExceptionCategoryMutation) ClearExceptionDefinitions() {
	m.clearedexception_definitions = true
}

// ExceptionDefinitionsCleared reports if the "exception_definitions" edge to the ExceptionDefinition entity was cleared.
func (m *ExceptionCategoryMutation) ExceptionDefinitionsCleared() bool {
	return m.clearedexception_definitions
}

// RemoveExceptionDefinitionIDs removes the "exception_definitions" edge to the ExceptionDefinition entity by IDs.
func (m *ExceptionCategoryMutation) RemoveExceptionDefinitionIDs(ids ...int64) {
	if m.removedexception_definitions == nil {
		m.removedexception_definitions = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.exception_definitions, ids[i])
		m.removedexception_definitions[ids[i]] = struct{}{}
	}
}

// RemovedExceptionDefinitions returns the removed IDs of the "exception_definitions" edge to the ExceptionDefinition entity.
func (m *ExceptionCategoryMutation) RemovedExceptionDefinitionsIDs() (ids []int64) {
	for id := range m.removedexception_definitions {
		ids = append(ids, id)
	}
	return
}

// ExceptionDefinitionsIDs returns the "exception_definitions" edge IDs in the mutation.
func (m *ExceptionCategoryMutation) ExceptionDefinitionsIDs() (ids []int64) {
	for id := range m.exception_definitions {
		ids = append(ids, id)
	}
	return
}

// ResetExceptionDefinitions resets all changes to the "exception_definitions" edge.
func (m *ExceptionCategoryMutation) ResetExceptionDefinitions() {
	m.exception_definitions = nil
	m.clearedexception_definitions = false
	m.removedexception_definitions = nil
}

// Where appends a list predicates to the ExceptionCategoryMutation builder.
func (m *ExceptionCategoryMutation) Where(ps ...predicate.ExceptionCategory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExceptionCategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExceptionCategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExceptionCategory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExceptionCategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExceptionCategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExceptionCategory).
func (m *ExceptionCategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExceptionCategoryMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, exceptioncategory.FieldName)
	}
	if m.is_valid != nil {
		fields = append(fields, exceptioncategory.FieldIsValid)
	}
	if m.create_time != nil {
		fields = append(fields, exceptioncategory.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, exceptioncategory.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExceptionCategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case exceptioncategory.FieldName:
		return m.Name()
	case exceptioncategory.FieldIsValid:
		return m.IsValid()
	case exceptioncategory.FieldCreateTime:
		return m.CreateTime()
	case exceptioncategory.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExceptionCategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case exceptioncategory.FieldName:
		return m.OldName(ctx)
	case exceptioncategory.FieldIsValid:
		return m.OldIsValid(ctx)
	case exceptioncategory.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case exceptioncategory.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown ExceptionCategory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExceptionCategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case exceptioncategory.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case exceptioncategory.FieldIsValid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsValid(v)
		return nil
	case exceptioncategory.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case exceptioncategory.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown ExceptionCategory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExceptionCategoryMutation) AddedFields() []string {
	var fields []string
	if m.addis_valid != nil {
		fields = append(fields, exceptioncategory.FieldIsValid)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExceptionCategoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case exceptioncategory.FieldIsValid:
		return m.AddedIsValid()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExceptionCategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case exceptioncategory.FieldIsValid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsValid(v)
		return nil
	}
	return fmt.Errorf("unknown ExceptionCategory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExceptionCategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExceptionCategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExceptionCategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ExceptionCategory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExceptionCategoryMutation) ResetField(name string) error {
	switch name {
	case exceptioncategory.FieldName:
		m.ResetName()
		return nil
	case exceptioncategory.FieldIsValid:
		m.ResetIsValid()
		return nil
	case exceptioncategory.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case exceptioncategory.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown ExceptionCategory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExceptionCategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.exception_definitions != nil {
		edges = append(edges, exceptioncategory.EdgeExceptionDefinitions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExceptionCategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case exceptioncategory.EdgeExceptionDefinitions:
		ids := make([]ent.Value, 0, len(m.exception_definitions))
		for id := range m.exception_definitions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExceptionCategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedexception_definitions != nil {
		edges = append(edges, exceptioncategory.EdgeExceptionDefinitions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExceptionCategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case exceptioncategory.EdgeExceptionDefinitions:
		ids := make([]ent.Value, 0, len(m.removedexception_definitions))
		for id := range m.removedexception_definitions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExceptionCategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedexception_definitions {
		edges = append(edges, exceptioncategory.EdgeExceptionDefinitions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExceptionCategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case exceptioncategory.EdgeExceptionDefinitions:
		return m.clearedexception_definitions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExceptionCategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ExceptionCategory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExceptionCategoryMutation) ResetEdge(name string) error {
	switch name {
	case exceptioncategory.EdgeExceptionDefinitions:
		m.ResetExceptionDefinitions()
		return nil
	}
	return fmt.Errorf("unknown ExceptionCategory edge %s", name)
}

// ExceptionDefinitionMutation represents an operation that mutates the ExceptionDefinition nodes in the graph.
type ExceptionDefinitionMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int64
	short_name                *string
	long_name                 *string
	is_valid                  *int
	addis_valid               *int
	create_time               *time.Time
	update_time               *time.Time
	clearedFields             map[string]struct{}
	exception_category        *int64
	clearedexception_category bool
	done                      bool
	oldValue                  func(context.Context) (*ExceptionDefinition, error)
	predicates                []predicate.ExceptionDefinition
}

var _ ent.Mutation = (*ExceptionDefinitionMutation)(nil)

// exceptiondefinitionOption allows management of the mutation configuration using functional options.
type exceptiondefinitionOption func(*ExceptionDefinitionMutation)

// newExceptionDefinitionMutation creates new mutation for the ExceptionDefinition entity.
func newExceptionDefinitionMutation(c config, op Op, opts ...exceptiondefinitionOption) *ExceptionDefinitionMutation {
	m := &ExceptionDefinitionMutation{
		config:        c,
		op:            op,
		typ:           TypeExceptionDefinition,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExceptionDefinitionID sets the ID field of the mutation.
func withExceptionDefinitionID(id int64) exceptiondefinitionOption {
	return func(m *ExceptionDefinitionMutation) {
		var (
			err   error
			once  sync.Once
			value *ExceptionDefinition
		)
		m.oldValue = func(ctx context.Context) (*ExceptionDefinition, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExceptionDefinition.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExceptionDefinition sets the old ExceptionDefinition of the mutation.
func withExceptionDefinition(node *ExceptionDefinition) exceptiondefinitionOption {
	return func(m *ExceptionDefinitionMutation) {
		m.oldValue = func(context.Context) (*ExceptionDefinition, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExceptionDefinitionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExceptionDefinitionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ExceptionDefinition entities.
func (m *ExceptionDefinitionMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExceptionDefinitionMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExceptionDefinitionMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExceptionDefinition.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCategoryID sets the "category_id" field.
func (m *ExceptionDefinitionMutation) SetCategoryID(i int64) {
	m.exception_category = &i
}

// CategoryID returns the value of the "category_id" field in the mutation.
func (m *ExceptionDefinitionMutation) CategoryID() (r int64, exists bool) {
	v := m.exception_category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryID returns the old "category_id" field's value of the ExceptionDefinition entity.
// If the ExceptionDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionDefinitionMutation) OldCategoryID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryID: %w", err)
	}
	return oldValue.CategoryID, nil
}

// ResetCategoryID resets all changes to the "category_id" field.
func (m *ExceptionDefinitionMutation) ResetCategoryID() {
	m.exception_category = nil
}

// SetShortName sets the "short_name" field.
func (m *ExceptionDefinitionMutation) SetShortName(s string) {
	m.short_name = &s
}

// ShortName returns the value of the "short_name" field in the mutation.
func (m *ExceptionDefinitionMutation) ShortName() (r string, exists bool) {
	v := m.short_name
	if v == nil {
		return
	}
	return *v, true
}

// OldShortName returns the old "short_name" field's value of the ExceptionDefinition entity.
// If the ExceptionDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionDefinitionMutation) OldShortName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShortName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShortName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShortName: %w", err)
	}
	return oldValue.ShortName, nil
}

// ResetShortName resets all changes to the "short_name" field.
func (m *ExceptionDefinitionMutation) ResetShortName() {
	m.short_name = nil
}

// SetLongName sets the "long_name" field.
func (m *ExceptionDefinitionMutation) SetLongName(s string) {
	m.long_name = &s
}

// LongName returns the value of the "long_name" field in the mutation.
func (m *ExceptionDefinitionMutation) LongName() (r string, exists bool) {
	v := m.long_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLongName returns the old "long_name" field's value of the ExceptionDefinition entity.
// If the ExceptionDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionDefinitionMutation) OldLongName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongName: %w", err)
	}
	return oldValue.LongName, nil
}

// ResetLongName resets all changes to the "long_name" field.
func (m *ExceptionDefinitionMutation) ResetLongName() {
	m.long_name = nil
}

// SetIsValid sets the "is_valid" field.
func (m *ExceptionDefinitionMutation) SetIsValid(i int) {
	m.is_valid = &i
	m.addis_valid = nil
}

// IsValid returns the value of the "is_valid" field in the mutation.
func (m *ExceptionDefinitionMutation) IsValid() (r int, exists bool) {
	v := m.is_valid
	if v == nil {
		return
	}
	return *v, true
}

// OldIsValid returns the old "is_valid" field's value of the ExceptionDefinition entity.
// If the ExceptionDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionDefinitionMutation) OldIsValid(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsValid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsValid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsValid: %w", err)
	}
	return oldValue.IsValid, nil
}

// AddIsValid adds i to the "is_valid" field.
func (m *ExceptionDefinitionMutation) AddIsValid(i int) {
	if m.addis_valid != nil {
		*m.addis_valid += i
	} else {
		m.addis_valid = &i
	}
}

// AddedIsValid returns the value that was added to the "is_valid" field in this mutation.
func (m *ExceptionDefinitionMutation) AddedIsValid() (r int, exists bool) {
	v := m.addis_valid
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsValid resets all changes to the "is_valid" field.
func (m *ExceptionDefinitionMutation) ResetIsValid() {
	m.is_valid = nil
	m.addis_valid = nil
}

// SetCreateTime sets the "create_time" field.
func (m *ExceptionDefinitionMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ExceptionDefinitionMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ExceptionDefinition entity.
// If the ExceptionDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionDefinitionMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ExceptionDefinitionMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ExceptionDefinitionMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ExceptionDefinitionMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the ExceptionDefinition entity.
// If the ExceptionDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionDefinitionMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ExceptionDefinitionMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetExceptionCategoryID sets the "exception_category" edge to the ExceptionCategory entity by id.
func (m *ExceptionDefinitionMutation) SetExceptionCategoryID(id int64) {
	m.exception_category = &id
}

// ClearExceptionCategory clears the "exception_category" edge to the ExceptionCategory entity.
func (m *ExceptionDefinitionMutation) ClearExceptionCategory() {
	m.clearedexception_category = true
	m.clearedFields[exceptiondefinition.FieldCategoryID] = struct{}{}
}

// ExceptionCategoryCleared reports if the "exception_category" edge to the ExceptionCategory entity was cleared.
func (m *ExceptionDefinitionMutation) ExceptionCategoryCleared() bool {
	return m.clearedexception_category
}

// ExceptionCategoryID returns the "exception_category" edge ID in the mutation.
func (m *ExceptionDefinitionMutation) ExceptionCategoryID() (id int64, exists bool) {
	if m.exception_category != nil {
		return *m.exception_category, true
	}
	return
}

// ExceptionCategoryIDs returns the "exception_category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ExceptionCategoryID instead. It exists only for internal usage by the builders.
func (m *ExceptionDefinitionMutation) ExceptionCategoryIDs() (ids []int64) {
	if id := m.exception_category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExceptionCategory resets all changes to the "exception_category" edge.
func (m *ExceptionDefinitionMutation) ResetExceptionCategory() {
	m.exception_category = nil
	m.clearedexception_category = false
}

// Where appends a list predicates to the ExceptionDefinitionMutation builder.
func (m *ExceptionDefinitionMutation) Where(ps ...predicate.ExceptionDefinition) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExceptionDefinitionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExceptionDefinitionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExceptionDefinition, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExceptionDefinitionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExceptionDefinitionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExceptionDefinition).
func (m *ExceptionDefinitionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExceptionDefinitionMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.exception_category != nil {
		fields = append(fields, exceptiondefinition.FieldCategoryID)
	}
	if m.short_name != nil {
		fields = append(fields, exceptiondefinition.FieldShortName)
	}
	if m.long_name != nil {
		fields = append(fields, exceptiondefinition.FieldLongName)
	}
	if m.is_valid != nil {
		fields = append(fields, exceptiondefinition.FieldIsValid)
	}
	if m.create_time != nil {
		fields = append(fields, exceptiondefinition.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, exceptiondefinition.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExceptionDefinitionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case exceptiondefinition.FieldCategoryID:
		return m.CategoryID()
	case exceptiondefinition.FieldShortName:
		return m.ShortName()
	case exceptiondefinition.FieldLongName:
		return m.LongName()
	case exceptiondefinition.FieldIsValid:
		return m.IsValid()
	case exceptiondefinition.FieldCreateTime:
		return m.CreateTime()
	case exceptiondefinition.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExceptionDefinitionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case exceptiondefinition.FieldCategoryID:
		return m.OldCategoryID(ctx)
	case exceptiondefinition.FieldShortName:
		return m.OldShortName(ctx)
	case exceptiondefinition.FieldLongName:
		return m.OldLongName(ctx)
	case exceptiondefinition.FieldIsValid:
		return m.OldIsValid(ctx)
	case exceptiondefinition.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case exceptiondefinition.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown ExceptionDefinition field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExceptionDefinitionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case exceptiondefinition.FieldCategoryID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryID(v)
		return nil
	case exceptiondefinition.FieldShortName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShortName(v)
		return nil
	case exceptiondefinition.FieldLongName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongName(v)
		return nil
	case exceptiondefinition.FieldIsValid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsValid(v)
		return nil
	case exceptiondefinition.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case exceptiondefinition.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown ExceptionDefinition field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExceptionDefinitionMutation) AddedFields() []string {
	var fields []string
	if m.addis_valid != nil {
		fields = append(fields, exceptiondefinition.FieldIsValid)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExceptionDefinitionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case exceptiondefinition.FieldIsValid:
		return m.AddedIsValid()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExceptionDefinitionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case exceptiondefinition.FieldIsValid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsValid(v)
		return nil
	}
	return fmt.Errorf("unknown ExceptionDefinition numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExceptionDefinitionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExceptionDefinitionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExceptionDefinitionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ExceptionDefinition nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExceptionDefinitionMutation) ResetField(name string) error {
	switch name {
	case exceptiondefinition.FieldCategoryID:
		m.ResetCategoryID()
		return nil
	case exceptiondefinition.FieldShortName:
		m.ResetShortName()
		return nil
	case exceptiondefinition.FieldLongName:
		m.ResetLongName()
		return nil
	case exceptiondefinition.FieldIsValid:
		m.ResetIsValid()
		return nil
	case exceptiondefinition.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case exceptiondefinition.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown ExceptionDefinition field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExceptionDefinitionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.exception_category != nil {
		edges = append(edges, exceptiondefinition.EdgeExceptionCategory)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExceptionDefinitionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case exceptiondefinition.EdgeExceptionCategory:
		if id := m.exception_category; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExceptionDefinitionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExceptionDefinitionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExceptionDefinitionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedexception_category {
		edges = append(edges, exceptiondefinition.EdgeExceptionCategory)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExceptionDefinitionMutation) EdgeCleared(name string) bool {
	switch name {
	case exceptiondefinition.EdgeExceptionCategory:
		return m.clearedexception_category
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExceptionDefinitionMutation) ClearEdge(name string) error {
	switch name {
	case exceptiondefinition.EdgeExceptionCategory:
		m.ClearExceptionCategory()
		return nil
	}
	return fmt.Errorf("unknown ExceptionDefinition unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExceptionDefinitionMutation) ResetEdge(name string) error {
	switch name {
	case exceptiondefinition.EdgeExceptionCategory:
		m.ResetExceptionCategory()
		return nil
	}
	return fmt.Errorf("unknown ExceptionDefinition edge %s", name)
}
