// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/exceptioncategory"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/exceptiondefinition"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/predicate"
)

// ExceptionCategoryQuery is the builder for querying ExceptionCategory entities.
type ExceptionCategoryQuery struct {
	config
	ctx                      *QueryContext
	order                    []exceptioncategory.OrderOption
	inters                   []Interceptor
	predicates               []predicate.ExceptionCategory
	withExceptionDefinitions *ExceptionDefinitionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ExceptionCategoryQuery builder.
func (ecq *ExceptionCategoryQuery) Where(ps ...predicate.ExceptionCategory) *ExceptionCategoryQuery {
	ecq.predicates = append(ecq.predicates, ps...)
	return ecq
}

// Limit the number of records to be returned by this query.
func (ecq *ExceptionCategoryQuery) Limit(limit int) *ExceptionCategoryQuery {
	ecq.ctx.Limit = &limit
	return ecq
}

// Offset to start from.
func (ecq *ExceptionCategoryQuery) Offset(offset int) *ExceptionCategoryQuery {
	ecq.ctx.Offset = &offset
	return ecq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ecq *ExceptionCategoryQuery) Unique(unique bool) *ExceptionCategoryQuery {
	ecq.ctx.Unique = &unique
	return ecq
}

// Order specifies how the records should be ordered.
func (ecq *ExceptionCategoryQuery) Order(o ...exceptioncategory.OrderOption) *ExceptionCategoryQuery {
	ecq.order = append(ecq.order, o...)
	return ecq
}

// QueryExceptionDefinitions chains the current query on the "exception_definitions" edge.
func (ecq *ExceptionCategoryQuery) QueryExceptionDefinitions() *ExceptionDefinitionQuery {
	query := (&ExceptionDefinitionClient{config: ecq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ecq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ecq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exceptioncategory.Table, exceptioncategory.FieldID, selector),
			sqlgraph.To(exceptiondefinition.Table, exceptiondefinition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exceptioncategory.ExceptionDefinitionsTable, exceptioncategory.ExceptionDefinitionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ecq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ExceptionCategory entity from the query.
// Returns a *NotFoundError when no ExceptionCategory was found.
func (ecq *ExceptionCategoryQuery) First(ctx context.Context) (*ExceptionCategory, error) {
	nodes, err := ecq.Limit(1).All(setContextOp(ctx, ecq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{exceptioncategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ecq *ExceptionCategoryQuery) FirstX(ctx context.Context) *ExceptionCategory {
	node, err := ecq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ExceptionCategory ID from the query.
// Returns a *NotFoundError when no ExceptionCategory ID was found.
func (ecq *ExceptionCategoryQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ecq.Limit(1).IDs(setContextOp(ctx, ecq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{exceptioncategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ecq *ExceptionCategoryQuery) FirstIDX(ctx context.Context) int64 {
	id, err := ecq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ExceptionCategory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ExceptionCategory entity is found.
// Returns a *NotFoundError when no ExceptionCategory entities are found.
func (ecq *ExceptionCategoryQuery) Only(ctx context.Context) (*ExceptionCategory, error) {
	nodes, err := ecq.Limit(2).All(setContextOp(ctx, ecq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{exceptioncategory.Label}
	default:
		return nil, &NotSingularError{exceptioncategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ecq *ExceptionCategoryQuery) OnlyX(ctx context.Context) *ExceptionCategory {
	node, err := ecq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ExceptionCategory ID in the query.
// Returns a *NotSingularError when more than one ExceptionCategory ID is found.
// Returns a *NotFoundError when no entities are found.
func (ecq *ExceptionCategoryQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ecq.Limit(2).IDs(setContextOp(ctx, ecq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{exceptioncategory.Label}
	default:
		err = &NotSingularError{exceptioncategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ecq *ExceptionCategoryQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := ecq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ExceptionCategories.
func (ecq *ExceptionCategoryQuery) All(ctx context.Context) ([]*ExceptionCategory, error) {
	ctx = setContextOp(ctx, ecq.ctx, "All")
	if err := ecq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ExceptionCategory, *ExceptionCategoryQuery]()
	return withInterceptors[[]*ExceptionCategory](ctx, ecq, qr, ecq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ecq *ExceptionCategoryQuery) AllX(ctx context.Context) []*ExceptionCategory {
	nodes, err := ecq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ExceptionCategory IDs.
func (ecq *ExceptionCategoryQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if ecq.ctx.Unique == nil && ecq.path != nil {
		ecq.Unique(true)
	}
	ctx = setContextOp(ctx, ecq.ctx, "IDs")
	if err = ecq.Select(exceptioncategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ecq *ExceptionCategoryQuery) IDsX(ctx context.Context) []int64 {
	ids, err := ecq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ecq *ExceptionCategoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ecq.ctx, "Count")
	if err := ecq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ecq, querierCount[*ExceptionCategoryQuery](), ecq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ecq *ExceptionCategoryQuery) CountX(ctx context.Context) int {
	count, err := ecq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ecq *ExceptionCategoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ecq.ctx, "Exist")
	switch _, err := ecq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ecq *ExceptionCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := ecq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ExceptionCategoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ecq *ExceptionCategoryQuery) Clone() *ExceptionCategoryQuery {
	if ecq == nil {
		return nil
	}
	return &ExceptionCategoryQuery{
		config:                   ecq.config,
		ctx:                      ecq.ctx.Clone(),
		order:                    append([]exceptioncategory.OrderOption{}, ecq.order...),
		inters:                   append([]Interceptor{}, ecq.inters...),
		predicates:               append([]predicate.ExceptionCategory{}, ecq.predicates...),
		withExceptionDefinitions: ecq.withExceptionDefinitions.Clone(),
		// clone intermediate query.
		sql:  ecq.sql.Clone(),
		path: ecq.path,
	}
}

// WithExceptionDefinitions tells the query-builder to eager-load the nodes that are connected to
// the "exception_definitions" edge. The optional arguments are used to configure the query builder of the edge.
func (ecq *ExceptionCategoryQuery) WithExceptionDefinitions(opts ...func(*ExceptionDefinitionQuery)) *ExceptionCategoryQuery {
	query := (&ExceptionDefinitionClient{config: ecq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ecq.withExceptionDefinitions = query
	return ecq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ExceptionCategory.Query().
//		GroupBy(exceptioncategory.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ecq *ExceptionCategoryQuery) GroupBy(field string, fields ...string) *ExceptionCategoryGroupBy {
	ecq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ExceptionCategoryGroupBy{build: ecq}
	grbuild.flds = &ecq.ctx.Fields
	grbuild.label = exceptioncategory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.ExceptionCategory.Query().
//		Select(exceptioncategory.FieldName).
//		Scan(ctx, &v)
func (ecq *ExceptionCategoryQuery) Select(fields ...string) *ExceptionCategorySelect {
	ecq.ctx.Fields = append(ecq.ctx.Fields, fields...)
	sbuild := &ExceptionCategorySelect{ExceptionCategoryQuery: ecq}
	sbuild.label = exceptioncategory.Label
	sbuild.flds, sbuild.scan = &ecq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ExceptionCategorySelect configured with the given aggregations.
func (ecq *ExceptionCategoryQuery) Aggregate(fns ...AggregateFunc) *ExceptionCategorySelect {
	return ecq.Select().Aggregate(fns...)
}

func (ecq *ExceptionCategoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ecq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ecq); err != nil {
				return err
			}
		}
	}
	for _, f := range ecq.ctx.Fields {
		if !exceptioncategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ecq.path != nil {
		prev, err := ecq.path(ctx)
		if err != nil {
			return err
		}
		ecq.sql = prev
	}
	return nil
}

func (ecq *ExceptionCategoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ExceptionCategory, error) {
	var (
		nodes       = []*ExceptionCategory{}
		_spec       = ecq.querySpec()
		loadedTypes = [1]bool{
			ecq.withExceptionDefinitions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ExceptionCategory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ExceptionCategory{config: ecq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ecq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ecq.withExceptionDefinitions; query != nil {
		if err := ecq.loadExceptionDefinitions(ctx, query, nodes,
			func(n *ExceptionCategory) { n.Edges.ExceptionDefinitions = []*ExceptionDefinition{} },
			func(n *ExceptionCategory, e *ExceptionDefinition) {
				n.Edges.ExceptionDefinitions = append(n.Edges.ExceptionDefinitions, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ecq *ExceptionCategoryQuery) loadExceptionDefinitions(ctx context.Context, query *ExceptionDefinitionQuery, nodes []*ExceptionCategory, init func(*ExceptionCategory), assign func(*ExceptionCategory, *ExceptionDefinition)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*ExceptionCategory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(exceptiondefinition.FieldCategoryID)
	}
	query.Where(predicate.ExceptionDefinition(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exceptioncategory.ExceptionDefinitionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CategoryID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "category_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ecq *ExceptionCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ecq.querySpec()
	_spec.Node.Columns = ecq.ctx.Fields
	if len(ecq.ctx.Fields) > 0 {
		_spec.Unique = ecq.ctx.Unique != nil && *ecq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ecq.driver, _spec)
}

func (ecq *ExceptionCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(exceptioncategory.Table, exceptioncategory.Columns, sqlgraph.NewFieldSpec(exceptioncategory.FieldID, field.TypeInt64))
	_spec.From = ecq.sql
	if unique := ecq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ecq.path != nil {
		_spec.Unique = true
	}
	if fields := ecq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exceptioncategory.FieldID)
		for i := range fields {
			if fields[i] != exceptioncategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ecq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ecq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ecq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ecq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ecq *ExceptionCategoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ecq.driver.Dialect())
	t1 := builder.Table(exceptioncategory.Table)
	columns := ecq.ctx.Fields
	if len(columns) == 0 {
		columns = exceptioncategory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ecq.sql != nil {
		selector = ecq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ecq.ctx.Unique != nil && *ecq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ecq.predicates {
		p(selector)
	}
	for _, p := range ecq.order {
		p(selector)
	}
	if offset := ecq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ecq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ExceptionCategoryGroupBy is the group-by builder for ExceptionCategory entities.
type ExceptionCategoryGroupBy struct {
	selector
	build *ExceptionCategoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ecgb *ExceptionCategoryGroupBy) Aggregate(fns ...AggregateFunc) *ExceptionCategoryGroupBy {
	ecgb.fns = append(ecgb.fns, fns...)
	return ecgb
}

// Scan applies the selector query and scans the result into the given value.
func (ecgb *ExceptionCategoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ecgb.build.ctx, "GroupBy")
	if err := ecgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExceptionCategoryQuery, *ExceptionCategoryGroupBy](ctx, ecgb.build, ecgb, ecgb.build.inters, v)
}

func (ecgb *ExceptionCategoryGroupBy) sqlScan(ctx context.Context, root *ExceptionCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ecgb.fns))
	for _, fn := range ecgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ecgb.flds)+len(ecgb.fns))
		for _, f := range *ecgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ecgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ecgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ExceptionCategorySelect is the builder for selecting fields of ExceptionCategory entities.
type ExceptionCategorySelect struct {
	*ExceptionCategoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ecs *ExceptionCategorySelect) Aggregate(fns ...AggregateFunc) *ExceptionCategorySelect {
	ecs.fns = append(ecs.fns, fns...)
	return ecs
}

// Scan applies the selector query and scans the result into the given value.
func (ecs *ExceptionCategorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ecs.ctx, "Select")
	if err := ecs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExceptionCategoryQuery, *ExceptionCategorySelect](ctx, ecs.ExceptionCategoryQuery, ecs, ecs.inters, v)
}

func (ecs *ExceptionCategorySelect) sqlScan(ctx context.Context, root *ExceptionCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ecs.fns))
	for _, fn := range ecs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ecs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ecs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
