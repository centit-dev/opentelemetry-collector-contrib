// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/exceptioncategory"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/exceptiondefinition"
)

// ExceptionCategoryCreate is the builder for creating a ExceptionCategory entity.
type ExceptionCategoryCreate struct {
	config
	mutation *ExceptionCategoryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ecc *ExceptionCategoryCreate) SetName(s string) *ExceptionCategoryCreate {
	ecc.mutation.SetName(s)
	return ecc
}

// SetIsValid sets the "is_valid" field.
func (ecc *ExceptionCategoryCreate) SetIsValid(i int) *ExceptionCategoryCreate {
	ecc.mutation.SetIsValid(i)
	return ecc
}

// SetNillableIsValid sets the "is_valid" field if the given value is not nil.
func (ecc *ExceptionCategoryCreate) SetNillableIsValid(i *int) *ExceptionCategoryCreate {
	if i != nil {
		ecc.SetIsValid(*i)
	}
	return ecc
}

// SetCreateTime sets the "create_time" field.
func (ecc *ExceptionCategoryCreate) SetCreateTime(t time.Time) *ExceptionCategoryCreate {
	ecc.mutation.SetCreateTime(t)
	return ecc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ecc *ExceptionCategoryCreate) SetNillableCreateTime(t *time.Time) *ExceptionCategoryCreate {
	if t != nil {
		ecc.SetCreateTime(*t)
	}
	return ecc
}

// SetUpdateTime sets the "update_time" field.
func (ecc *ExceptionCategoryCreate) SetUpdateTime(t time.Time) *ExceptionCategoryCreate {
	ecc.mutation.SetUpdateTime(t)
	return ecc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ecc *ExceptionCategoryCreate) SetNillableUpdateTime(t *time.Time) *ExceptionCategoryCreate {
	if t != nil {
		ecc.SetUpdateTime(*t)
	}
	return ecc
}

// SetID sets the "id" field.
func (ecc *ExceptionCategoryCreate) SetID(i int64) *ExceptionCategoryCreate {
	ecc.mutation.SetID(i)
	return ecc
}

// AddExceptionDefinitionIDs adds the "exception_definitions" edge to the ExceptionDefinition entity by IDs.
func (ecc *ExceptionCategoryCreate) AddExceptionDefinitionIDs(ids ...int64) *ExceptionCategoryCreate {
	ecc.mutation.AddExceptionDefinitionIDs(ids...)
	return ecc
}

// AddExceptionDefinitions adds the "exception_definitions" edges to the ExceptionDefinition entity.
func (ecc *ExceptionCategoryCreate) AddExceptionDefinitions(e ...*ExceptionDefinition) *ExceptionCategoryCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ecc.AddExceptionDefinitionIDs(ids...)
}

// Mutation returns the ExceptionCategoryMutation object of the builder.
func (ecc *ExceptionCategoryCreate) Mutation() *ExceptionCategoryMutation {
	return ecc.mutation
}

// Save creates the ExceptionCategory in the database.
func (ecc *ExceptionCategoryCreate) Save(ctx context.Context) (*ExceptionCategory, error) {
	ecc.defaults()
	return withHooks(ctx, ecc.sqlSave, ecc.mutation, ecc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ecc *ExceptionCategoryCreate) SaveX(ctx context.Context) *ExceptionCategory {
	v, err := ecc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecc *ExceptionCategoryCreate) Exec(ctx context.Context) error {
	_, err := ecc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecc *ExceptionCategoryCreate) ExecX(ctx context.Context) {
	if err := ecc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecc *ExceptionCategoryCreate) defaults() {
	if _, ok := ecc.mutation.IsValid(); !ok {
		v := exceptioncategory.DefaultIsValid
		ecc.mutation.SetIsValid(v)
	}
	if _, ok := ecc.mutation.CreateTime(); !ok {
		v := exceptioncategory.DefaultCreateTime()
		ecc.mutation.SetCreateTime(v)
	}
	if _, ok := ecc.mutation.UpdateTime(); !ok {
		v := exceptioncategory.DefaultUpdateTime()
		ecc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecc *ExceptionCategoryCreate) check() error {
	if _, ok := ecc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ExceptionCategory.name"`)}
	}
	if v, ok := ecc.mutation.Name(); ok {
		if err := exceptioncategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ExceptionCategory.name": %w`, err)}
		}
	}
	if _, ok := ecc.mutation.IsValid(); !ok {
		return &ValidationError{Name: "is_valid", err: errors.New(`ent: missing required field "ExceptionCategory.is_valid"`)}
	}
	if _, ok := ecc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ExceptionCategory.create_time"`)}
	}
	if _, ok := ecc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ExceptionCategory.update_time"`)}
	}
	return nil
}

func (ecc *ExceptionCategoryCreate) sqlSave(ctx context.Context) (*ExceptionCategory, error) {
	if err := ecc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ecc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ecc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ecc.mutation.id = &_node.ID
	ecc.mutation.done = true
	return _node, nil
}

func (ecc *ExceptionCategoryCreate) createSpec() (*ExceptionCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &ExceptionCategory{config: ecc.config}
		_spec = sqlgraph.NewCreateSpec(exceptioncategory.Table, sqlgraph.NewFieldSpec(exceptioncategory.FieldID, field.TypeInt64))
	)
	if id, ok := ecc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ecc.mutation.Name(); ok {
		_spec.SetField(exceptioncategory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ecc.mutation.IsValid(); ok {
		_spec.SetField(exceptioncategory.FieldIsValid, field.TypeInt, value)
		_node.IsValid = value
	}
	if value, ok := ecc.mutation.CreateTime(); ok {
		_spec.SetField(exceptioncategory.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ecc.mutation.UpdateTime(); ok {
		_spec.SetField(exceptioncategory.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := ecc.mutation.ExceptionDefinitionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exceptioncategory.ExceptionDefinitionsTable,
			Columns: []string{exceptioncategory.ExceptionDefinitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exceptiondefinition.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExceptionCategoryCreateBulk is the builder for creating many ExceptionCategory entities in bulk.
type ExceptionCategoryCreateBulk struct {
	config
	err      error
	builders []*ExceptionCategoryCreate
}

// Save creates the ExceptionCategory entities in the database.
func (eccb *ExceptionCategoryCreateBulk) Save(ctx context.Context) ([]*ExceptionCategory, error) {
	if eccb.err != nil {
		return nil, eccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eccb.builders))
	nodes := make([]*ExceptionCategory, len(eccb.builders))
	mutators := make([]Mutator, len(eccb.builders))
	for i := range eccb.builders {
		func(i int, root context.Context) {
			builder := eccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExceptionCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eccb *ExceptionCategoryCreateBulk) SaveX(ctx context.Context) []*ExceptionCategory {
	v, err := eccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eccb *ExceptionCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := eccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eccb *ExceptionCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := eccb.Exec(ctx); err != nil {
		panic(err)
	}
}
