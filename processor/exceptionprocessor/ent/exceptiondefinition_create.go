// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/exceptioncategory"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/exceptiondefinition"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/schema"
)

// ExceptionDefinitionCreate is the builder for creating a ExceptionDefinition entity.
type ExceptionDefinitionCreate struct {
	config
	mutation *ExceptionDefinitionMutation
	hooks    []Hook
}

// SetCategoryID sets the "category_id" field.
func (edc *ExceptionDefinitionCreate) SetCategoryID(i int64) *ExceptionDefinitionCreate {
	edc.mutation.SetCategoryID(i)
	return edc
}

// SetShortName sets the "short_name" field.
func (edc *ExceptionDefinitionCreate) SetShortName(s string) *ExceptionDefinitionCreate {
	edc.mutation.SetShortName(s)
	return edc
}

// SetLongName sets the "long_name" field.
func (edc *ExceptionDefinitionCreate) SetLongName(s string) *ExceptionDefinitionCreate {
	edc.mutation.SetLongName(s)
	return edc
}

// SetRelatedMiddlewareID sets the "related_middleware_id" field.
func (edc *ExceptionDefinitionCreate) SetRelatedMiddlewareID(i int64) *ExceptionDefinitionCreate {
	edc.mutation.SetRelatedMiddlewareID(i)
	return edc
}

// SetNillableRelatedMiddlewareID sets the "related_middleware_id" field if the given value is not nil.
func (edc *ExceptionDefinitionCreate) SetNillableRelatedMiddlewareID(i *int64) *ExceptionDefinitionCreate {
	if i != nil {
		edc.SetRelatedMiddlewareID(*i)
	}
	return edc
}

// SetRelatedMiddlewareConditions sets the "related_middleware_conditions" field.
func (edc *ExceptionDefinitionCreate) SetRelatedMiddlewareConditions(sdc []schema.ExceptionDefinitionCondition) *ExceptionDefinitionCreate {
	edc.mutation.SetRelatedMiddlewareConditions(sdc)
	return edc
}

// SetIsValid sets the "is_valid" field.
func (edc *ExceptionDefinitionCreate) SetIsValid(i int) *ExceptionDefinitionCreate {
	edc.mutation.SetIsValid(i)
	return edc
}

// SetNillableIsValid sets the "is_valid" field if the given value is not nil.
func (edc *ExceptionDefinitionCreate) SetNillableIsValid(i *int) *ExceptionDefinitionCreate {
	if i != nil {
		edc.SetIsValid(*i)
	}
	return edc
}

// SetCreateTime sets the "create_time" field.
func (edc *ExceptionDefinitionCreate) SetCreateTime(t time.Time) *ExceptionDefinitionCreate {
	edc.mutation.SetCreateTime(t)
	return edc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (edc *ExceptionDefinitionCreate) SetNillableCreateTime(t *time.Time) *ExceptionDefinitionCreate {
	if t != nil {
		edc.SetCreateTime(*t)
	}
	return edc
}

// SetUpdateTime sets the "update_time" field.
func (edc *ExceptionDefinitionCreate) SetUpdateTime(t time.Time) *ExceptionDefinitionCreate {
	edc.mutation.SetUpdateTime(t)
	return edc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (edc *ExceptionDefinitionCreate) SetNillableUpdateTime(t *time.Time) *ExceptionDefinitionCreate {
	if t != nil {
		edc.SetUpdateTime(*t)
	}
	return edc
}

// SetID sets the "id" field.
func (edc *ExceptionDefinitionCreate) SetID(i int64) *ExceptionDefinitionCreate {
	edc.mutation.SetID(i)
	return edc
}

// SetExceptionCategoryID sets the "exception_category" edge to the ExceptionCategory entity by ID.
func (edc *ExceptionDefinitionCreate) SetExceptionCategoryID(id int64) *ExceptionDefinitionCreate {
	edc.mutation.SetExceptionCategoryID(id)
	return edc
}

// SetExceptionCategory sets the "exception_category" edge to the ExceptionCategory entity.
func (edc *ExceptionDefinitionCreate) SetExceptionCategory(e *ExceptionCategory) *ExceptionDefinitionCreate {
	return edc.SetExceptionCategoryID(e.ID)
}

// Mutation returns the ExceptionDefinitionMutation object of the builder.
func (edc *ExceptionDefinitionCreate) Mutation() *ExceptionDefinitionMutation {
	return edc.mutation
}

// Save creates the ExceptionDefinition in the database.
func (edc *ExceptionDefinitionCreate) Save(ctx context.Context) (*ExceptionDefinition, error) {
	edc.defaults()
	return withHooks(ctx, edc.sqlSave, edc.mutation, edc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (edc *ExceptionDefinitionCreate) SaveX(ctx context.Context) *ExceptionDefinition {
	v, err := edc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (edc *ExceptionDefinitionCreate) Exec(ctx context.Context) error {
	_, err := edc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edc *ExceptionDefinitionCreate) ExecX(ctx context.Context) {
	if err := edc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (edc *ExceptionDefinitionCreate) defaults() {
	if _, ok := edc.mutation.IsValid(); !ok {
		v := exceptiondefinition.DefaultIsValid
		edc.mutation.SetIsValid(v)
	}
	if _, ok := edc.mutation.CreateTime(); !ok {
		v := exceptiondefinition.DefaultCreateTime()
		edc.mutation.SetCreateTime(v)
	}
	if _, ok := edc.mutation.UpdateTime(); !ok {
		v := exceptiondefinition.DefaultUpdateTime()
		edc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (edc *ExceptionDefinitionCreate) check() error {
	if _, ok := edc.mutation.CategoryID(); !ok {
		return &ValidationError{Name: "category_id", err: errors.New(`ent: missing required field "ExceptionDefinition.category_id"`)}
	}
	if v, ok := edc.mutation.CategoryID(); ok {
		if err := exceptiondefinition.CategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "category_id", err: fmt.Errorf(`ent: validator failed for field "ExceptionDefinition.category_id": %w`, err)}
		}
	}
	if _, ok := edc.mutation.ShortName(); !ok {
		return &ValidationError{Name: "short_name", err: errors.New(`ent: missing required field "ExceptionDefinition.short_name"`)}
	}
	if v, ok := edc.mutation.ShortName(); ok {
		if err := exceptiondefinition.ShortNameValidator(v); err != nil {
			return &ValidationError{Name: "short_name", err: fmt.Errorf(`ent: validator failed for field "ExceptionDefinition.short_name": %w`, err)}
		}
	}
	if _, ok := edc.mutation.LongName(); !ok {
		return &ValidationError{Name: "long_name", err: errors.New(`ent: missing required field "ExceptionDefinition.long_name"`)}
	}
	if v, ok := edc.mutation.LongName(); ok {
		if err := exceptiondefinition.LongNameValidator(v); err != nil {
			return &ValidationError{Name: "long_name", err: fmt.Errorf(`ent: validator failed for field "ExceptionDefinition.long_name": %w`, err)}
		}
	}
	if _, ok := edc.mutation.IsValid(); !ok {
		return &ValidationError{Name: "is_valid", err: errors.New(`ent: missing required field "ExceptionDefinition.is_valid"`)}
	}
	if _, ok := edc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ExceptionDefinition.create_time"`)}
	}
	if _, ok := edc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ExceptionDefinition.update_time"`)}
	}
	if v, ok := edc.mutation.ID(); ok {
		if err := exceptiondefinition.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ExceptionDefinition.id": %w`, err)}
		}
	}
	if _, ok := edc.mutation.ExceptionCategoryID(); !ok {
		return &ValidationError{Name: "exception_category", err: errors.New(`ent: missing required edge "ExceptionDefinition.exception_category"`)}
	}
	return nil
}

func (edc *ExceptionDefinitionCreate) sqlSave(ctx context.Context) (*ExceptionDefinition, error) {
	if err := edc.check(); err != nil {
		return nil, err
	}
	_node, _spec := edc.createSpec()
	if err := sqlgraph.CreateNode(ctx, edc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	edc.mutation.id = &_node.ID
	edc.mutation.done = true
	return _node, nil
}

func (edc *ExceptionDefinitionCreate) createSpec() (*ExceptionDefinition, *sqlgraph.CreateSpec) {
	var (
		_node = &ExceptionDefinition{config: edc.config}
		_spec = sqlgraph.NewCreateSpec(exceptiondefinition.Table, sqlgraph.NewFieldSpec(exceptiondefinition.FieldID, field.TypeInt64))
	)
	if id, ok := edc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := edc.mutation.ShortName(); ok {
		_spec.SetField(exceptiondefinition.FieldShortName, field.TypeString, value)
		_node.ShortName = value
	}
	if value, ok := edc.mutation.LongName(); ok {
		_spec.SetField(exceptiondefinition.FieldLongName, field.TypeString, value)
		_node.LongName = value
	}
	if value, ok := edc.mutation.RelatedMiddlewareID(); ok {
		_spec.SetField(exceptiondefinition.FieldRelatedMiddlewareID, field.TypeInt64, value)
		_node.RelatedMiddlewareID = value
	}
	if value, ok := edc.mutation.RelatedMiddlewareConditions(); ok {
		_spec.SetField(exceptiondefinition.FieldRelatedMiddlewareConditions, field.TypeJSON, value)
		_node.RelatedMiddlewareConditions = value
	}
	if value, ok := edc.mutation.IsValid(); ok {
		_spec.SetField(exceptiondefinition.FieldIsValid, field.TypeInt, value)
		_node.IsValid = value
	}
	if value, ok := edc.mutation.CreateTime(); ok {
		_spec.SetField(exceptiondefinition.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := edc.mutation.UpdateTime(); ok {
		_spec.SetField(exceptiondefinition.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := edc.mutation.ExceptionCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exceptiondefinition.ExceptionCategoryTable,
			Columns: []string{exceptiondefinition.ExceptionCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exceptioncategory.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CategoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExceptionDefinitionCreateBulk is the builder for creating many ExceptionDefinition entities in bulk.
type ExceptionDefinitionCreateBulk struct {
	config
	err      error
	builders []*ExceptionDefinitionCreate
}

// Save creates the ExceptionDefinition entities in the database.
func (edcb *ExceptionDefinitionCreateBulk) Save(ctx context.Context) ([]*ExceptionDefinition, error) {
	if edcb.err != nil {
		return nil, edcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(edcb.builders))
	nodes := make([]*ExceptionDefinition, len(edcb.builders))
	mutators := make([]Mutator, len(edcb.builders))
	for i := range edcb.builders {
		func(i int, root context.Context) {
			builder := edcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExceptionDefinitionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, edcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, edcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, edcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (edcb *ExceptionDefinitionCreateBulk) SaveX(ctx context.Context) []*ExceptionDefinition {
	v, err := edcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (edcb *ExceptionDefinitionCreateBulk) Exec(ctx context.Context) error {
	_, err := edcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edcb *ExceptionDefinitionCreateBulk) ExecX(ctx context.Context) {
	if err := edcb.Exec(ctx); err != nil {
		panic(err)
	}
}
