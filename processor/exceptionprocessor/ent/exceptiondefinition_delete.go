// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/exceptiondefinition"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/exceptionprocessor/ent/predicate"
)

// ExceptionDefinitionDelete is the builder for deleting a ExceptionDefinition entity.
type ExceptionDefinitionDelete struct {
	config
	hooks    []Hook
	mutation *ExceptionDefinitionMutation
}

// Where appends a list predicates to the ExceptionDefinitionDelete builder.
func (edd *ExceptionDefinitionDelete) Where(ps ...predicate.ExceptionDefinition) *ExceptionDefinitionDelete {
	edd.mutation.Where(ps...)
	return edd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (edd *ExceptionDefinitionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, edd.sqlExec, edd.mutation, edd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (edd *ExceptionDefinitionDelete) ExecX(ctx context.Context) int {
	n, err := edd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (edd *ExceptionDefinitionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(exceptiondefinition.Table, sqlgraph.NewFieldSpec(exceptiondefinition.FieldID, field.TypeInt64))
	if ps := edd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, edd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	edd.mutation.done = true
	return affected, err
}

// ExceptionDefinitionDeleteOne is the builder for deleting a single ExceptionDefinition entity.
type ExceptionDefinitionDeleteOne struct {
	edd *ExceptionDefinitionDelete
}

// Where appends a list predicates to the ExceptionDefinitionDelete builder.
func (eddo *ExceptionDefinitionDeleteOne) Where(ps ...predicate.ExceptionDefinition) *ExceptionDefinitionDeleteOne {
	eddo.edd.mutation.Where(ps...)
	return eddo
}

// Exec executes the deletion query.
func (eddo *ExceptionDefinitionDeleteOne) Exec(ctx context.Context) error {
	n, err := eddo.edd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{exceptiondefinition.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (eddo *ExceptionDefinitionDeleteOne) ExecX(ctx context.Context) {
	if err := eddo.Exec(ctx); err != nil {
		panic(err)
	}
}
