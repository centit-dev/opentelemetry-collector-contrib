// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/apptypeprocessor/ent/middlewaredefinition"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/apptypeprocessor/ent/predicate"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/apptypeprocessor/ent/schema"
)

// MiddlewareDefinitionUpdate is the builder for updating MiddlewareDefinition entities.
type MiddlewareDefinitionUpdate struct {
	config
	hooks    []Hook
	mutation *MiddlewareDefinitionMutation
}

// Where appends a list predicates to the MiddlewareDefinitionUpdate builder.
func (mdu *MiddlewareDefinitionUpdate) Where(ps ...predicate.MiddlewareDefinition) *MiddlewareDefinitionUpdate {
	mdu.mutation.Where(ps...)
	return mdu
}

// SetName sets the "name" field.
func (mdu *MiddlewareDefinitionUpdate) SetName(s string) *MiddlewareDefinitionUpdate {
	mdu.mutation.SetName(s)
	return mdu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mdu *MiddlewareDefinitionUpdate) SetNillableName(s *string) *MiddlewareDefinitionUpdate {
	if s != nil {
		mdu.SetName(*s)
	}
	return mdu
}

// SetType sets the "type" field.
func (mdu *MiddlewareDefinitionUpdate) SetType(i int16) *MiddlewareDefinitionUpdate {
	mdu.mutation.ResetType()
	mdu.mutation.SetType(i)
	return mdu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mdu *MiddlewareDefinitionUpdate) SetNillableType(i *int16) *MiddlewareDefinitionUpdate {
	if i != nil {
		mdu.SetType(*i)
	}
	return mdu
}

// AddType adds i to the "type" field.
func (mdu *MiddlewareDefinitionUpdate) AddType(i int16) *MiddlewareDefinitionUpdate {
	mdu.mutation.AddType(i)
	return mdu
}

// SetSpanConditions sets the "span_conditions" field.
func (mdu *MiddlewareDefinitionUpdate) SetSpanConditions(sdc []schema.MiddlewareDefinitionCondition) *MiddlewareDefinitionUpdate {
	mdu.mutation.SetSpanConditions(sdc)
	return mdu
}

// AppendSpanConditions appends sdc to the "span_conditions" field.
func (mdu *MiddlewareDefinitionUpdate) AppendSpanConditions(sdc []schema.MiddlewareDefinitionCondition) *MiddlewareDefinitionUpdate {
	mdu.mutation.AppendSpanConditions(sdc)
	return mdu
}

// ClearSpanConditions clears the value of the "span_conditions" field.
func (mdu *MiddlewareDefinitionUpdate) ClearSpanConditions() *MiddlewareDefinitionUpdate {
	mdu.mutation.ClearSpanConditions()
	return mdu
}

// SetIsValid sets the "is_valid" field.
func (mdu *MiddlewareDefinitionUpdate) SetIsValid(i int) *MiddlewareDefinitionUpdate {
	mdu.mutation.ResetIsValid()
	mdu.mutation.SetIsValid(i)
	return mdu
}

// SetNillableIsValid sets the "is_valid" field if the given value is not nil.
func (mdu *MiddlewareDefinitionUpdate) SetNillableIsValid(i *int) *MiddlewareDefinitionUpdate {
	if i != nil {
		mdu.SetIsValid(*i)
	}
	return mdu
}

// AddIsValid adds i to the "is_valid" field.
func (mdu *MiddlewareDefinitionUpdate) AddIsValid(i int) *MiddlewareDefinitionUpdate {
	mdu.mutation.AddIsValid(i)
	return mdu
}

// SetUpdateTime sets the "update_time" field.
func (mdu *MiddlewareDefinitionUpdate) SetUpdateTime(t time.Time) *MiddlewareDefinitionUpdate {
	mdu.mutation.SetUpdateTime(t)
	return mdu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mdu *MiddlewareDefinitionUpdate) SetNillableUpdateTime(t *time.Time) *MiddlewareDefinitionUpdate {
	if t != nil {
		mdu.SetUpdateTime(*t)
	}
	return mdu
}

// Mutation returns the MiddlewareDefinitionMutation object of the builder.
func (mdu *MiddlewareDefinitionUpdate) Mutation() *MiddlewareDefinitionMutation {
	return mdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mdu *MiddlewareDefinitionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mdu.sqlSave, mdu.mutation, mdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mdu *MiddlewareDefinitionUpdate) SaveX(ctx context.Context) int {
	affected, err := mdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mdu *MiddlewareDefinitionUpdate) Exec(ctx context.Context) error {
	_, err := mdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdu *MiddlewareDefinitionUpdate) ExecX(ctx context.Context) {
	if err := mdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mdu *MiddlewareDefinitionUpdate) check() error {
	if v, ok := mdu.mutation.Name(); ok {
		if err := middlewaredefinition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MiddlewareDefinition.name": %w`, err)}
		}
	}
	return nil
}

func (mdu *MiddlewareDefinitionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(middlewaredefinition.Table, middlewaredefinition.Columns, sqlgraph.NewFieldSpec(middlewaredefinition.FieldID, field.TypeInt64))
	if ps := mdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mdu.mutation.Name(); ok {
		_spec.SetField(middlewaredefinition.FieldName, field.TypeString, value)
	}
	if value, ok := mdu.mutation.GetType(); ok {
		_spec.SetField(middlewaredefinition.FieldType, field.TypeInt16, value)
	}
	if value, ok := mdu.mutation.AddedType(); ok {
		_spec.AddField(middlewaredefinition.FieldType, field.TypeInt16, value)
	}
	if value, ok := mdu.mutation.SpanConditions(); ok {
		_spec.SetField(middlewaredefinition.FieldSpanConditions, field.TypeJSON, value)
	}
	if value, ok := mdu.mutation.AppendedSpanConditions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, middlewaredefinition.FieldSpanConditions, value)
		})
	}
	if mdu.mutation.SpanConditionsCleared() {
		_spec.ClearField(middlewaredefinition.FieldSpanConditions, field.TypeJSON)
	}
	if value, ok := mdu.mutation.IsValid(); ok {
		_spec.SetField(middlewaredefinition.FieldIsValid, field.TypeInt, value)
	}
	if value, ok := mdu.mutation.AddedIsValid(); ok {
		_spec.AddField(middlewaredefinition.FieldIsValid, field.TypeInt, value)
	}
	if value, ok := mdu.mutation.UpdateTime(); ok {
		_spec.SetField(middlewaredefinition.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{middlewaredefinition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mdu.mutation.done = true
	return n, nil
}

// MiddlewareDefinitionUpdateOne is the builder for updating a single MiddlewareDefinition entity.
type MiddlewareDefinitionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MiddlewareDefinitionMutation
}

// SetName sets the "name" field.
func (mduo *MiddlewareDefinitionUpdateOne) SetName(s string) *MiddlewareDefinitionUpdateOne {
	mduo.mutation.SetName(s)
	return mduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mduo *MiddlewareDefinitionUpdateOne) SetNillableName(s *string) *MiddlewareDefinitionUpdateOne {
	if s != nil {
		mduo.SetName(*s)
	}
	return mduo
}

// SetType sets the "type" field.
func (mduo *MiddlewareDefinitionUpdateOne) SetType(i int16) *MiddlewareDefinitionUpdateOne {
	mduo.mutation.ResetType()
	mduo.mutation.SetType(i)
	return mduo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mduo *MiddlewareDefinitionUpdateOne) SetNillableType(i *int16) *MiddlewareDefinitionUpdateOne {
	if i != nil {
		mduo.SetType(*i)
	}
	return mduo
}

// AddType adds i to the "type" field.
func (mduo *MiddlewareDefinitionUpdateOne) AddType(i int16) *MiddlewareDefinitionUpdateOne {
	mduo.mutation.AddType(i)
	return mduo
}

// SetSpanConditions sets the "span_conditions" field.
func (mduo *MiddlewareDefinitionUpdateOne) SetSpanConditions(sdc []schema.MiddlewareDefinitionCondition) *MiddlewareDefinitionUpdateOne {
	mduo.mutation.SetSpanConditions(sdc)
	return mduo
}

// AppendSpanConditions appends sdc to the "span_conditions" field.
func (mduo *MiddlewareDefinitionUpdateOne) AppendSpanConditions(sdc []schema.MiddlewareDefinitionCondition) *MiddlewareDefinitionUpdateOne {
	mduo.mutation.AppendSpanConditions(sdc)
	return mduo
}

// ClearSpanConditions clears the value of the "span_conditions" field.
func (mduo *MiddlewareDefinitionUpdateOne) ClearSpanConditions() *MiddlewareDefinitionUpdateOne {
	mduo.mutation.ClearSpanConditions()
	return mduo
}

// SetIsValid sets the "is_valid" field.
func (mduo *MiddlewareDefinitionUpdateOne) SetIsValid(i int) *MiddlewareDefinitionUpdateOne {
	mduo.mutation.ResetIsValid()
	mduo.mutation.SetIsValid(i)
	return mduo
}

// SetNillableIsValid sets the "is_valid" field if the given value is not nil.
func (mduo *MiddlewareDefinitionUpdateOne) SetNillableIsValid(i *int) *MiddlewareDefinitionUpdateOne {
	if i != nil {
		mduo.SetIsValid(*i)
	}
	return mduo
}

// AddIsValid adds i to the "is_valid" field.
func (mduo *MiddlewareDefinitionUpdateOne) AddIsValid(i int) *MiddlewareDefinitionUpdateOne {
	mduo.mutation.AddIsValid(i)
	return mduo
}

// SetUpdateTime sets the "update_time" field.
func (mduo *MiddlewareDefinitionUpdateOne) SetUpdateTime(t time.Time) *MiddlewareDefinitionUpdateOne {
	mduo.mutation.SetUpdateTime(t)
	return mduo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mduo *MiddlewareDefinitionUpdateOne) SetNillableUpdateTime(t *time.Time) *MiddlewareDefinitionUpdateOne {
	if t != nil {
		mduo.SetUpdateTime(*t)
	}
	return mduo
}

// Mutation returns the MiddlewareDefinitionMutation object of the builder.
func (mduo *MiddlewareDefinitionUpdateOne) Mutation() *MiddlewareDefinitionMutation {
	return mduo.mutation
}

// Where appends a list predicates to the MiddlewareDefinitionUpdate builder.
func (mduo *MiddlewareDefinitionUpdateOne) Where(ps ...predicate.MiddlewareDefinition) *MiddlewareDefinitionUpdateOne {
	mduo.mutation.Where(ps...)
	return mduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mduo *MiddlewareDefinitionUpdateOne) Select(field string, fields ...string) *MiddlewareDefinitionUpdateOne {
	mduo.fields = append([]string{field}, fields...)
	return mduo
}

// Save executes the query and returns the updated MiddlewareDefinition entity.
func (mduo *MiddlewareDefinitionUpdateOne) Save(ctx context.Context) (*MiddlewareDefinition, error) {
	return withHooks(ctx, mduo.sqlSave, mduo.mutation, mduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mduo *MiddlewareDefinitionUpdateOne) SaveX(ctx context.Context) *MiddlewareDefinition {
	node, err := mduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mduo *MiddlewareDefinitionUpdateOne) Exec(ctx context.Context) error {
	_, err := mduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mduo *MiddlewareDefinitionUpdateOne) ExecX(ctx context.Context) {
	if err := mduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mduo *MiddlewareDefinitionUpdateOne) check() error {
	if v, ok := mduo.mutation.Name(); ok {
		if err := middlewaredefinition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MiddlewareDefinition.name": %w`, err)}
		}
	}
	return nil
}

func (mduo *MiddlewareDefinitionUpdateOne) sqlSave(ctx context.Context) (_node *MiddlewareDefinition, err error) {
	if err := mduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(middlewaredefinition.Table, middlewaredefinition.Columns, sqlgraph.NewFieldSpec(middlewaredefinition.FieldID, field.TypeInt64))
	id, ok := mduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MiddlewareDefinition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, middlewaredefinition.FieldID)
		for _, f := range fields {
			if !middlewaredefinition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != middlewaredefinition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mduo.mutation.Name(); ok {
		_spec.SetField(middlewaredefinition.FieldName, field.TypeString, value)
	}
	if value, ok := mduo.mutation.GetType(); ok {
		_spec.SetField(middlewaredefinition.FieldType, field.TypeInt16, value)
	}
	if value, ok := mduo.mutation.AddedType(); ok {
		_spec.AddField(middlewaredefinition.FieldType, field.TypeInt16, value)
	}
	if value, ok := mduo.mutation.SpanConditions(); ok {
		_spec.SetField(middlewaredefinition.FieldSpanConditions, field.TypeJSON, value)
	}
	if value, ok := mduo.mutation.AppendedSpanConditions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, middlewaredefinition.FieldSpanConditions, value)
		})
	}
	if mduo.mutation.SpanConditionsCleared() {
		_spec.ClearField(middlewaredefinition.FieldSpanConditions, field.TypeJSON)
	}
	if value, ok := mduo.mutation.IsValid(); ok {
		_spec.SetField(middlewaredefinition.FieldIsValid, field.TypeInt, value)
	}
	if value, ok := mduo.mutation.AddedIsValid(); ok {
		_spec.AddField(middlewaredefinition.FieldIsValid, field.TypeInt, value)
	}
	if value, ok := mduo.mutation.UpdateTime(); ok {
		_spec.SetField(middlewaredefinition.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &MiddlewareDefinition{config: mduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{middlewaredefinition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mduo.mutation.done = true
	return _node, nil
}
