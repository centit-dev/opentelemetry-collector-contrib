// Code generated by ent, DO NOT EDIT.

package middlewaredefinition

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/apptypeprocessor/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldEQ(FieldName, v))
}

// IsValid applies equality check predicate on the "is_valid" field. It's identical to IsValidEQ.
func IsValid(v int) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldEQ(FieldIsValid, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldEQ(FieldUpdateTime, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldContainsFold(FieldName, v))
}

// SpanConditionsIsNil applies the IsNil predicate on the "span_conditions" field.
func SpanConditionsIsNil() predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldIsNull(FieldSpanConditions))
}

// SpanConditionsNotNil applies the NotNil predicate on the "span_conditions" field.
func SpanConditionsNotNil() predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldNotNull(FieldSpanConditions))
}

// IsValidEQ applies the EQ predicate on the "is_valid" field.
func IsValidEQ(v int) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldEQ(FieldIsValid, v))
}

// IsValidNEQ applies the NEQ predicate on the "is_valid" field.
func IsValidNEQ(v int) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldNEQ(FieldIsValid, v))
}

// IsValidIn applies the In predicate on the "is_valid" field.
func IsValidIn(vs ...int) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldIn(FieldIsValid, vs...))
}

// IsValidNotIn applies the NotIn predicate on the "is_valid" field.
func IsValidNotIn(vs ...int) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldNotIn(FieldIsValid, vs...))
}

// IsValidGT applies the GT predicate on the "is_valid" field.
func IsValidGT(v int) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldGT(FieldIsValid, v))
}

// IsValidGTE applies the GTE predicate on the "is_valid" field.
func IsValidGTE(v int) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldGTE(FieldIsValid, v))
}

// IsValidLT applies the LT predicate on the "is_valid" field.
func IsValidLT(v int) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldLT(FieldIsValid, v))
}

// IsValidLTE applies the LTE predicate on the "is_valid" field.
func IsValidLTE(v int) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldLTE(FieldIsValid, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MiddlewareDefinition) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MiddlewareDefinition) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MiddlewareDefinition) predicate.MiddlewareDefinition {
	return predicate.MiddlewareDefinition(sql.NotPredicates(p))
}
