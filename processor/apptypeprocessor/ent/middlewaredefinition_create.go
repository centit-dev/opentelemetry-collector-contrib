// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/apptypeprocessor/ent/middlewaredefinition"
	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/apptypeprocessor/ent/schema"
)

// MiddlewareDefinitionCreate is the builder for creating a MiddlewareDefinition entity.
type MiddlewareDefinitionCreate struct {
	config
	mutation *MiddlewareDefinitionMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mdc *MiddlewareDefinitionCreate) SetName(s string) *MiddlewareDefinitionCreate {
	mdc.mutation.SetName(s)
	return mdc
}

// SetType sets the "type" field.
func (mdc *MiddlewareDefinitionCreate) SetType(i int16) *MiddlewareDefinitionCreate {
	mdc.mutation.SetType(i)
	return mdc
}

// SetSpanConditions sets the "span_conditions" field.
func (mdc *MiddlewareDefinitionCreate) SetSpanConditions(sdc []schema.MiddlewareDefinitionCondition) *MiddlewareDefinitionCreate {
	mdc.mutation.SetSpanConditions(sdc)
	return mdc
}

// SetIsValid sets the "is_valid" field.
func (mdc *MiddlewareDefinitionCreate) SetIsValid(i int) *MiddlewareDefinitionCreate {
	mdc.mutation.SetIsValid(i)
	return mdc
}

// SetNillableIsValid sets the "is_valid" field if the given value is not nil.
func (mdc *MiddlewareDefinitionCreate) SetNillableIsValid(i *int) *MiddlewareDefinitionCreate {
	if i != nil {
		mdc.SetIsValid(*i)
	}
	return mdc
}

// SetCreateTime sets the "create_time" field.
func (mdc *MiddlewareDefinitionCreate) SetCreateTime(t time.Time) *MiddlewareDefinitionCreate {
	mdc.mutation.SetCreateTime(t)
	return mdc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mdc *MiddlewareDefinitionCreate) SetNillableCreateTime(t *time.Time) *MiddlewareDefinitionCreate {
	if t != nil {
		mdc.SetCreateTime(*t)
	}
	return mdc
}

// SetUpdateTime sets the "update_time" field.
func (mdc *MiddlewareDefinitionCreate) SetUpdateTime(t time.Time) *MiddlewareDefinitionCreate {
	mdc.mutation.SetUpdateTime(t)
	return mdc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mdc *MiddlewareDefinitionCreate) SetNillableUpdateTime(t *time.Time) *MiddlewareDefinitionCreate {
	if t != nil {
		mdc.SetUpdateTime(*t)
	}
	return mdc
}

// SetID sets the "id" field.
func (mdc *MiddlewareDefinitionCreate) SetID(i int64) *MiddlewareDefinitionCreate {
	mdc.mutation.SetID(i)
	return mdc
}

// Mutation returns the MiddlewareDefinitionMutation object of the builder.
func (mdc *MiddlewareDefinitionCreate) Mutation() *MiddlewareDefinitionMutation {
	return mdc.mutation
}

// Save creates the MiddlewareDefinition in the database.
func (mdc *MiddlewareDefinitionCreate) Save(ctx context.Context) (*MiddlewareDefinition, error) {
	mdc.defaults()
	return withHooks(ctx, mdc.sqlSave, mdc.mutation, mdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mdc *MiddlewareDefinitionCreate) SaveX(ctx context.Context) *MiddlewareDefinition {
	v, err := mdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mdc *MiddlewareDefinitionCreate) Exec(ctx context.Context) error {
	_, err := mdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdc *MiddlewareDefinitionCreate) ExecX(ctx context.Context) {
	if err := mdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mdc *MiddlewareDefinitionCreate) defaults() {
	if _, ok := mdc.mutation.IsValid(); !ok {
		v := middlewaredefinition.DefaultIsValid
		mdc.mutation.SetIsValid(v)
	}
	if _, ok := mdc.mutation.CreateTime(); !ok {
		v := middlewaredefinition.DefaultCreateTime()
		mdc.mutation.SetCreateTime(v)
	}
	if _, ok := mdc.mutation.UpdateTime(); !ok {
		v := middlewaredefinition.DefaultUpdateTime()
		mdc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mdc *MiddlewareDefinitionCreate) check() error {
	if _, ok := mdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MiddlewareDefinition.name"`)}
	}
	if v, ok := mdc.mutation.Name(); ok {
		if err := middlewaredefinition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MiddlewareDefinition.name": %w`, err)}
		}
	}
	if _, ok := mdc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "MiddlewareDefinition.type"`)}
	}
	if _, ok := mdc.mutation.IsValid(); !ok {
		return &ValidationError{Name: "is_valid", err: errors.New(`ent: missing required field "MiddlewareDefinition.is_valid"`)}
	}
	if _, ok := mdc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "MiddlewareDefinition.create_time"`)}
	}
	if _, ok := mdc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "MiddlewareDefinition.update_time"`)}
	}
	if v, ok := mdc.mutation.ID(); ok {
		if err := middlewaredefinition.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "MiddlewareDefinition.id": %w`, err)}
		}
	}
	return nil
}

func (mdc *MiddlewareDefinitionCreate) sqlSave(ctx context.Context) (*MiddlewareDefinition, error) {
	if err := mdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mdc.mutation.id = &_node.ID
	mdc.mutation.done = true
	return _node, nil
}

func (mdc *MiddlewareDefinitionCreate) createSpec() (*MiddlewareDefinition, *sqlgraph.CreateSpec) {
	var (
		_node = &MiddlewareDefinition{config: mdc.config}
		_spec = sqlgraph.NewCreateSpec(middlewaredefinition.Table, sqlgraph.NewFieldSpec(middlewaredefinition.FieldID, field.TypeInt64))
	)
	if id, ok := mdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mdc.mutation.Name(); ok {
		_spec.SetField(middlewaredefinition.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mdc.mutation.GetType(); ok {
		_spec.SetField(middlewaredefinition.FieldType, field.TypeInt16, value)
		_node.Type = value
	}
	if value, ok := mdc.mutation.SpanConditions(); ok {
		_spec.SetField(middlewaredefinition.FieldSpanConditions, field.TypeJSON, value)
		_node.SpanConditions = value
	}
	if value, ok := mdc.mutation.IsValid(); ok {
		_spec.SetField(middlewaredefinition.FieldIsValid, field.TypeInt, value)
		_node.IsValid = value
	}
	if value, ok := mdc.mutation.CreateTime(); ok {
		_spec.SetField(middlewaredefinition.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := mdc.mutation.UpdateTime(); ok {
		_spec.SetField(middlewaredefinition.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// MiddlewareDefinitionCreateBulk is the builder for creating many MiddlewareDefinition entities in bulk.
type MiddlewareDefinitionCreateBulk struct {
	config
	err      error
	builders []*MiddlewareDefinitionCreate
}

// Save creates the MiddlewareDefinition entities in the database.
func (mdcb *MiddlewareDefinitionCreateBulk) Save(ctx context.Context) ([]*MiddlewareDefinition, error) {
	if mdcb.err != nil {
		return nil, mdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mdcb.builders))
	nodes := make([]*MiddlewareDefinition, len(mdcb.builders))
	mutators := make([]Mutator, len(mdcb.builders))
	for i := range mdcb.builders {
		func(i int, root context.Context) {
			builder := mdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MiddlewareDefinitionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mdcb *MiddlewareDefinitionCreateBulk) SaveX(ctx context.Context) []*MiddlewareDefinition {
	v, err := mdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mdcb *MiddlewareDefinitionCreateBulk) Exec(ctx context.Context) error {
	_, err := mdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdcb *MiddlewareDefinitionCreateBulk) ExecX(ctx context.Context) {
	if err := mdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
