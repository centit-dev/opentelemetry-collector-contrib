// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/querykey"
)

// QueryKey is the model entity for the QueryKey schema.
type QueryKey struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// SpansValid holds the value of the "spans_valid" field.
	SpansValid bool `json:"spans_valid,omitempty"`
	// MetricsValid holds the value of the "metrics_valid" field.
	MetricsValid bool `json:"metrics_valid,omitempty"`
	// LogsValid holds the value of the "logs_valid" field.
	LogsValid bool `json:"logs_valid,omitempty"`
	// ValidDate holds the value of the "valid_date" field.
	ValidDate time.Time `json:"valid_date,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QueryKeyQuery when eager-loading is set.
	Edges        QueryKeyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// QueryKeyEdges holds the relations/edges for other nodes in the graph.
type QueryKeyEdges struct {
	// Values holds the value of the values edge.
	Values []*QueryValue `json:"values,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ValuesOrErr returns the Values value or an error if the edge
// was not loaded in eager-loading.
func (e QueryKeyEdges) ValuesOrErr() ([]*QueryValue, error) {
	if e.loadedTypes[0] {
		return e.Values, nil
	}
	return nil, &NotLoadedError{edge: "values"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QueryKey) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case querykey.FieldSpansValid, querykey.FieldMetricsValid, querykey.FieldLogsValid:
			values[i] = new(sql.NullBool)
		case querykey.FieldID:
			values[i] = new(sql.NullInt64)
		case querykey.FieldName, querykey.FieldType:
			values[i] = new(sql.NullString)
		case querykey.FieldValidDate, querykey.FieldCreateTime, querykey.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QueryKey fields.
func (qk *QueryKey) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case querykey.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			qk.ID = int64(value.Int64)
		case querykey.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				qk.Name = value.String
			}
		case querykey.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				qk.Type = value.String
			}
		case querykey.FieldSpansValid:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field spans_valid", values[i])
			} else if value.Valid {
				qk.SpansValid = value.Bool
			}
		case querykey.FieldMetricsValid:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field metrics_valid", values[i])
			} else if value.Valid {
				qk.MetricsValid = value.Bool
			}
		case querykey.FieldLogsValid:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field logs_valid", values[i])
			} else if value.Valid {
				qk.LogsValid = value.Bool
			}
		case querykey.FieldValidDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_date", values[i])
			} else if value.Valid {
				qk.ValidDate = value.Time
			}
		case querykey.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				qk.CreateTime = value.Time
			}
		case querykey.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				qk.UpdateTime = value.Time
			}
		default:
			qk.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the QueryKey.
// This includes values selected through modifiers, order, etc.
func (qk *QueryKey) Value(name string) (ent.Value, error) {
	return qk.selectValues.Get(name)
}

// QueryValues queries the "values" edge of the QueryKey entity.
func (qk *QueryKey) QueryValues() *QueryValueQuery {
	return NewQueryKeyClient(qk.config).QueryValues(qk)
}

// Update returns a builder for updating this QueryKey.
// Note that you need to call QueryKey.Unwrap() before calling this method if this QueryKey
// was returned from a transaction, and the transaction was committed or rolled back.
func (qk *QueryKey) Update() *QueryKeyUpdateOne {
	return NewQueryKeyClient(qk.config).UpdateOne(qk)
}

// Unwrap unwraps the QueryKey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (qk *QueryKey) Unwrap() *QueryKey {
	_tx, ok := qk.config.driver.(*txDriver)
	if !ok {
		panic("ent: QueryKey is not a transactional entity")
	}
	qk.config.driver = _tx.drv
	return qk
}

// String implements the fmt.Stringer.
func (qk *QueryKey) String() string {
	var builder strings.Builder
	builder.WriteString("QueryKey(")
	builder.WriteString(fmt.Sprintf("id=%v, ", qk.ID))
	builder.WriteString("name=")
	builder.WriteString(qk.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(qk.Type)
	builder.WriteString(", ")
	builder.WriteString("spans_valid=")
	builder.WriteString(fmt.Sprintf("%v", qk.SpansValid))
	builder.WriteString(", ")
	builder.WriteString("metrics_valid=")
	builder.WriteString(fmt.Sprintf("%v", qk.MetricsValid))
	builder.WriteString(", ")
	builder.WriteString("logs_valid=")
	builder.WriteString(fmt.Sprintf("%v", qk.LogsValid))
	builder.WriteString(", ")
	builder.WriteString("valid_date=")
	builder.WriteString(qk.ValidDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(qk.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(qk.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// QueryKeys is a parsable slice of QueryKey.
type QueryKeys []*QueryKey
