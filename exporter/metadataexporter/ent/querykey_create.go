// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/querykey"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/queryvalue"
)

// QueryKeyCreate is the builder for creating a QueryKey entity.
type QueryKeyCreate struct {
	config
	mutation *QueryKeyMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (qkc *QueryKeyCreate) SetName(s string) *QueryKeyCreate {
	qkc.mutation.SetName(s)
	return qkc
}

// SetType sets the "type" field.
func (qkc *QueryKeyCreate) SetType(s string) *QueryKeyCreate {
	qkc.mutation.SetType(s)
	return qkc
}

// SetSource sets the "source" field.
func (qkc *QueryKeyCreate) SetSource(s string) *QueryKeyCreate {
	qkc.mutation.SetSource(s)
	return qkc
}

// SetValidDate sets the "valid_date" field.
func (qkc *QueryKeyCreate) SetValidDate(t time.Time) *QueryKeyCreate {
	qkc.mutation.SetValidDate(t)
	return qkc
}

// SetCreateTime sets the "create_time" field.
func (qkc *QueryKeyCreate) SetCreateTime(t time.Time) *QueryKeyCreate {
	qkc.mutation.SetCreateTime(t)
	return qkc
}

// SetUpdateTime sets the "update_time" field.
func (qkc *QueryKeyCreate) SetUpdateTime(t time.Time) *QueryKeyCreate {
	qkc.mutation.SetUpdateTime(t)
	return qkc
}

// SetID sets the "id" field.
func (qkc *QueryKeyCreate) SetID(i int64) *QueryKeyCreate {
	qkc.mutation.SetID(i)
	return qkc
}

// AddValueIDs adds the "values" edge to the QueryValue entity by IDs.
func (qkc *QueryKeyCreate) AddValueIDs(ids ...int64) *QueryKeyCreate {
	qkc.mutation.AddValueIDs(ids...)
	return qkc
}

// AddValues adds the "values" edges to the QueryValue entity.
func (qkc *QueryKeyCreate) AddValues(q ...*QueryValue) *QueryKeyCreate {
	ids := make([]int64, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qkc.AddValueIDs(ids...)
}

// Mutation returns the QueryKeyMutation object of the builder.
func (qkc *QueryKeyCreate) Mutation() *QueryKeyMutation {
	return qkc.mutation
}

// Save creates the QueryKey in the database.
func (qkc *QueryKeyCreate) Save(ctx context.Context) (*QueryKey, error) {
	return withHooks(ctx, qkc.sqlSave, qkc.mutation, qkc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qkc *QueryKeyCreate) SaveX(ctx context.Context) *QueryKey {
	v, err := qkc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qkc *QueryKeyCreate) Exec(ctx context.Context) error {
	_, err := qkc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qkc *QueryKeyCreate) ExecX(ctx context.Context) {
	if err := qkc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qkc *QueryKeyCreate) check() error {
	if _, ok := qkc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "QueryKey.name"`)}
	}
	if _, ok := qkc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "QueryKey.type"`)}
	}
	if _, ok := qkc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "QueryKey.source"`)}
	}
	if _, ok := qkc.mutation.ValidDate(); !ok {
		return &ValidationError{Name: "valid_date", err: errors.New(`ent: missing required field "QueryKey.valid_date"`)}
	}
	if _, ok := qkc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "QueryKey.create_time"`)}
	}
	if _, ok := qkc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "QueryKey.update_time"`)}
	}
	return nil
}

func (qkc *QueryKeyCreate) sqlSave(ctx context.Context) (*QueryKey, error) {
	if err := qkc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qkc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qkc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	qkc.mutation.id = &_node.ID
	qkc.mutation.done = true
	return _node, nil
}

func (qkc *QueryKeyCreate) createSpec() (*QueryKey, *sqlgraph.CreateSpec) {
	var (
		_node = &QueryKey{config: qkc.config}
		_spec = sqlgraph.NewCreateSpec(querykey.Table, sqlgraph.NewFieldSpec(querykey.FieldID, field.TypeInt64))
	)
	if id, ok := qkc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := qkc.mutation.Name(); ok {
		_spec.SetField(querykey.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := qkc.mutation.GetType(); ok {
		_spec.SetField(querykey.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := qkc.mutation.Source(); ok {
		_spec.SetField(querykey.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := qkc.mutation.ValidDate(); ok {
		_spec.SetField(querykey.FieldValidDate, field.TypeTime, value)
		_node.ValidDate = value
	}
	if value, ok := qkc.mutation.CreateTime(); ok {
		_spec.SetField(querykey.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := qkc.mutation.UpdateTime(); ok {
		_spec.SetField(querykey.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := qkc.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   querykey.ValuesTable,
			Columns: []string{querykey.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queryvalue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QueryKeyCreateBulk is the builder for creating many QueryKey entities in bulk.
type QueryKeyCreateBulk struct {
	config
	err      error
	builders []*QueryKeyCreate
}

// Save creates the QueryKey entities in the database.
func (qkcb *QueryKeyCreateBulk) Save(ctx context.Context) ([]*QueryKey, error) {
	if qkcb.err != nil {
		return nil, qkcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qkcb.builders))
	nodes := make([]*QueryKey, len(qkcb.builders))
	mutators := make([]Mutator, len(qkcb.builders))
	for i := range qkcb.builders {
		func(i int, root context.Context) {
			builder := qkcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QueryKeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qkcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qkcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qkcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qkcb *QueryKeyCreateBulk) SaveX(ctx context.Context) []*QueryKey {
	v, err := qkcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qkcb *QueryKeyCreateBulk) Exec(ctx context.Context) error {
	_, err := qkcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qkcb *QueryKeyCreateBulk) ExecX(ctx context.Context) {
	if err := qkcb.Exec(ctx); err != nil {
		panic(err)
	}
}
