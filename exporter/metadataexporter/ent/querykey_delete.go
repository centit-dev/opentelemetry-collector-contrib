// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/predicate"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/querykey"
)

// QueryKeyDelete is the builder for deleting a QueryKey entity.
type QueryKeyDelete struct {
	config
	hooks    []Hook
	mutation *QueryKeyMutation
}

// Where appends a list predicates to the QueryKeyDelete builder.
func (qkd *QueryKeyDelete) Where(ps ...predicate.QueryKey) *QueryKeyDelete {
	qkd.mutation.Where(ps...)
	return qkd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (qkd *QueryKeyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, qkd.sqlExec, qkd.mutation, qkd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (qkd *QueryKeyDelete) ExecX(ctx context.Context) int {
	n, err := qkd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (qkd *QueryKeyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(querykey.Table, sqlgraph.NewFieldSpec(querykey.FieldID, field.TypeInt64))
	if ps := qkd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, qkd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	qkd.mutation.done = true
	return affected, err
}

// QueryKeyDeleteOne is the builder for deleting a single QueryKey entity.
type QueryKeyDeleteOne struct {
	qkd *QueryKeyDelete
}

// Where appends a list predicates to the QueryKeyDelete builder.
func (qkdo *QueryKeyDeleteOne) Where(ps ...predicate.QueryKey) *QueryKeyDeleteOne {
	qkdo.qkd.mutation.Where(ps...)
	return qkdo
}

// Exec executes the deletion query.
func (qkdo *QueryKeyDeleteOne) Exec(ctx context.Context) error {
	n, err := qkdo.qkd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{querykey.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (qkdo *QueryKeyDeleteOne) ExecX(ctx context.Context) {
	if err := qkdo.Exec(ctx); err != nil {
		panic(err)
	}
}
