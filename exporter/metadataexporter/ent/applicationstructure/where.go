// Code generated by ent, DO NOT EDIT.

package applicationstructure

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldContainsFold(FieldID, id))
}

// ParentCode applies equality check predicate on the "parentCode" field. It's identical to ParentCodeEQ.
func ParentCode(v string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldEQ(FieldParentCode, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldEQ(FieldLevel, v))
}

// ValidDate applies equality check predicate on the "valid_date" field. It's identical to ValidDateEQ.
func ValidDate(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldEQ(FieldValidDate, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldEQ(FieldUpdateTime, v))
}

// ParentCodeEQ applies the EQ predicate on the "parentCode" field.
func ParentCodeEQ(v string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldEQ(FieldParentCode, v))
}

// ParentCodeNEQ applies the NEQ predicate on the "parentCode" field.
func ParentCodeNEQ(v string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldNEQ(FieldParentCode, v))
}

// ParentCodeIn applies the In predicate on the "parentCode" field.
func ParentCodeIn(vs ...string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldIn(FieldParentCode, vs...))
}

// ParentCodeNotIn applies the NotIn predicate on the "parentCode" field.
func ParentCodeNotIn(vs ...string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldNotIn(FieldParentCode, vs...))
}

// ParentCodeGT applies the GT predicate on the "parentCode" field.
func ParentCodeGT(v string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldGT(FieldParentCode, v))
}

// ParentCodeGTE applies the GTE predicate on the "parentCode" field.
func ParentCodeGTE(v string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldGTE(FieldParentCode, v))
}

// ParentCodeLT applies the LT predicate on the "parentCode" field.
func ParentCodeLT(v string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldLT(FieldParentCode, v))
}

// ParentCodeLTE applies the LTE predicate on the "parentCode" field.
func ParentCodeLTE(v string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldLTE(FieldParentCode, v))
}

// ParentCodeContains applies the Contains predicate on the "parentCode" field.
func ParentCodeContains(v string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldContains(FieldParentCode, v))
}

// ParentCodeHasPrefix applies the HasPrefix predicate on the "parentCode" field.
func ParentCodeHasPrefix(v string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldHasPrefix(FieldParentCode, v))
}

// ParentCodeHasSuffix applies the HasSuffix predicate on the "parentCode" field.
func ParentCodeHasSuffix(v string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldHasSuffix(FieldParentCode, v))
}

// ParentCodeEqualFold applies the EqualFold predicate on the "parentCode" field.
func ParentCodeEqualFold(v string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldEqualFold(FieldParentCode, v))
}

// ParentCodeContainsFold applies the ContainsFold predicate on the "parentCode" field.
func ParentCodeContainsFold(v string) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldContainsFold(FieldParentCode, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldLTE(FieldLevel, v))
}

// ValidDateEQ applies the EQ predicate on the "valid_date" field.
func ValidDateEQ(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldEQ(FieldValidDate, v))
}

// ValidDateNEQ applies the NEQ predicate on the "valid_date" field.
func ValidDateNEQ(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldNEQ(FieldValidDate, v))
}

// ValidDateIn applies the In predicate on the "valid_date" field.
func ValidDateIn(vs ...time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldIn(FieldValidDate, vs...))
}

// ValidDateNotIn applies the NotIn predicate on the "valid_date" field.
func ValidDateNotIn(vs ...time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldNotIn(FieldValidDate, vs...))
}

// ValidDateGT applies the GT predicate on the "valid_date" field.
func ValidDateGT(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldGT(FieldValidDate, v))
}

// ValidDateGTE applies the GTE predicate on the "valid_date" field.
func ValidDateGTE(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldGTE(FieldValidDate, v))
}

// ValidDateLT applies the LT predicate on the "valid_date" field.
func ValidDateLT(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldLT(FieldValidDate, v))
}

// ValidDateLTE applies the LTE predicate on the "valid_date" field.
func ValidDateLTE(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldLTE(FieldValidDate, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ApplicationStructure) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ApplicationStructure) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ApplicationStructure) predicate.ApplicationStructure {
	return predicate.ApplicationStructure(sql.NotPredicates(p))
}
