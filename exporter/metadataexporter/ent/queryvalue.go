// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/querykey"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/queryvalue"
)

// QueryValue is the model entity for the QueryValue schema.
type QueryValue struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// KeyID holds the value of the "key_id" field.
	KeyID int64 `json:"key_id,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// ValidDate holds the value of the "valid_date" field.
	ValidDate time.Time `json:"valid_date,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QueryValueQuery when eager-loading is set.
	Edges        QueryValueEdges `json:"edges"`
	selectValues sql.SelectValues
}

// QueryValueEdges holds the relations/edges for other nodes in the graph.
type QueryValueEdges struct {
	// Key holds the value of the key edge.
	Key *QueryKey `json:"key,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// KeyOrErr returns the Key value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QueryValueEdges) KeyOrErr() (*QueryKey, error) {
	if e.loadedTypes[0] {
		if e.Key == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: querykey.Label}
		}
		return e.Key, nil
	}
	return nil, &NotLoadedError{edge: "key"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QueryValue) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case queryvalue.FieldID, queryvalue.FieldKeyID:
			values[i] = new(sql.NullInt64)
		case queryvalue.FieldValue:
			values[i] = new(sql.NullString)
		case queryvalue.FieldValidDate, queryvalue.FieldCreateTime, queryvalue.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QueryValue fields.
func (qv *QueryValue) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case queryvalue.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			qv.ID = int64(value.Int64)
		case queryvalue.FieldKeyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field key_id", values[i])
			} else if value.Valid {
				qv.KeyID = value.Int64
			}
		case queryvalue.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				qv.Value = value.String
			}
		case queryvalue.FieldValidDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_date", values[i])
			} else if value.Valid {
				qv.ValidDate = value.Time
			}
		case queryvalue.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				qv.CreateTime = value.Time
			}
		case queryvalue.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				qv.UpdateTime = value.Time
			}
		default:
			qv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the QueryValue.
// This includes values selected through modifiers, order, etc.
func (qv *QueryValue) GetValue(name string) (ent.Value, error) {
	return qv.selectValues.Get(name)
}

// QueryKey queries the "key" edge of the QueryValue entity.
func (qv *QueryValue) QueryKey() *QueryKeyQuery {
	return NewQueryValueClient(qv.config).QueryKey(qv)
}

// Update returns a builder for updating this QueryValue.
// Note that you need to call QueryValue.Unwrap() before calling this method if this QueryValue
// was returned from a transaction, and the transaction was committed or rolled back.
func (qv *QueryValue) Update() *QueryValueUpdateOne {
	return NewQueryValueClient(qv.config).UpdateOne(qv)
}

// Unwrap unwraps the QueryValue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (qv *QueryValue) Unwrap() *QueryValue {
	_tx, ok := qv.config.driver.(*txDriver)
	if !ok {
		panic("ent: QueryValue is not a transactional entity")
	}
	qv.config.driver = _tx.drv
	return qv
}

// String implements the fmt.Stringer.
func (qv *QueryValue) String() string {
	var builder strings.Builder
	builder.WriteString("QueryValue(")
	builder.WriteString(fmt.Sprintf("id=%v, ", qv.ID))
	builder.WriteString("key_id=")
	builder.WriteString(fmt.Sprintf("%v", qv.KeyID))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(qv.Value)
	builder.WriteString(", ")
	builder.WriteString("valid_date=")
	builder.WriteString(qv.ValidDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(qv.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(qv.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// QueryValues is a parsable slice of QueryValue.
type QueryValues []*QueryValue
