// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/predicate"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/queryvalue"
)

// QueryValueDelete is the builder for deleting a QueryValue entity.
type QueryValueDelete struct {
	config
	hooks    []Hook
	mutation *QueryValueMutation
}

// Where appends a list predicates to the QueryValueDelete builder.
func (qvd *QueryValueDelete) Where(ps ...predicate.QueryValue) *QueryValueDelete {
	qvd.mutation.Where(ps...)
	return qvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (qvd *QueryValueDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, qvd.sqlExec, qvd.mutation, qvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (qvd *QueryValueDelete) ExecX(ctx context.Context) int {
	n, err := qvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (qvd *QueryValueDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(queryvalue.Table, sqlgraph.NewFieldSpec(queryvalue.FieldID, field.TypeInt64))
	if ps := qvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, qvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	qvd.mutation.done = true
	return affected, err
}

// QueryValueDeleteOne is the builder for deleting a single QueryValue entity.
type QueryValueDeleteOne struct {
	qvd *QueryValueDelete
}

// Where appends a list predicates to the QueryValueDelete builder.
func (qvdo *QueryValueDeleteOne) Where(ps ...predicate.QueryValue) *QueryValueDeleteOne {
	qvdo.qvd.mutation.Where(ps...)
	return qvdo
}

// Exec executes the deletion query.
func (qvdo *QueryValueDeleteOne) Exec(ctx context.Context) error {
	n, err := qvdo.qvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{queryvalue.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (qvdo *QueryValueDeleteOne) ExecX(ctx context.Context) {
	if err := qvdo.Exec(ctx); err != nil {
		panic(err)
	}
}
