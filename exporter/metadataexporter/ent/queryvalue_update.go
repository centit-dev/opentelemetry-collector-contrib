// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/predicate"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/querykey"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/queryvalue"
)

// QueryValueUpdate is the builder for updating QueryValue entities.
type QueryValueUpdate struct {
	config
	hooks    []Hook
	mutation *QueryValueMutation
}

// Where appends a list predicates to the QueryValueUpdate builder.
func (qvu *QueryValueUpdate) Where(ps ...predicate.QueryValue) *QueryValueUpdate {
	qvu.mutation.Where(ps...)
	return qvu
}

// SetKeyID sets the "key_id" field.
func (qvu *QueryValueUpdate) SetKeyID(i int64) *QueryValueUpdate {
	qvu.mutation.SetKeyID(i)
	return qvu
}

// SetNillableKeyID sets the "key_id" field if the given value is not nil.
func (qvu *QueryValueUpdate) SetNillableKeyID(i *int64) *QueryValueUpdate {
	if i != nil {
		qvu.SetKeyID(*i)
	}
	return qvu
}

// SetValue sets the "value" field.
func (qvu *QueryValueUpdate) SetValue(s string) *QueryValueUpdate {
	qvu.mutation.SetValue(s)
	return qvu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (qvu *QueryValueUpdate) SetNillableValue(s *string) *QueryValueUpdate {
	if s != nil {
		qvu.SetValue(*s)
	}
	return qvu
}

// SetValidDate sets the "valid_date" field.
func (qvu *QueryValueUpdate) SetValidDate(t time.Time) *QueryValueUpdate {
	qvu.mutation.SetValidDate(t)
	return qvu
}

// SetNillableValidDate sets the "valid_date" field if the given value is not nil.
func (qvu *QueryValueUpdate) SetNillableValidDate(t *time.Time) *QueryValueUpdate {
	if t != nil {
		qvu.SetValidDate(*t)
	}
	return qvu
}

// SetCreateTime sets the "create_time" field.
func (qvu *QueryValueUpdate) SetCreateTime(t time.Time) *QueryValueUpdate {
	qvu.mutation.SetCreateTime(t)
	return qvu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (qvu *QueryValueUpdate) SetNillableCreateTime(t *time.Time) *QueryValueUpdate {
	if t != nil {
		qvu.SetCreateTime(*t)
	}
	return qvu
}

// SetUpdateTime sets the "update_time" field.
func (qvu *QueryValueUpdate) SetUpdateTime(t time.Time) *QueryValueUpdate {
	qvu.mutation.SetUpdateTime(t)
	return qvu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (qvu *QueryValueUpdate) SetNillableUpdateTime(t *time.Time) *QueryValueUpdate {
	if t != nil {
		qvu.SetUpdateTime(*t)
	}
	return qvu
}

// SetKey sets the "key" edge to the QueryKey entity.
func (qvu *QueryValueUpdate) SetKey(q *QueryKey) *QueryValueUpdate {
	return qvu.SetKeyID(q.ID)
}

// Mutation returns the QueryValueMutation object of the builder.
func (qvu *QueryValueUpdate) Mutation() *QueryValueMutation {
	return qvu.mutation
}

// ClearKey clears the "key" edge to the QueryKey entity.
func (qvu *QueryValueUpdate) ClearKey() *QueryValueUpdate {
	qvu.mutation.ClearKey()
	return qvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qvu *QueryValueUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qvu.sqlSave, qvu.mutation, qvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qvu *QueryValueUpdate) SaveX(ctx context.Context) int {
	affected, err := qvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qvu *QueryValueUpdate) Exec(ctx context.Context) error {
	_, err := qvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qvu *QueryValueUpdate) ExecX(ctx context.Context) {
	if err := qvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qvu *QueryValueUpdate) check() error {
	if _, ok := qvu.mutation.KeyID(); qvu.mutation.KeyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "QueryValue.key"`)
	}
	return nil
}

func (qvu *QueryValueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(queryvalue.Table, queryvalue.Columns, sqlgraph.NewFieldSpec(queryvalue.FieldID, field.TypeInt64))
	if ps := qvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qvu.mutation.Value(); ok {
		_spec.SetField(queryvalue.FieldValue, field.TypeString, value)
	}
	if value, ok := qvu.mutation.ValidDate(); ok {
		_spec.SetField(queryvalue.FieldValidDate, field.TypeTime, value)
	}
	if value, ok := qvu.mutation.CreateTime(); ok {
		_spec.SetField(queryvalue.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := qvu.mutation.UpdateTime(); ok {
		_spec.SetField(queryvalue.FieldUpdateTime, field.TypeTime, value)
	}
	if qvu.mutation.KeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queryvalue.KeyTable,
			Columns: []string{queryvalue.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(querykey.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qvu.mutation.KeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queryvalue.KeyTable,
			Columns: []string{queryvalue.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(querykey.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{queryvalue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qvu.mutation.done = true
	return n, nil
}

// QueryValueUpdateOne is the builder for updating a single QueryValue entity.
type QueryValueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QueryValueMutation
}

// SetKeyID sets the "key_id" field.
func (qvuo *QueryValueUpdateOne) SetKeyID(i int64) *QueryValueUpdateOne {
	qvuo.mutation.SetKeyID(i)
	return qvuo
}

// SetNillableKeyID sets the "key_id" field if the given value is not nil.
func (qvuo *QueryValueUpdateOne) SetNillableKeyID(i *int64) *QueryValueUpdateOne {
	if i != nil {
		qvuo.SetKeyID(*i)
	}
	return qvuo
}

// SetValue sets the "value" field.
func (qvuo *QueryValueUpdateOne) SetValue(s string) *QueryValueUpdateOne {
	qvuo.mutation.SetValue(s)
	return qvuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (qvuo *QueryValueUpdateOne) SetNillableValue(s *string) *QueryValueUpdateOne {
	if s != nil {
		qvuo.SetValue(*s)
	}
	return qvuo
}

// SetValidDate sets the "valid_date" field.
func (qvuo *QueryValueUpdateOne) SetValidDate(t time.Time) *QueryValueUpdateOne {
	qvuo.mutation.SetValidDate(t)
	return qvuo
}

// SetNillableValidDate sets the "valid_date" field if the given value is not nil.
func (qvuo *QueryValueUpdateOne) SetNillableValidDate(t *time.Time) *QueryValueUpdateOne {
	if t != nil {
		qvuo.SetValidDate(*t)
	}
	return qvuo
}

// SetCreateTime sets the "create_time" field.
func (qvuo *QueryValueUpdateOne) SetCreateTime(t time.Time) *QueryValueUpdateOne {
	qvuo.mutation.SetCreateTime(t)
	return qvuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (qvuo *QueryValueUpdateOne) SetNillableCreateTime(t *time.Time) *QueryValueUpdateOne {
	if t != nil {
		qvuo.SetCreateTime(*t)
	}
	return qvuo
}

// SetUpdateTime sets the "update_time" field.
func (qvuo *QueryValueUpdateOne) SetUpdateTime(t time.Time) *QueryValueUpdateOne {
	qvuo.mutation.SetUpdateTime(t)
	return qvuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (qvuo *QueryValueUpdateOne) SetNillableUpdateTime(t *time.Time) *QueryValueUpdateOne {
	if t != nil {
		qvuo.SetUpdateTime(*t)
	}
	return qvuo
}

// SetKey sets the "key" edge to the QueryKey entity.
func (qvuo *QueryValueUpdateOne) SetKey(q *QueryKey) *QueryValueUpdateOne {
	return qvuo.SetKeyID(q.ID)
}

// Mutation returns the QueryValueMutation object of the builder.
func (qvuo *QueryValueUpdateOne) Mutation() *QueryValueMutation {
	return qvuo.mutation
}

// ClearKey clears the "key" edge to the QueryKey entity.
func (qvuo *QueryValueUpdateOne) ClearKey() *QueryValueUpdateOne {
	qvuo.mutation.ClearKey()
	return qvuo
}

// Where appends a list predicates to the QueryValueUpdate builder.
func (qvuo *QueryValueUpdateOne) Where(ps ...predicate.QueryValue) *QueryValueUpdateOne {
	qvuo.mutation.Where(ps...)
	return qvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qvuo *QueryValueUpdateOne) Select(field string, fields ...string) *QueryValueUpdateOne {
	qvuo.fields = append([]string{field}, fields...)
	return qvuo
}

// Save executes the query and returns the updated QueryValue entity.
func (qvuo *QueryValueUpdateOne) Save(ctx context.Context) (*QueryValue, error) {
	return withHooks(ctx, qvuo.sqlSave, qvuo.mutation, qvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qvuo *QueryValueUpdateOne) SaveX(ctx context.Context) *QueryValue {
	node, err := qvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qvuo *QueryValueUpdateOne) Exec(ctx context.Context) error {
	_, err := qvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qvuo *QueryValueUpdateOne) ExecX(ctx context.Context) {
	if err := qvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qvuo *QueryValueUpdateOne) check() error {
	if _, ok := qvuo.mutation.KeyID(); qvuo.mutation.KeyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "QueryValue.key"`)
	}
	return nil
}

func (qvuo *QueryValueUpdateOne) sqlSave(ctx context.Context) (_node *QueryValue, err error) {
	if err := qvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(queryvalue.Table, queryvalue.Columns, sqlgraph.NewFieldSpec(queryvalue.FieldID, field.TypeInt64))
	id, ok := qvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QueryValue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, queryvalue.FieldID)
		for _, f := range fields {
			if !queryvalue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != queryvalue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qvuo.mutation.Value(); ok {
		_spec.SetField(queryvalue.FieldValue, field.TypeString, value)
	}
	if value, ok := qvuo.mutation.ValidDate(); ok {
		_spec.SetField(queryvalue.FieldValidDate, field.TypeTime, value)
	}
	if value, ok := qvuo.mutation.CreateTime(); ok {
		_spec.SetField(queryvalue.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := qvuo.mutation.UpdateTime(); ok {
		_spec.SetField(queryvalue.FieldUpdateTime, field.TypeTime, value)
	}
	if qvuo.mutation.KeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queryvalue.KeyTable,
			Columns: []string{queryvalue.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(querykey.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qvuo.mutation.KeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queryvalue.KeyTable,
			Columns: []string{queryvalue.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(querykey.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &QueryValue{config: qvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{queryvalue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	qvuo.mutation.done = true
	return _node, nil
}
