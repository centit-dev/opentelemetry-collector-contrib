// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/applicationstructure"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/predicate"
)

// ApplicationStructureUpdate is the builder for updating ApplicationStructure entities.
type ApplicationStructureUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicationStructureMutation
}

// Where appends a list predicates to the ApplicationStructureUpdate builder.
func (asu *ApplicationStructureUpdate) Where(ps ...predicate.ApplicationStructure) *ApplicationStructureUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetParentCode sets the "parentCode" field.
func (asu *ApplicationStructureUpdate) SetParentCode(s string) *ApplicationStructureUpdate {
	asu.mutation.SetParentCode(s)
	return asu
}

// SetNillableParentCode sets the "parentCode" field if the given value is not nil.
func (asu *ApplicationStructureUpdate) SetNillableParentCode(s *string) *ApplicationStructureUpdate {
	if s != nil {
		asu.SetParentCode(*s)
	}
	return asu
}

// SetLevel sets the "level" field.
func (asu *ApplicationStructureUpdate) SetLevel(i int) *ApplicationStructureUpdate {
	asu.mutation.ResetLevel()
	asu.mutation.SetLevel(i)
	return asu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (asu *ApplicationStructureUpdate) SetNillableLevel(i *int) *ApplicationStructureUpdate {
	if i != nil {
		asu.SetLevel(*i)
	}
	return asu
}

// AddLevel adds i to the "level" field.
func (asu *ApplicationStructureUpdate) AddLevel(i int) *ApplicationStructureUpdate {
	asu.mutation.AddLevel(i)
	return asu
}

// SetValidDate sets the "valid_date" field.
func (asu *ApplicationStructureUpdate) SetValidDate(t time.Time) *ApplicationStructureUpdate {
	asu.mutation.SetValidDate(t)
	return asu
}

// SetNillableValidDate sets the "valid_date" field if the given value is not nil.
func (asu *ApplicationStructureUpdate) SetNillableValidDate(t *time.Time) *ApplicationStructureUpdate {
	if t != nil {
		asu.SetValidDate(*t)
	}
	return asu
}

// SetCreateTime sets the "create_time" field.
func (asu *ApplicationStructureUpdate) SetCreateTime(t time.Time) *ApplicationStructureUpdate {
	asu.mutation.SetCreateTime(t)
	return asu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (asu *ApplicationStructureUpdate) SetNillableCreateTime(t *time.Time) *ApplicationStructureUpdate {
	if t != nil {
		asu.SetCreateTime(*t)
	}
	return asu
}

// SetUpdateTime sets the "update_time" field.
func (asu *ApplicationStructureUpdate) SetUpdateTime(t time.Time) *ApplicationStructureUpdate {
	asu.mutation.SetUpdateTime(t)
	return asu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (asu *ApplicationStructureUpdate) SetNillableUpdateTime(t *time.Time) *ApplicationStructureUpdate {
	if t != nil {
		asu.SetUpdateTime(*t)
	}
	return asu
}

// Mutation returns the ApplicationStructureMutation object of the builder.
func (asu *ApplicationStructureUpdate) Mutation() *ApplicationStructureMutation {
	return asu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *ApplicationStructureUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *ApplicationStructureUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *ApplicationStructureUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *ApplicationStructureUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asu *ApplicationStructureUpdate) check() error {
	if v, ok := asu.mutation.ParentCode(); ok {
		if err := applicationstructure.ParentCodeValidator(v); err != nil {
			return &ValidationError{Name: "parentCode", err: fmt.Errorf(`ent: validator failed for field "ApplicationStructure.parentCode": %w`, err)}
		}
	}
	return nil
}

func (asu *ApplicationStructureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := asu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(applicationstructure.Table, applicationstructure.Columns, sqlgraph.NewFieldSpec(applicationstructure.FieldID, field.TypeString))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.ParentCode(); ok {
		_spec.SetField(applicationstructure.FieldParentCode, field.TypeString, value)
	}
	if value, ok := asu.mutation.Level(); ok {
		_spec.SetField(applicationstructure.FieldLevel, field.TypeInt, value)
	}
	if value, ok := asu.mutation.AddedLevel(); ok {
		_spec.AddField(applicationstructure.FieldLevel, field.TypeInt, value)
	}
	if value, ok := asu.mutation.ValidDate(); ok {
		_spec.SetField(applicationstructure.FieldValidDate, field.TypeTime, value)
	}
	if value, ok := asu.mutation.CreateTime(); ok {
		_spec.SetField(applicationstructure.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := asu.mutation.UpdateTime(); ok {
		_spec.SetField(applicationstructure.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicationstructure.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// ApplicationStructureUpdateOne is the builder for updating a single ApplicationStructure entity.
type ApplicationStructureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplicationStructureMutation
}

// SetParentCode sets the "parentCode" field.
func (asuo *ApplicationStructureUpdateOne) SetParentCode(s string) *ApplicationStructureUpdateOne {
	asuo.mutation.SetParentCode(s)
	return asuo
}

// SetNillableParentCode sets the "parentCode" field if the given value is not nil.
func (asuo *ApplicationStructureUpdateOne) SetNillableParentCode(s *string) *ApplicationStructureUpdateOne {
	if s != nil {
		asuo.SetParentCode(*s)
	}
	return asuo
}

// SetLevel sets the "level" field.
func (asuo *ApplicationStructureUpdateOne) SetLevel(i int) *ApplicationStructureUpdateOne {
	asuo.mutation.ResetLevel()
	asuo.mutation.SetLevel(i)
	return asuo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (asuo *ApplicationStructureUpdateOne) SetNillableLevel(i *int) *ApplicationStructureUpdateOne {
	if i != nil {
		asuo.SetLevel(*i)
	}
	return asuo
}

// AddLevel adds i to the "level" field.
func (asuo *ApplicationStructureUpdateOne) AddLevel(i int) *ApplicationStructureUpdateOne {
	asuo.mutation.AddLevel(i)
	return asuo
}

// SetValidDate sets the "valid_date" field.
func (asuo *ApplicationStructureUpdateOne) SetValidDate(t time.Time) *ApplicationStructureUpdateOne {
	asuo.mutation.SetValidDate(t)
	return asuo
}

// SetNillableValidDate sets the "valid_date" field if the given value is not nil.
func (asuo *ApplicationStructureUpdateOne) SetNillableValidDate(t *time.Time) *ApplicationStructureUpdateOne {
	if t != nil {
		asuo.SetValidDate(*t)
	}
	return asuo
}

// SetCreateTime sets the "create_time" field.
func (asuo *ApplicationStructureUpdateOne) SetCreateTime(t time.Time) *ApplicationStructureUpdateOne {
	asuo.mutation.SetCreateTime(t)
	return asuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (asuo *ApplicationStructureUpdateOne) SetNillableCreateTime(t *time.Time) *ApplicationStructureUpdateOne {
	if t != nil {
		asuo.SetCreateTime(*t)
	}
	return asuo
}

// SetUpdateTime sets the "update_time" field.
func (asuo *ApplicationStructureUpdateOne) SetUpdateTime(t time.Time) *ApplicationStructureUpdateOne {
	asuo.mutation.SetUpdateTime(t)
	return asuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (asuo *ApplicationStructureUpdateOne) SetNillableUpdateTime(t *time.Time) *ApplicationStructureUpdateOne {
	if t != nil {
		asuo.SetUpdateTime(*t)
	}
	return asuo
}

// Mutation returns the ApplicationStructureMutation object of the builder.
func (asuo *ApplicationStructureUpdateOne) Mutation() *ApplicationStructureMutation {
	return asuo.mutation
}

// Where appends a list predicates to the ApplicationStructureUpdate builder.
func (asuo *ApplicationStructureUpdateOne) Where(ps ...predicate.ApplicationStructure) *ApplicationStructureUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *ApplicationStructureUpdateOne) Select(field string, fields ...string) *ApplicationStructureUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated ApplicationStructure entity.
func (asuo *ApplicationStructureUpdateOne) Save(ctx context.Context) (*ApplicationStructure, error) {
	return withHooks(ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *ApplicationStructureUpdateOne) SaveX(ctx context.Context) *ApplicationStructure {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *ApplicationStructureUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *ApplicationStructureUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asuo *ApplicationStructureUpdateOne) check() error {
	if v, ok := asuo.mutation.ParentCode(); ok {
		if err := applicationstructure.ParentCodeValidator(v); err != nil {
			return &ValidationError{Name: "parentCode", err: fmt.Errorf(`ent: validator failed for field "ApplicationStructure.parentCode": %w`, err)}
		}
	}
	return nil
}

func (asuo *ApplicationStructureUpdateOne) sqlSave(ctx context.Context) (_node *ApplicationStructure, err error) {
	if err := asuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(applicationstructure.Table, applicationstructure.Columns, sqlgraph.NewFieldSpec(applicationstructure.FieldID, field.TypeString))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApplicationStructure.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, applicationstructure.FieldID)
		for _, f := range fields {
			if !applicationstructure.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != applicationstructure.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.ParentCode(); ok {
		_spec.SetField(applicationstructure.FieldParentCode, field.TypeString, value)
	}
	if value, ok := asuo.mutation.Level(); ok {
		_spec.SetField(applicationstructure.FieldLevel, field.TypeInt, value)
	}
	if value, ok := asuo.mutation.AddedLevel(); ok {
		_spec.AddField(applicationstructure.FieldLevel, field.TypeInt, value)
	}
	if value, ok := asuo.mutation.ValidDate(); ok {
		_spec.SetField(applicationstructure.FieldValidDate, field.TypeTime, value)
	}
	if value, ok := asuo.mutation.CreateTime(); ok {
		_spec.SetField(applicationstructure.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := asuo.mutation.UpdateTime(); ok {
		_spec.SetField(applicationstructure.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &ApplicationStructure{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicationstructure.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}
