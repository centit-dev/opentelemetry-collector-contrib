// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/systemparameter"
)

// SystemParameter is the model entity for the SystemParameter schema.
type SystemParameter struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value []string `json:"value,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemParameter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemparameter.FieldValue:
			values[i] = new([]byte)
		case systemparameter.FieldID:
			values[i] = new(sql.NullString)
		case systemparameter.FieldCreateTime, systemparameter.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemParameter fields.
func (sp *SystemParameter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemparameter.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sp.ID = value.String
			}
		case systemparameter.FieldValue:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sp.Value); err != nil {
					return fmt.Errorf("unmarshal field value: %w", err)
				}
			}
		case systemparameter.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sp.CreateTime = value.Time
			}
		case systemparameter.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sp.UpdateTime = value.Time
			}
		default:
			sp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the SystemParameter.
// This includes values selected through modifiers, order, etc.
func (sp *SystemParameter) GetValue(name string) (ent.Value, error) {
	return sp.selectValues.Get(name)
}

// Update returns a builder for updating this SystemParameter.
// Note that you need to call SystemParameter.Unwrap() before calling this method if this SystemParameter
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *SystemParameter) Update() *SystemParameterUpdateOne {
	return NewSystemParameterClient(sp.config).UpdateOne(sp)
}

// Unwrap unwraps the SystemParameter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *SystemParameter) Unwrap() *SystemParameter {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemParameter is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *SystemParameter) String() string {
	var builder strings.Builder
	builder.WriteString("SystemParameter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", sp.Value))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(sp.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(sp.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SystemParameters is a parsable slice of SystemParameter.
type SystemParameters []*SystemParameter
