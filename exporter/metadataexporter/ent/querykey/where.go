// Code generated by ent, DO NOT EDIT.

package querykey

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEQ(FieldName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEQ(FieldType, v))
}

// SpansValid applies equality check predicate on the "spans_valid" field. It's identical to SpansValidEQ.
func SpansValid(v bool) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEQ(FieldSpansValid, v))
}

// MetricsValid applies equality check predicate on the "metrics_valid" field. It's identical to MetricsValidEQ.
func MetricsValid(v bool) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEQ(FieldMetricsValid, v))
}

// LogsValid applies equality check predicate on the "logs_valid" field. It's identical to LogsValidEQ.
func LogsValid(v bool) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEQ(FieldLogsValid, v))
}

// ValidDate applies equality check predicate on the "valid_date" field. It's identical to ValidDateEQ.
func ValidDate(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEQ(FieldValidDate, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEQ(FieldUpdateTime, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldContainsFold(FieldType, v))
}

// SpansValidEQ applies the EQ predicate on the "spans_valid" field.
func SpansValidEQ(v bool) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEQ(FieldSpansValid, v))
}

// SpansValidNEQ applies the NEQ predicate on the "spans_valid" field.
func SpansValidNEQ(v bool) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldNEQ(FieldSpansValid, v))
}

// MetricsValidEQ applies the EQ predicate on the "metrics_valid" field.
func MetricsValidEQ(v bool) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEQ(FieldMetricsValid, v))
}

// MetricsValidNEQ applies the NEQ predicate on the "metrics_valid" field.
func MetricsValidNEQ(v bool) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldNEQ(FieldMetricsValid, v))
}

// LogsValidEQ applies the EQ predicate on the "logs_valid" field.
func LogsValidEQ(v bool) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEQ(FieldLogsValid, v))
}

// LogsValidNEQ applies the NEQ predicate on the "logs_valid" field.
func LogsValidNEQ(v bool) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldNEQ(FieldLogsValid, v))
}

// ValidDateEQ applies the EQ predicate on the "valid_date" field.
func ValidDateEQ(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEQ(FieldValidDate, v))
}

// ValidDateNEQ applies the NEQ predicate on the "valid_date" field.
func ValidDateNEQ(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldNEQ(FieldValidDate, v))
}

// ValidDateIn applies the In predicate on the "valid_date" field.
func ValidDateIn(vs ...time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldIn(FieldValidDate, vs...))
}

// ValidDateNotIn applies the NotIn predicate on the "valid_date" field.
func ValidDateNotIn(vs ...time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldNotIn(FieldValidDate, vs...))
}

// ValidDateGT applies the GT predicate on the "valid_date" field.
func ValidDateGT(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldGT(FieldValidDate, v))
}

// ValidDateGTE applies the GTE predicate on the "valid_date" field.
func ValidDateGTE(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldGTE(FieldValidDate, v))
}

// ValidDateLT applies the LT predicate on the "valid_date" field.
func ValidDateLT(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldLT(FieldValidDate, v))
}

// ValidDateLTE applies the LTE predicate on the "valid_date" field.
func ValidDateLTE(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldLTE(FieldValidDate, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.QueryKey {
	return predicate.QueryKey(sql.FieldLTE(FieldUpdateTime, v))
}

// HasValues applies the HasEdge predicate on the "values" edge.
func HasValues() predicate.QueryKey {
	return predicate.QueryKey(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ValuesTable, ValuesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasValuesWith applies the HasEdge predicate on the "values" edge with a given conditions (other predicates).
func HasValuesWith(preds ...predicate.QueryValue) predicate.QueryKey {
	return predicate.QueryKey(func(s *sql.Selector) {
		step := newValuesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.QueryKey) predicate.QueryKey {
	return predicate.QueryKey(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.QueryKey) predicate.QueryKey {
	return predicate.QueryKey(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.QueryKey) predicate.QueryKey {
	return predicate.QueryKey(sql.NotPredicates(p))
}
