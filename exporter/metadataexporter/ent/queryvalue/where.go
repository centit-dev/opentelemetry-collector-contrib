// Code generated by ent, DO NOT EDIT.

package queryvalue

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldLTE(FieldID, id))
}

// KeyID applies equality check predicate on the "key_id" field. It's identical to KeyIDEQ.
func KeyID(v int64) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldEQ(FieldKeyID, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldEQ(FieldValue, v))
}

// ValidDate applies equality check predicate on the "valid_date" field. It's identical to ValidDateEQ.
func ValidDate(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldEQ(FieldValidDate, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldEQ(FieldUpdateTime, v))
}

// KeyIDEQ applies the EQ predicate on the "key_id" field.
func KeyIDEQ(v int64) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldEQ(FieldKeyID, v))
}

// KeyIDNEQ applies the NEQ predicate on the "key_id" field.
func KeyIDNEQ(v int64) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldNEQ(FieldKeyID, v))
}

// KeyIDIn applies the In predicate on the "key_id" field.
func KeyIDIn(vs ...int64) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldIn(FieldKeyID, vs...))
}

// KeyIDNotIn applies the NotIn predicate on the "key_id" field.
func KeyIDNotIn(vs ...int64) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldNotIn(FieldKeyID, vs...))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldContainsFold(FieldValue, v))
}

// ValidDateEQ applies the EQ predicate on the "valid_date" field.
func ValidDateEQ(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldEQ(FieldValidDate, v))
}

// ValidDateNEQ applies the NEQ predicate on the "valid_date" field.
func ValidDateNEQ(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldNEQ(FieldValidDate, v))
}

// ValidDateIn applies the In predicate on the "valid_date" field.
func ValidDateIn(vs ...time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldIn(FieldValidDate, vs...))
}

// ValidDateNotIn applies the NotIn predicate on the "valid_date" field.
func ValidDateNotIn(vs ...time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldNotIn(FieldValidDate, vs...))
}

// ValidDateGT applies the GT predicate on the "valid_date" field.
func ValidDateGT(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldGT(FieldValidDate, v))
}

// ValidDateGTE applies the GTE predicate on the "valid_date" field.
func ValidDateGTE(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldGTE(FieldValidDate, v))
}

// ValidDateLT applies the LT predicate on the "valid_date" field.
func ValidDateLT(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldLT(FieldValidDate, v))
}

// ValidDateLTE applies the LTE predicate on the "valid_date" field.
func ValidDateLTE(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldLTE(FieldValidDate, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.QueryValue {
	return predicate.QueryValue(sql.FieldLTE(FieldUpdateTime, v))
}

// HasKey applies the HasEdge predicate on the "key" edge.
func HasKey() predicate.QueryValue {
	return predicate.QueryValue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, KeyTable, KeyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasKeyWith applies the HasEdge predicate on the "key" edge with a given conditions (other predicates).
func HasKeyWith(preds ...predicate.QueryKey) predicate.QueryValue {
	return predicate.QueryValue(func(s *sql.Selector) {
		step := newKeyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.QueryValue) predicate.QueryValue {
	return predicate.QueryValue(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.QueryValue) predicate.QueryValue {
	return predicate.QueryValue(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.QueryValue) predicate.QueryValue {
	return predicate.QueryValue(sql.NotPredicates(p))
}
