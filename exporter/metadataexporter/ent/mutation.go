// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/predicate"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/querykey"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/queryvalue"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeQueryKey   = "QueryKey"
	TypeQueryValue = "QueryValue"
)

// QueryKeyMutation represents an operation that mutates the QueryKey nodes in the graph.
type QueryKeyMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	_type         *string
	spans_valid   *bool
	metrics_valid *bool
	logs_valid    *bool
	valid_date    *time.Time
	create_time   *time.Time
	update_time   *time.Time
	clearedFields map[string]struct{}
	values        map[int64]struct{}
	removedvalues map[int64]struct{}
	clearedvalues bool
	done          bool
	oldValue      func(context.Context) (*QueryKey, error)
	predicates    []predicate.QueryKey
}

var _ ent.Mutation = (*QueryKeyMutation)(nil)

// querykeyOption allows management of the mutation configuration using functional options.
type querykeyOption func(*QueryKeyMutation)

// newQueryKeyMutation creates new mutation for the QueryKey entity.
func newQueryKeyMutation(c config, op Op, opts ...querykeyOption) *QueryKeyMutation {
	m := &QueryKeyMutation{
		config:        c,
		op:            op,
		typ:           TypeQueryKey,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQueryKeyID sets the ID field of the mutation.
func withQueryKeyID(id int64) querykeyOption {
	return func(m *QueryKeyMutation) {
		var (
			err   error
			once  sync.Once
			value *QueryKey
		)
		m.oldValue = func(ctx context.Context) (*QueryKey, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().QueryKey.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQueryKey sets the old QueryKey of the mutation.
func withQueryKey(node *QueryKey) querykeyOption {
	return func(m *QueryKeyMutation) {
		m.oldValue = func(context.Context) (*QueryKey, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QueryKeyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QueryKeyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of QueryKey entities.
func (m *QueryKeyMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QueryKeyMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QueryKeyMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().QueryKey.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *QueryKeyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *QueryKeyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the QueryKey entity.
// If the QueryKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueryKeyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *QueryKeyMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *QueryKeyMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *QueryKeyMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the QueryKey entity.
// If the QueryKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueryKeyMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *QueryKeyMutation) ResetType() {
	m._type = nil
}

// SetSpansValid sets the "spans_valid" field.
func (m *QueryKeyMutation) SetSpansValid(b bool) {
	m.spans_valid = &b
}

// SpansValid returns the value of the "spans_valid" field in the mutation.
func (m *QueryKeyMutation) SpansValid() (r bool, exists bool) {
	v := m.spans_valid
	if v == nil {
		return
	}
	return *v, true
}

// OldSpansValid returns the old "spans_valid" field's value of the QueryKey entity.
// If the QueryKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueryKeyMutation) OldSpansValid(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpansValid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpansValid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpansValid: %w", err)
	}
	return oldValue.SpansValid, nil
}

// ResetSpansValid resets all changes to the "spans_valid" field.
func (m *QueryKeyMutation) ResetSpansValid() {
	m.spans_valid = nil
}

// SetMetricsValid sets the "metrics_valid" field.
func (m *QueryKeyMutation) SetMetricsValid(b bool) {
	m.metrics_valid = &b
}

// MetricsValid returns the value of the "metrics_valid" field in the mutation.
func (m *QueryKeyMutation) MetricsValid() (r bool, exists bool) {
	v := m.metrics_valid
	if v == nil {
		return
	}
	return *v, true
}

// OldMetricsValid returns the old "metrics_valid" field's value of the QueryKey entity.
// If the QueryKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueryKeyMutation) OldMetricsValid(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetricsValid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetricsValid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetricsValid: %w", err)
	}
	return oldValue.MetricsValid, nil
}

// ResetMetricsValid resets all changes to the "metrics_valid" field.
func (m *QueryKeyMutation) ResetMetricsValid() {
	m.metrics_valid = nil
}

// SetLogsValid sets the "logs_valid" field.
func (m *QueryKeyMutation) SetLogsValid(b bool) {
	m.logs_valid = &b
}

// LogsValid returns the value of the "logs_valid" field in the mutation.
func (m *QueryKeyMutation) LogsValid() (r bool, exists bool) {
	v := m.logs_valid
	if v == nil {
		return
	}
	return *v, true
}

// OldLogsValid returns the old "logs_valid" field's value of the QueryKey entity.
// If the QueryKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueryKeyMutation) OldLogsValid(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogsValid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogsValid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogsValid: %w", err)
	}
	return oldValue.LogsValid, nil
}

// ResetLogsValid resets all changes to the "logs_valid" field.
func (m *QueryKeyMutation) ResetLogsValid() {
	m.logs_valid = nil
}

// SetValidDate sets the "valid_date" field.
func (m *QueryKeyMutation) SetValidDate(t time.Time) {
	m.valid_date = &t
}

// ValidDate returns the value of the "valid_date" field in the mutation.
func (m *QueryKeyMutation) ValidDate() (r time.Time, exists bool) {
	v := m.valid_date
	if v == nil {
		return
	}
	return *v, true
}

// OldValidDate returns the old "valid_date" field's value of the QueryKey entity.
// If the QueryKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueryKeyMutation) OldValidDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValidDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValidDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValidDate: %w", err)
	}
	return oldValue.ValidDate, nil
}

// ResetValidDate resets all changes to the "valid_date" field.
func (m *QueryKeyMutation) ResetValidDate() {
	m.valid_date = nil
}

// SetCreateTime sets the "create_time" field.
func (m *QueryKeyMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *QueryKeyMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the QueryKey entity.
// If the QueryKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueryKeyMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *QueryKeyMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *QueryKeyMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *QueryKeyMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the QueryKey entity.
// If the QueryKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueryKeyMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *QueryKeyMutation) ResetUpdateTime() {
	m.update_time = nil
}

// AddValueIDs adds the "values" edge to the QueryValue entity by ids.
func (m *QueryKeyMutation) AddValueIDs(ids ...int64) {
	if m.values == nil {
		m.values = make(map[int64]struct{})
	}
	for i := range ids {
		m.values[ids[i]] = struct{}{}
	}
}

// ClearValues clears the "values" edge to the QueryValue entity.
func (m *QueryKeyMutation) ClearValues() {
	m.clearedvalues = true
}

// ValuesCleared reports if the "values" edge to the QueryValue entity was cleared.
func (m *QueryKeyMutation) ValuesCleared() bool {
	return m.clearedvalues
}

// RemoveValueIDs removes the "values" edge to the QueryValue entity by IDs.
func (m *QueryKeyMutation) RemoveValueIDs(ids ...int64) {
	if m.removedvalues == nil {
		m.removedvalues = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.values, ids[i])
		m.removedvalues[ids[i]] = struct{}{}
	}
}

// RemovedValues returns the removed IDs of the "values" edge to the QueryValue entity.
func (m *QueryKeyMutation) RemovedValuesIDs() (ids []int64) {
	for id := range m.removedvalues {
		ids = append(ids, id)
	}
	return
}

// ValuesIDs returns the "values" edge IDs in the mutation.
func (m *QueryKeyMutation) ValuesIDs() (ids []int64) {
	for id := range m.values {
		ids = append(ids, id)
	}
	return
}

// ResetValues resets all changes to the "values" edge.
func (m *QueryKeyMutation) ResetValues() {
	m.values = nil
	m.clearedvalues = false
	m.removedvalues = nil
}

// Where appends a list predicates to the QueryKeyMutation builder.
func (m *QueryKeyMutation) Where(ps ...predicate.QueryKey) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QueryKeyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QueryKeyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.QueryKey, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QueryKeyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QueryKeyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (QueryKey).
func (m *QueryKeyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QueryKeyMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.name != nil {
		fields = append(fields, querykey.FieldName)
	}
	if m._type != nil {
		fields = append(fields, querykey.FieldType)
	}
	if m.spans_valid != nil {
		fields = append(fields, querykey.FieldSpansValid)
	}
	if m.metrics_valid != nil {
		fields = append(fields, querykey.FieldMetricsValid)
	}
	if m.logs_valid != nil {
		fields = append(fields, querykey.FieldLogsValid)
	}
	if m.valid_date != nil {
		fields = append(fields, querykey.FieldValidDate)
	}
	if m.create_time != nil {
		fields = append(fields, querykey.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, querykey.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QueryKeyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case querykey.FieldName:
		return m.Name()
	case querykey.FieldType:
		return m.GetType()
	case querykey.FieldSpansValid:
		return m.SpansValid()
	case querykey.FieldMetricsValid:
		return m.MetricsValid()
	case querykey.FieldLogsValid:
		return m.LogsValid()
	case querykey.FieldValidDate:
		return m.ValidDate()
	case querykey.FieldCreateTime:
		return m.CreateTime()
	case querykey.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QueryKeyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case querykey.FieldName:
		return m.OldName(ctx)
	case querykey.FieldType:
		return m.OldType(ctx)
	case querykey.FieldSpansValid:
		return m.OldSpansValid(ctx)
	case querykey.FieldMetricsValid:
		return m.OldMetricsValid(ctx)
	case querykey.FieldLogsValid:
		return m.OldLogsValid(ctx)
	case querykey.FieldValidDate:
		return m.OldValidDate(ctx)
	case querykey.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case querykey.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown QueryKey field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QueryKeyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case querykey.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case querykey.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case querykey.FieldSpansValid:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpansValid(v)
		return nil
	case querykey.FieldMetricsValid:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetricsValid(v)
		return nil
	case querykey.FieldLogsValid:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogsValid(v)
		return nil
	case querykey.FieldValidDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValidDate(v)
		return nil
	case querykey.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case querykey.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown QueryKey field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QueryKeyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QueryKeyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QueryKeyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown QueryKey numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QueryKeyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QueryKeyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QueryKeyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown QueryKey nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QueryKeyMutation) ResetField(name string) error {
	switch name {
	case querykey.FieldName:
		m.ResetName()
		return nil
	case querykey.FieldType:
		m.ResetType()
		return nil
	case querykey.FieldSpansValid:
		m.ResetSpansValid()
		return nil
	case querykey.FieldMetricsValid:
		m.ResetMetricsValid()
		return nil
	case querykey.FieldLogsValid:
		m.ResetLogsValid()
		return nil
	case querykey.FieldValidDate:
		m.ResetValidDate()
		return nil
	case querykey.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case querykey.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown QueryKey field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QueryKeyMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.values != nil {
		edges = append(edges, querykey.EdgeValues)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QueryKeyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case querykey.EdgeValues:
		ids := make([]ent.Value, 0, len(m.values))
		for id := range m.values {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QueryKeyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedvalues != nil {
		edges = append(edges, querykey.EdgeValues)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QueryKeyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case querykey.EdgeValues:
		ids := make([]ent.Value, 0, len(m.removedvalues))
		for id := range m.removedvalues {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QueryKeyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedvalues {
		edges = append(edges, querykey.EdgeValues)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QueryKeyMutation) EdgeCleared(name string) bool {
	switch name {
	case querykey.EdgeValues:
		return m.clearedvalues
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QueryKeyMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown QueryKey unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QueryKeyMutation) ResetEdge(name string) error {
	switch name {
	case querykey.EdgeValues:
		m.ResetValues()
		return nil
	}
	return fmt.Errorf("unknown QueryKey edge %s", name)
}

// QueryValueMutation represents an operation that mutates the QueryValue nodes in the graph.
type QueryValueMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	value         *string
	valid_date    *time.Time
	create_time   *time.Time
	update_time   *time.Time
	clearedFields map[string]struct{}
	key           *int64
	clearedkey    bool
	done          bool
	oldValue      func(context.Context) (*QueryValue, error)
	predicates    []predicate.QueryValue
}

var _ ent.Mutation = (*QueryValueMutation)(nil)

// queryvalueOption allows management of the mutation configuration using functional options.
type queryvalueOption func(*QueryValueMutation)

// newQueryValueMutation creates new mutation for the QueryValue entity.
func newQueryValueMutation(c config, op Op, opts ...queryvalueOption) *QueryValueMutation {
	m := &QueryValueMutation{
		config:        c,
		op:            op,
		typ:           TypeQueryValue,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQueryValueID sets the ID field of the mutation.
func withQueryValueID(id int64) queryvalueOption {
	return func(m *QueryValueMutation) {
		var (
			err   error
			once  sync.Once
			value *QueryValue
		)
		m.oldValue = func(ctx context.Context) (*QueryValue, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().QueryValue.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQueryValue sets the old QueryValue of the mutation.
func withQueryValue(node *QueryValue) queryvalueOption {
	return func(m *QueryValueMutation) {
		m.oldValue = func(context.Context) (*QueryValue, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QueryValueMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QueryValueMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of QueryValue entities.
func (m *QueryValueMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QueryValueMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QueryValueMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().QueryValue.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKeyID sets the "key_id" field.
func (m *QueryValueMutation) SetKeyID(i int64) {
	m.key = &i
}

// KeyID returns the value of the "key_id" field in the mutation.
func (m *QueryValueMutation) KeyID() (r int64, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKeyID returns the old "key_id" field's value of the QueryValue entity.
// If the QueryValue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueryValueMutation) OldKeyID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeyID: %w", err)
	}
	return oldValue.KeyID, nil
}

// ResetKeyID resets all changes to the "key_id" field.
func (m *QueryValueMutation) ResetKeyID() {
	m.key = nil
}

// SetValue sets the "value" field.
func (m *QueryValueMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *QueryValueMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the QueryValue entity.
// If the QueryValue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueryValueMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *QueryValueMutation) ResetValue() {
	m.value = nil
}

// SetValidDate sets the "valid_date" field.
func (m *QueryValueMutation) SetValidDate(t time.Time) {
	m.valid_date = &t
}

// ValidDate returns the value of the "valid_date" field in the mutation.
func (m *QueryValueMutation) ValidDate() (r time.Time, exists bool) {
	v := m.valid_date
	if v == nil {
		return
	}
	return *v, true
}

// OldValidDate returns the old "valid_date" field's value of the QueryValue entity.
// If the QueryValue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueryValueMutation) OldValidDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValidDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValidDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValidDate: %w", err)
	}
	return oldValue.ValidDate, nil
}

// ResetValidDate resets all changes to the "valid_date" field.
func (m *QueryValueMutation) ResetValidDate() {
	m.valid_date = nil
}

// SetCreateTime sets the "create_time" field.
func (m *QueryValueMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *QueryValueMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the QueryValue entity.
// If the QueryValue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueryValueMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *QueryValueMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *QueryValueMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *QueryValueMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the QueryValue entity.
// If the QueryValue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueryValueMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *QueryValueMutation) ResetUpdateTime() {
	m.update_time = nil
}

// ClearKey clears the "key" edge to the QueryKey entity.
func (m *QueryValueMutation) ClearKey() {
	m.clearedkey = true
	m.clearedFields[queryvalue.FieldKeyID] = struct{}{}
}

// KeyCleared reports if the "key" edge to the QueryKey entity was cleared.
func (m *QueryValueMutation) KeyCleared() bool {
	return m.clearedkey
}

// KeyIDs returns the "key" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// KeyID instead. It exists only for internal usage by the builders.
func (m *QueryValueMutation) KeyIDs() (ids []int64) {
	if id := m.key; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetKey resets all changes to the "key" edge.
func (m *QueryValueMutation) ResetKey() {
	m.key = nil
	m.clearedkey = false
}

// Where appends a list predicates to the QueryValueMutation builder.
func (m *QueryValueMutation) Where(ps ...predicate.QueryValue) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QueryValueMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QueryValueMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.QueryValue, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QueryValueMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QueryValueMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (QueryValue).
func (m *QueryValueMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QueryValueMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.key != nil {
		fields = append(fields, queryvalue.FieldKeyID)
	}
	if m.value != nil {
		fields = append(fields, queryvalue.FieldValue)
	}
	if m.valid_date != nil {
		fields = append(fields, queryvalue.FieldValidDate)
	}
	if m.create_time != nil {
		fields = append(fields, queryvalue.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, queryvalue.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QueryValueMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case queryvalue.FieldKeyID:
		return m.KeyID()
	case queryvalue.FieldValue:
		return m.Value()
	case queryvalue.FieldValidDate:
		return m.ValidDate()
	case queryvalue.FieldCreateTime:
		return m.CreateTime()
	case queryvalue.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QueryValueMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case queryvalue.FieldKeyID:
		return m.OldKeyID(ctx)
	case queryvalue.FieldValue:
		return m.OldValue(ctx)
	case queryvalue.FieldValidDate:
		return m.OldValidDate(ctx)
	case queryvalue.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case queryvalue.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown QueryValue field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QueryValueMutation) SetField(name string, value ent.Value) error {
	switch name {
	case queryvalue.FieldKeyID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeyID(v)
		return nil
	case queryvalue.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case queryvalue.FieldValidDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValidDate(v)
		return nil
	case queryvalue.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case queryvalue.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown QueryValue field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QueryValueMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QueryValueMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QueryValueMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown QueryValue numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QueryValueMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QueryValueMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QueryValueMutation) ClearField(name string) error {
	return fmt.Errorf("unknown QueryValue nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QueryValueMutation) ResetField(name string) error {
	switch name {
	case queryvalue.FieldKeyID:
		m.ResetKeyID()
		return nil
	case queryvalue.FieldValue:
		m.ResetValue()
		return nil
	case queryvalue.FieldValidDate:
		m.ResetValidDate()
		return nil
	case queryvalue.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case queryvalue.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown QueryValue field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QueryValueMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.key != nil {
		edges = append(edges, queryvalue.EdgeKey)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QueryValueMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case queryvalue.EdgeKey:
		if id := m.key; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QueryValueMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QueryValueMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QueryValueMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedkey {
		edges = append(edges, queryvalue.EdgeKey)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QueryValueMutation) EdgeCleared(name string) bool {
	switch name {
	case queryvalue.EdgeKey:
		return m.clearedkey
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QueryValueMutation) ClearEdge(name string) error {
	switch name {
	case queryvalue.EdgeKey:
		m.ClearKey()
		return nil
	}
	return fmt.Errorf("unknown QueryValue unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QueryValueMutation) ResetEdge(name string) error {
	switch name {
	case queryvalue.EdgeKey:
		m.ResetKey()
		return nil
	}
	return fmt.Errorf("unknown QueryValue edge %s", name)
}
