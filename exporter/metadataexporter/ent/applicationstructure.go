// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/metadataexporter/ent/applicationstructure"
)

// ApplicationStructure is the model entity for the ApplicationStructure schema.
type ApplicationStructure struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ParentCode holds the value of the "parentCode" field.
	ParentCode string `json:"parentCode,omitempty"`
	// Level holds the value of the "level" field.
	Level int `json:"level,omitempty"`
	// ValidDate holds the value of the "valid_date" field.
	ValidDate time.Time `json:"valid_date,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApplicationStructure) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case applicationstructure.FieldLevel:
			values[i] = new(sql.NullInt64)
		case applicationstructure.FieldID, applicationstructure.FieldParentCode:
			values[i] = new(sql.NullString)
		case applicationstructure.FieldValidDate, applicationstructure.FieldCreateTime, applicationstructure.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApplicationStructure fields.
func (as *ApplicationStructure) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case applicationstructure.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				as.ID = value.String
			}
		case applicationstructure.FieldParentCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parentCode", values[i])
			} else if value.Valid {
				as.ParentCode = value.String
			}
		case applicationstructure.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				as.Level = int(value.Int64)
			}
		case applicationstructure.FieldValidDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_date", values[i])
			} else if value.Valid {
				as.ValidDate = value.Time
			}
		case applicationstructure.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				as.CreateTime = value.Time
			}
		case applicationstructure.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				as.UpdateTime = value.Time
			}
		default:
			as.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ApplicationStructure.
// This includes values selected through modifiers, order, etc.
func (as *ApplicationStructure) Value(name string) (ent.Value, error) {
	return as.selectValues.Get(name)
}

// Update returns a builder for updating this ApplicationStructure.
// Note that you need to call ApplicationStructure.Unwrap() before calling this method if this ApplicationStructure
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *ApplicationStructure) Update() *ApplicationStructureUpdateOne {
	return NewApplicationStructureClient(as.config).UpdateOne(as)
}

// Unwrap unwraps the ApplicationStructure entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (as *ApplicationStructure) Unwrap() *ApplicationStructure {
	_tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApplicationStructure is not a transactional entity")
	}
	as.config.driver = _tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *ApplicationStructure) String() string {
	var builder strings.Builder
	builder.WriteString("ApplicationStructure(")
	builder.WriteString(fmt.Sprintf("id=%v, ", as.ID))
	builder.WriteString("parentCode=")
	builder.WriteString(as.ParentCode)
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", as.Level))
	builder.WriteString(", ")
	builder.WriteString("valid_date=")
	builder.WriteString(as.ValidDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(as.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(as.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ApplicationStructures is a parsable slice of ApplicationStructure.
type ApplicationStructures []*ApplicationStructure
