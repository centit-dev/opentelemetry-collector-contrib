// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/spanaggregationexporter/ent/schema"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/spanaggregationexporter/ent/spanaggregation"
)

// SpanAggregation is the model entity for the SpanAggregation schema.
type SpanAggregation struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Timestamp holds the value of the "Timestamp" field.
	Timestamp time.Time `json:"Timestamp,omitempty"`
	// TraceId holds the value of the "TraceId" field.
	TraceId string `json:"TraceId,omitempty"`
	// ParentSpanId holds the value of the "ParentSpanId" field.
	ParentSpanId string `json:"ParentSpanId,omitempty"`
	// PlatformName holds the value of the "PlatformName" field.
	PlatformName string `json:"PlatformName,omitempty"`
	// RootServiceName holds the value of the "RootServiceName" field.
	RootServiceName string `json:"RootServiceName,omitempty"`
	// RootSpanName holds the value of the "RootSpanName" field.
	RootSpanName string `json:"RootSpanName,omitempty"`
	// ServiceName holds the value of the "ServiceName" field.
	ServiceName string `json:"ServiceName,omitempty"`
	// SpanName holds the value of the "SpanName" field.
	SpanName string `json:"SpanName,omitempty"`
	// ResourceAttributes holds the value of the "ResourceAttributes" field.
	ResourceAttributes *schema.Attributes `json:"ResourceAttributes,omitempty"`
	// SpanAttributes holds the value of the "SpanAttributes" field.
	SpanAttributes *schema.Attributes `json:"SpanAttributes,omitempty"`
	// Duration holds the value of the "Duration" field.
	Duration int64 `json:"Duration,omitempty"`
	// Gap holds the value of the "Gap" field.
	Gap int64 `json:"Gap,omitempty"`
	// SelfDuration holds the value of the "SelfDuration" field.
	SelfDuration int64 `json:"SelfDuration,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SpanAggregation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case spanaggregation.FieldResourceAttributes, spanaggregation.FieldSpanAttributes:
			values[i] = new(schema.Attributes)
		case spanaggregation.FieldDuration, spanaggregation.FieldGap, spanaggregation.FieldSelfDuration:
			values[i] = new(sql.NullInt64)
		case spanaggregation.FieldID, spanaggregation.FieldTraceId, spanaggregation.FieldParentSpanId, spanaggregation.FieldPlatformName, spanaggregation.FieldRootServiceName, spanaggregation.FieldRootSpanName, spanaggregation.FieldServiceName, spanaggregation.FieldSpanName:
			values[i] = new(sql.NullString)
		case spanaggregation.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SpanAggregation fields.
func (sa *SpanAggregation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spanaggregation.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sa.ID = value.String
			}
		case spanaggregation.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Timestamp", values[i])
			} else if value.Valid {
				sa.Timestamp = value.Time
			}
		case spanaggregation.FieldTraceId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TraceId", values[i])
			} else if value.Valid {
				sa.TraceId = value.String
			}
		case spanaggregation.FieldParentSpanId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ParentSpanId", values[i])
			} else if value.Valid {
				sa.ParentSpanId = value.String
			}
		case spanaggregation.FieldPlatformName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PlatformName", values[i])
			} else if value.Valid {
				sa.PlatformName = value.String
			}
		case spanaggregation.FieldRootServiceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RootServiceName", values[i])
			} else if value.Valid {
				sa.RootServiceName = value.String
			}
		case spanaggregation.FieldRootSpanName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RootSpanName", values[i])
			} else if value.Valid {
				sa.RootSpanName = value.String
			}
		case spanaggregation.FieldServiceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ServiceName", values[i])
			} else if value.Valid {
				sa.ServiceName = value.String
			}
		case spanaggregation.FieldSpanName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SpanName", values[i])
			} else if value.Valid {
				sa.SpanName = value.String
			}
		case spanaggregation.FieldResourceAttributes:
			if value, ok := values[i].(*schema.Attributes); !ok {
				return fmt.Errorf("unexpected type %T for field ResourceAttributes", values[i])
			} else if value != nil {
				sa.ResourceAttributes = value
			}
		case spanaggregation.FieldSpanAttributes:
			if value, ok := values[i].(*schema.Attributes); !ok {
				return fmt.Errorf("unexpected type %T for field SpanAttributes", values[i])
			} else if value != nil {
				sa.SpanAttributes = value
			}
		case spanaggregation.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Duration", values[i])
			} else if value.Valid {
				sa.Duration = value.Int64
			}
		case spanaggregation.FieldGap:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Gap", values[i])
			} else if value.Valid {
				sa.Gap = value.Int64
			}
		case spanaggregation.FieldSelfDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field SelfDuration", values[i])
			} else if value.Valid {
				sa.SelfDuration = value.Int64
			}
		default:
			sa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SpanAggregation.
// This includes values selected through modifiers, order, etc.
func (sa *SpanAggregation) Value(name string) (ent.Value, error) {
	return sa.selectValues.Get(name)
}

// Update returns a builder for updating this SpanAggregation.
// Note that you need to call SpanAggregation.Unwrap() before calling this method if this SpanAggregation
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *SpanAggregation) Update() *SpanAggregationUpdateOne {
	return NewSpanAggregationClient(sa.config).UpdateOne(sa)
}

// Unwrap unwraps the SpanAggregation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *SpanAggregation) Unwrap() *SpanAggregation {
	_tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("ent: SpanAggregation is not a transactional entity")
	}
	sa.config.driver = _tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *SpanAggregation) String() string {
	var builder strings.Builder
	builder.WriteString("SpanAggregation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sa.ID))
	builder.WriteString("Timestamp=")
	builder.WriteString(sa.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("TraceId=")
	builder.WriteString(sa.TraceId)
	builder.WriteString(", ")
	builder.WriteString("ParentSpanId=")
	builder.WriteString(sa.ParentSpanId)
	builder.WriteString(", ")
	builder.WriteString("PlatformName=")
	builder.WriteString(sa.PlatformName)
	builder.WriteString(", ")
	builder.WriteString("RootServiceName=")
	builder.WriteString(sa.RootServiceName)
	builder.WriteString(", ")
	builder.WriteString("RootSpanName=")
	builder.WriteString(sa.RootSpanName)
	builder.WriteString(", ")
	builder.WriteString("ServiceName=")
	builder.WriteString(sa.ServiceName)
	builder.WriteString(", ")
	builder.WriteString("SpanName=")
	builder.WriteString(sa.SpanName)
	builder.WriteString(", ")
	builder.WriteString("ResourceAttributes=")
	builder.WriteString(fmt.Sprintf("%v", sa.ResourceAttributes))
	builder.WriteString(", ")
	builder.WriteString("SpanAttributes=")
	builder.WriteString(fmt.Sprintf("%v", sa.SpanAttributes))
	builder.WriteString(", ")
	builder.WriteString("Duration=")
	builder.WriteString(fmt.Sprintf("%v", sa.Duration))
	builder.WriteString(", ")
	builder.WriteString("Gap=")
	builder.WriteString(fmt.Sprintf("%v", sa.Gap))
	builder.WriteString(", ")
	builder.WriteString("SelfDuration=")
	builder.WriteString(fmt.Sprintf("%v", sa.SelfDuration))
	builder.WriteByte(')')
	return builder.String()
}

// SpanAggregations is a parsable slice of SpanAggregation.
type SpanAggregations []*SpanAggregation
