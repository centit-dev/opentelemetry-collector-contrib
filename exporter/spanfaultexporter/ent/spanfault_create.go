// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/spanfaultexporter/ent/schema"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/spanfaultexporter/ent/spanfault"
)

// SpanFaultCreate is the builder for creating a SpanFault entity.
type SpanFaultCreate struct {
	config
	mutation *SpanFaultMutation
	hooks    []Hook
}

// SetTimestamp sets the "Timestamp" field.
func (sfc *SpanFaultCreate) SetTimestamp(t time.Time) *SpanFaultCreate {
	sfc.mutation.SetTimestamp(t)
	return sfc
}

// SetNillableTimestamp sets the "Timestamp" field if the given value is not nil.
func (sfc *SpanFaultCreate) SetNillableTimestamp(t *time.Time) *SpanFaultCreate {
	if t != nil {
		sfc.SetTimestamp(*t)
	}
	return sfc
}

// SetPlatformName sets the "PlatformName" field.
func (sfc *SpanFaultCreate) SetPlatformName(s string) *SpanFaultCreate {
	sfc.mutation.SetPlatformName(s)
	return sfc
}

// SetAppCluster sets the "AppCluster" field.
func (sfc *SpanFaultCreate) SetAppCluster(s string) *SpanFaultCreate {
	sfc.mutation.SetAppCluster(s)
	return sfc
}

// SetInstanceName sets the "InstanceName" field.
func (sfc *SpanFaultCreate) SetInstanceName(s string) *SpanFaultCreate {
	sfc.mutation.SetInstanceName(s)
	return sfc
}

// SetRootServiceName sets the "RootServiceName" field.
func (sfc *SpanFaultCreate) SetRootServiceName(s string) *SpanFaultCreate {
	sfc.mutation.SetRootServiceName(s)
	return sfc
}

// SetRootSpanName sets the "RootSpanName" field.
func (sfc *SpanFaultCreate) SetRootSpanName(s string) *SpanFaultCreate {
	sfc.mutation.SetRootSpanName(s)
	return sfc
}

// SetRootDuration sets the "RootDuration" field.
func (sfc *SpanFaultCreate) SetRootDuration(i int64) *SpanFaultCreate {
	sfc.mutation.SetRootDuration(i)
	return sfc
}

// SetParentSpanId sets the "ParentSpanId" field.
func (sfc *SpanFaultCreate) SetParentSpanId(s string) *SpanFaultCreate {
	sfc.mutation.SetParentSpanId(s)
	return sfc
}

// SetSpanId sets the "SpanId" field.
func (sfc *SpanFaultCreate) SetSpanId(s string) *SpanFaultCreate {
	sfc.mutation.SetSpanId(s)
	return sfc
}

// SetServiceName sets the "ServiceName" field.
func (sfc *SpanFaultCreate) SetServiceName(s string) *SpanFaultCreate {
	sfc.mutation.SetServiceName(s)
	return sfc
}

// SetSpanName sets the "SpanName" field.
func (sfc *SpanFaultCreate) SetSpanName(s string) *SpanFaultCreate {
	sfc.mutation.SetSpanName(s)
	return sfc
}

// SetSpanKind sets the "SpanKind" field.
func (sfc *SpanFaultCreate) SetSpanKind(s string) *SpanFaultCreate {
	sfc.mutation.SetSpanKind(s)
	return sfc
}

// SetFaultKind sets the "FaultKind" field.
func (sfc *SpanFaultCreate) SetFaultKind(s string) *SpanFaultCreate {
	sfc.mutation.SetFaultKind(s)
	return sfc
}

// SetGap sets the "Gap" field.
func (sfc *SpanFaultCreate) SetGap(i int64) *SpanFaultCreate {
	sfc.mutation.SetGap(i)
	return sfc
}

// SetSelfDuration sets the "SelfDuration" field.
func (sfc *SpanFaultCreate) SetSelfDuration(i int64) *SpanFaultCreate {
	sfc.mutation.SetSelfDuration(i)
	return sfc
}

// SetDuration sets the "Duration" field.
func (sfc *SpanFaultCreate) SetDuration(i int64) *SpanFaultCreate {
	sfc.mutation.SetDuration(i)
	return sfc
}

// SetResourceAttributes sets the "ResourceAttributes" field.
func (sfc *SpanFaultCreate) SetResourceAttributes(s *schema.Attributes) *SpanFaultCreate {
	sfc.mutation.SetResourceAttributes(s)
	return sfc
}

// SetSpanAttributes sets the "SpanAttributes" field.
func (sfc *SpanFaultCreate) SetSpanAttributes(s *schema.Attributes) *SpanFaultCreate {
	sfc.mutation.SetSpanAttributes(s)
	return sfc
}

// SetID sets the "id" field.
func (sfc *SpanFaultCreate) SetID(s string) *SpanFaultCreate {
	sfc.mutation.SetID(s)
	return sfc
}

// Mutation returns the SpanFaultMutation object of the builder.
func (sfc *SpanFaultCreate) Mutation() *SpanFaultMutation {
	return sfc.mutation
}

// Save creates the SpanFault in the database.
func (sfc *SpanFaultCreate) Save(ctx context.Context) (*SpanFault, error) {
	return withHooks(ctx, sfc.sqlSave, sfc.mutation, sfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sfc *SpanFaultCreate) SaveX(ctx context.Context) *SpanFault {
	v, err := sfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sfc *SpanFaultCreate) Exec(ctx context.Context) error {
	_, err := sfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfc *SpanFaultCreate) ExecX(ctx context.Context) {
	if err := sfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sfc *SpanFaultCreate) check() error {
	if _, ok := sfc.mutation.PlatformName(); !ok {
		return &ValidationError{Name: "PlatformName", err: errors.New(`ent: missing required field "SpanFault.PlatformName"`)}
	}
	if _, ok := sfc.mutation.AppCluster(); !ok {
		return &ValidationError{Name: "AppCluster", err: errors.New(`ent: missing required field "SpanFault.AppCluster"`)}
	}
	if _, ok := sfc.mutation.InstanceName(); !ok {
		return &ValidationError{Name: "InstanceName", err: errors.New(`ent: missing required field "SpanFault.InstanceName"`)}
	}
	if _, ok := sfc.mutation.RootServiceName(); !ok {
		return &ValidationError{Name: "RootServiceName", err: errors.New(`ent: missing required field "SpanFault.RootServiceName"`)}
	}
	if _, ok := sfc.mutation.RootSpanName(); !ok {
		return &ValidationError{Name: "RootSpanName", err: errors.New(`ent: missing required field "SpanFault.RootSpanName"`)}
	}
	if _, ok := sfc.mutation.RootDuration(); !ok {
		return &ValidationError{Name: "RootDuration", err: errors.New(`ent: missing required field "SpanFault.RootDuration"`)}
	}
	if _, ok := sfc.mutation.ParentSpanId(); !ok {
		return &ValidationError{Name: "ParentSpanId", err: errors.New(`ent: missing required field "SpanFault.ParentSpanId"`)}
	}
	if _, ok := sfc.mutation.SpanId(); !ok {
		return &ValidationError{Name: "SpanId", err: errors.New(`ent: missing required field "SpanFault.SpanId"`)}
	}
	if _, ok := sfc.mutation.ServiceName(); !ok {
		return &ValidationError{Name: "ServiceName", err: errors.New(`ent: missing required field "SpanFault.ServiceName"`)}
	}
	if _, ok := sfc.mutation.SpanName(); !ok {
		return &ValidationError{Name: "SpanName", err: errors.New(`ent: missing required field "SpanFault.SpanName"`)}
	}
	if _, ok := sfc.mutation.SpanKind(); !ok {
		return &ValidationError{Name: "SpanKind", err: errors.New(`ent: missing required field "SpanFault.SpanKind"`)}
	}
	if _, ok := sfc.mutation.FaultKind(); !ok {
		return &ValidationError{Name: "FaultKind", err: errors.New(`ent: missing required field "SpanFault.FaultKind"`)}
	}
	if _, ok := sfc.mutation.Gap(); !ok {
		return &ValidationError{Name: "Gap", err: errors.New(`ent: missing required field "SpanFault.Gap"`)}
	}
	if _, ok := sfc.mutation.SelfDuration(); !ok {
		return &ValidationError{Name: "SelfDuration", err: errors.New(`ent: missing required field "SpanFault.SelfDuration"`)}
	}
	if _, ok := sfc.mutation.Duration(); !ok {
		return &ValidationError{Name: "Duration", err: errors.New(`ent: missing required field "SpanFault.Duration"`)}
	}
	if _, ok := sfc.mutation.ResourceAttributes(); !ok {
		return &ValidationError{Name: "ResourceAttributes", err: errors.New(`ent: missing required field "SpanFault.ResourceAttributes"`)}
	}
	if _, ok := sfc.mutation.SpanAttributes(); !ok {
		return &ValidationError{Name: "SpanAttributes", err: errors.New(`ent: missing required field "SpanFault.SpanAttributes"`)}
	}
	return nil
}

func (sfc *SpanFaultCreate) sqlSave(ctx context.Context) (*SpanFault, error) {
	if err := sfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SpanFault.ID type: %T", _spec.ID.Value)
		}
	}
	sfc.mutation.id = &_node.ID
	sfc.mutation.done = true
	return _node, nil
}

func (sfc *SpanFaultCreate) createSpec() (*SpanFault, *sqlgraph.CreateSpec) {
	var (
		_node = &SpanFault{config: sfc.config}
		_spec = sqlgraph.NewCreateSpec(spanfault.Table, sqlgraph.NewFieldSpec(spanfault.FieldID, field.TypeString))
	)
	if id, ok := sfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sfc.mutation.Timestamp(); ok {
		_spec.SetField(spanfault.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := sfc.mutation.PlatformName(); ok {
		_spec.SetField(spanfault.FieldPlatformName, field.TypeString, value)
		_node.PlatformName = value
	}
	if value, ok := sfc.mutation.AppCluster(); ok {
		_spec.SetField(spanfault.FieldAppCluster, field.TypeString, value)
		_node.AppCluster = value
	}
	if value, ok := sfc.mutation.InstanceName(); ok {
		_spec.SetField(spanfault.FieldInstanceName, field.TypeString, value)
		_node.InstanceName = value
	}
	if value, ok := sfc.mutation.RootServiceName(); ok {
		_spec.SetField(spanfault.FieldRootServiceName, field.TypeString, value)
		_node.RootServiceName = value
	}
	if value, ok := sfc.mutation.RootSpanName(); ok {
		_spec.SetField(spanfault.FieldRootSpanName, field.TypeString, value)
		_node.RootSpanName = value
	}
	if value, ok := sfc.mutation.RootDuration(); ok {
		_spec.SetField(spanfault.FieldRootDuration, field.TypeInt64, value)
		_node.RootDuration = value
	}
	if value, ok := sfc.mutation.ParentSpanId(); ok {
		_spec.SetField(spanfault.FieldParentSpanId, field.TypeString, value)
		_node.ParentSpanId = value
	}
	if value, ok := sfc.mutation.SpanId(); ok {
		_spec.SetField(spanfault.FieldSpanId, field.TypeString, value)
		_node.SpanId = value
	}
	if value, ok := sfc.mutation.ServiceName(); ok {
		_spec.SetField(spanfault.FieldServiceName, field.TypeString, value)
		_node.ServiceName = value
	}
	if value, ok := sfc.mutation.SpanName(); ok {
		_spec.SetField(spanfault.FieldSpanName, field.TypeString, value)
		_node.SpanName = value
	}
	if value, ok := sfc.mutation.SpanKind(); ok {
		_spec.SetField(spanfault.FieldSpanKind, field.TypeString, value)
		_node.SpanKind = value
	}
	if value, ok := sfc.mutation.FaultKind(); ok {
		_spec.SetField(spanfault.FieldFaultKind, field.TypeString, value)
		_node.FaultKind = value
	}
	if value, ok := sfc.mutation.Gap(); ok {
		_spec.SetField(spanfault.FieldGap, field.TypeInt64, value)
		_node.Gap = value
	}
	if value, ok := sfc.mutation.SelfDuration(); ok {
		_spec.SetField(spanfault.FieldSelfDuration, field.TypeInt64, value)
		_node.SelfDuration = value
	}
	if value, ok := sfc.mutation.Duration(); ok {
		_spec.SetField(spanfault.FieldDuration, field.TypeInt64, value)
		_node.Duration = value
	}
	if value, ok := sfc.mutation.ResourceAttributes(); ok {
		_spec.SetField(spanfault.FieldResourceAttributes, field.TypeOther, value)
		_node.ResourceAttributes = value
	}
	if value, ok := sfc.mutation.SpanAttributes(); ok {
		_spec.SetField(spanfault.FieldSpanAttributes, field.TypeOther, value)
		_node.SpanAttributes = value
	}
	return _node, _spec
}

// SpanFaultCreateBulk is the builder for creating many SpanFault entities in bulk.
type SpanFaultCreateBulk struct {
	config
	err      error
	builders []*SpanFaultCreate
}

// Save creates the SpanFault entities in the database.
func (sfcb *SpanFaultCreateBulk) Save(ctx context.Context) ([]*SpanFault, error) {
	if sfcb.err != nil {
		return nil, sfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sfcb.builders))
	nodes := make([]*SpanFault, len(sfcb.builders))
	mutators := make([]Mutator, len(sfcb.builders))
	for i := range sfcb.builders {
		func(i int, root context.Context) {
			builder := sfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpanFaultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sfcb *SpanFaultCreateBulk) SaveX(ctx context.Context) []*SpanFault {
	v, err := sfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sfcb *SpanFaultCreateBulk) Exec(ctx context.Context) error {
	_, err := sfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfcb *SpanFaultCreateBulk) ExecX(ctx context.Context) {
	if err := sfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
