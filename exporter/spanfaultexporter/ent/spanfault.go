// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/spanfaultexporter/ent/spanfault"
)

// SpanFault is the model entity for the SpanFault schema.
type SpanFault struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Timestamp holds the value of the "Timestamp" field.
	Timestamp time.Time `json:"Timestamp,omitempty"`
	// TraceId holds the value of the "TraceId" field.
	TraceId string `json:"TraceId,omitempty"`
	// PlatformName holds the value of the "PlatformName" field.
	PlatformName string `json:"PlatformName,omitempty"`
	// ClusterName holds the value of the "ClusterName" field.
	ClusterName string `json:"ClusterName,omitempty"`
	// InstanceName holds the value of the "InstanceName" field.
	InstanceName string `json:"InstanceName,omitempty"`
	// RootServiceName holds the value of the "RootServiceName" field.
	RootServiceName string `json:"RootServiceName,omitempty"`
	// RootSpanName holds the value of the "RootSpanName" field.
	RootSpanName string `json:"RootSpanName,omitempty"`
	// ParentSpanId holds the value of the "ParentSpanId" field.
	ParentSpanId string `json:"ParentSpanId,omitempty"`
	// ServiceName holds the value of the "ServiceName" field.
	ServiceName string `json:"ServiceName,omitempty"`
	// SpanName holds the value of the "SpanName" field.
	SpanName string `json:"SpanName,omitempty"`
	// FaultKind holds the value of the "FaultKind" field.
	FaultKind string `json:"FaultKind,omitempty"`
	// IsCause holds the value of the "IsCause" field.
	IsCause      bool `json:"IsCause,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SpanFault) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case spanfault.FieldIsCause:
			values[i] = new(sql.NullBool)
		case spanfault.FieldID, spanfault.FieldTraceId, spanfault.FieldPlatformName, spanfault.FieldClusterName, spanfault.FieldInstanceName, spanfault.FieldRootServiceName, spanfault.FieldRootSpanName, spanfault.FieldParentSpanId, spanfault.FieldServiceName, spanfault.FieldSpanName, spanfault.FieldFaultKind:
			values[i] = new(sql.NullString)
		case spanfault.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SpanFault fields.
func (sf *SpanFault) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spanfault.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sf.ID = value.String
			}
		case spanfault.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Timestamp", values[i])
			} else if value.Valid {
				sf.Timestamp = value.Time
			}
		case spanfault.FieldTraceId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TraceId", values[i])
			} else if value.Valid {
				sf.TraceId = value.String
			}
		case spanfault.FieldPlatformName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PlatformName", values[i])
			} else if value.Valid {
				sf.PlatformName = value.String
			}
		case spanfault.FieldClusterName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ClusterName", values[i])
			} else if value.Valid {
				sf.ClusterName = value.String
			}
		case spanfault.FieldInstanceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field InstanceName", values[i])
			} else if value.Valid {
				sf.InstanceName = value.String
			}
		case spanfault.FieldRootServiceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RootServiceName", values[i])
			} else if value.Valid {
				sf.RootServiceName = value.String
			}
		case spanfault.FieldRootSpanName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RootSpanName", values[i])
			} else if value.Valid {
				sf.RootSpanName = value.String
			}
		case spanfault.FieldParentSpanId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ParentSpanId", values[i])
			} else if value.Valid {
				sf.ParentSpanId = value.String
			}
		case spanfault.FieldServiceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ServiceName", values[i])
			} else if value.Valid {
				sf.ServiceName = value.String
			}
		case spanfault.FieldSpanName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SpanName", values[i])
			} else if value.Valid {
				sf.SpanName = value.String
			}
		case spanfault.FieldFaultKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FaultKind", values[i])
			} else if value.Valid {
				sf.FaultKind = value.String
			}
		case spanfault.FieldIsCause:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field IsCause", values[i])
			} else if value.Valid {
				sf.IsCause = value.Bool
			}
		default:
			sf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SpanFault.
// This includes values selected through modifiers, order, etc.
func (sf *SpanFault) Value(name string) (ent.Value, error) {
	return sf.selectValues.Get(name)
}

// Update returns a builder for updating this SpanFault.
// Note that you need to call SpanFault.Unwrap() before calling this method if this SpanFault
// was returned from a transaction, and the transaction was committed or rolled back.
func (sf *SpanFault) Update() *SpanFaultUpdateOne {
	return NewSpanFaultClient(sf.config).UpdateOne(sf)
}

// Unwrap unwraps the SpanFault entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sf *SpanFault) Unwrap() *SpanFault {
	_tx, ok := sf.config.driver.(*txDriver)
	if !ok {
		panic("ent: SpanFault is not a transactional entity")
	}
	sf.config.driver = _tx.drv
	return sf
}

// String implements the fmt.Stringer.
func (sf *SpanFault) String() string {
	var builder strings.Builder
	builder.WriteString("SpanFault(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sf.ID))
	builder.WriteString("Timestamp=")
	builder.WriteString(sf.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("TraceId=")
	builder.WriteString(sf.TraceId)
	builder.WriteString(", ")
	builder.WriteString("PlatformName=")
	builder.WriteString(sf.PlatformName)
	builder.WriteString(", ")
	builder.WriteString("ClusterName=")
	builder.WriteString(sf.ClusterName)
	builder.WriteString(", ")
	builder.WriteString("InstanceName=")
	builder.WriteString(sf.InstanceName)
	builder.WriteString(", ")
	builder.WriteString("RootServiceName=")
	builder.WriteString(sf.RootServiceName)
	builder.WriteString(", ")
	builder.WriteString("RootSpanName=")
	builder.WriteString(sf.RootSpanName)
	builder.WriteString(", ")
	builder.WriteString("ParentSpanId=")
	builder.WriteString(sf.ParentSpanId)
	builder.WriteString(", ")
	builder.WriteString("ServiceName=")
	builder.WriteString(sf.ServiceName)
	builder.WriteString(", ")
	builder.WriteString("SpanName=")
	builder.WriteString(sf.SpanName)
	builder.WriteString(", ")
	builder.WriteString("FaultKind=")
	builder.WriteString(sf.FaultKind)
	builder.WriteString(", ")
	builder.WriteString("IsCause=")
	builder.WriteString(fmt.Sprintf("%v", sf.IsCause))
	builder.WriteByte(')')
	return builder.String()
}

// SpanFaults is a parsable slice of SpanFault.
type SpanFaults []*SpanFault
