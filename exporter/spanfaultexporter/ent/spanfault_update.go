// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/spanfaultexporter/ent/predicate"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/spanfaultexporter/ent/spanfault"
)

// SpanFaultUpdate is the builder for updating SpanFault entities.
type SpanFaultUpdate struct {
	config
	hooks    []Hook
	mutation *SpanFaultMutation
}

// Where appends a list predicates to the SpanFaultUpdate builder.
func (sfu *SpanFaultUpdate) Where(ps ...predicate.SpanFault) *SpanFaultUpdate {
	sfu.mutation.Where(ps...)
	return sfu
}

// SetTimestamp sets the "Timestamp" field.
func (sfu *SpanFaultUpdate) SetTimestamp(t time.Time) *SpanFaultUpdate {
	sfu.mutation.SetTimestamp(t)
	return sfu
}

// SetNillableTimestamp sets the "Timestamp" field if the given value is not nil.
func (sfu *SpanFaultUpdate) SetNillableTimestamp(t *time.Time) *SpanFaultUpdate {
	if t != nil {
		sfu.SetTimestamp(*t)
	}
	return sfu
}

// ClearTimestamp clears the value of the "Timestamp" field.
func (sfu *SpanFaultUpdate) ClearTimestamp() *SpanFaultUpdate {
	sfu.mutation.ClearTimestamp()
	return sfu
}

// SetTraceId sets the "TraceId" field.
func (sfu *SpanFaultUpdate) SetTraceId(s string) *SpanFaultUpdate {
	sfu.mutation.SetTraceId(s)
	return sfu
}

// SetNillableTraceId sets the "TraceId" field if the given value is not nil.
func (sfu *SpanFaultUpdate) SetNillableTraceId(s *string) *SpanFaultUpdate {
	if s != nil {
		sfu.SetTraceId(*s)
	}
	return sfu
}

// SetPlatformName sets the "PlatformName" field.
func (sfu *SpanFaultUpdate) SetPlatformName(s string) *SpanFaultUpdate {
	sfu.mutation.SetPlatformName(s)
	return sfu
}

// SetNillablePlatformName sets the "PlatformName" field if the given value is not nil.
func (sfu *SpanFaultUpdate) SetNillablePlatformName(s *string) *SpanFaultUpdate {
	if s != nil {
		sfu.SetPlatformName(*s)
	}
	return sfu
}

// SetClusterName sets the "ClusterName" field.
func (sfu *SpanFaultUpdate) SetClusterName(s string) *SpanFaultUpdate {
	sfu.mutation.SetClusterName(s)
	return sfu
}

// SetNillableClusterName sets the "ClusterName" field if the given value is not nil.
func (sfu *SpanFaultUpdate) SetNillableClusterName(s *string) *SpanFaultUpdate {
	if s != nil {
		sfu.SetClusterName(*s)
	}
	return sfu
}

// SetInstanceName sets the "InstanceName" field.
func (sfu *SpanFaultUpdate) SetInstanceName(s string) *SpanFaultUpdate {
	sfu.mutation.SetInstanceName(s)
	return sfu
}

// SetNillableInstanceName sets the "InstanceName" field if the given value is not nil.
func (sfu *SpanFaultUpdate) SetNillableInstanceName(s *string) *SpanFaultUpdate {
	if s != nil {
		sfu.SetInstanceName(*s)
	}
	return sfu
}

// SetRootServiceName sets the "RootServiceName" field.
func (sfu *SpanFaultUpdate) SetRootServiceName(s string) *SpanFaultUpdate {
	sfu.mutation.SetRootServiceName(s)
	return sfu
}

// SetNillableRootServiceName sets the "RootServiceName" field if the given value is not nil.
func (sfu *SpanFaultUpdate) SetNillableRootServiceName(s *string) *SpanFaultUpdate {
	if s != nil {
		sfu.SetRootServiceName(*s)
	}
	return sfu
}

// ClearRootServiceName clears the value of the "RootServiceName" field.
func (sfu *SpanFaultUpdate) ClearRootServiceName() *SpanFaultUpdate {
	sfu.mutation.ClearRootServiceName()
	return sfu
}

// SetRootSpanName sets the "RootSpanName" field.
func (sfu *SpanFaultUpdate) SetRootSpanName(s string) *SpanFaultUpdate {
	sfu.mutation.SetRootSpanName(s)
	return sfu
}

// SetNillableRootSpanName sets the "RootSpanName" field if the given value is not nil.
func (sfu *SpanFaultUpdate) SetNillableRootSpanName(s *string) *SpanFaultUpdate {
	if s != nil {
		sfu.SetRootSpanName(*s)
	}
	return sfu
}

// ClearRootSpanName clears the value of the "RootSpanName" field.
func (sfu *SpanFaultUpdate) ClearRootSpanName() *SpanFaultUpdate {
	sfu.mutation.ClearRootSpanName()
	return sfu
}

// SetParentSpanId sets the "ParentSpanId" field.
func (sfu *SpanFaultUpdate) SetParentSpanId(s string) *SpanFaultUpdate {
	sfu.mutation.SetParentSpanId(s)
	return sfu
}

// SetNillableParentSpanId sets the "ParentSpanId" field if the given value is not nil.
func (sfu *SpanFaultUpdate) SetNillableParentSpanId(s *string) *SpanFaultUpdate {
	if s != nil {
		sfu.SetParentSpanId(*s)
	}
	return sfu
}

// SetServiceName sets the "ServiceName" field.
func (sfu *SpanFaultUpdate) SetServiceName(s string) *SpanFaultUpdate {
	sfu.mutation.SetServiceName(s)
	return sfu
}

// SetNillableServiceName sets the "ServiceName" field if the given value is not nil.
func (sfu *SpanFaultUpdate) SetNillableServiceName(s *string) *SpanFaultUpdate {
	if s != nil {
		sfu.SetServiceName(*s)
	}
	return sfu
}

// SetSpanName sets the "SpanName" field.
func (sfu *SpanFaultUpdate) SetSpanName(s string) *SpanFaultUpdate {
	sfu.mutation.SetSpanName(s)
	return sfu
}

// SetNillableSpanName sets the "SpanName" field if the given value is not nil.
func (sfu *SpanFaultUpdate) SetNillableSpanName(s *string) *SpanFaultUpdate {
	if s != nil {
		sfu.SetSpanName(*s)
	}
	return sfu
}

// SetFaultKind sets the "FaultKind" field.
func (sfu *SpanFaultUpdate) SetFaultKind(s string) *SpanFaultUpdate {
	sfu.mutation.SetFaultKind(s)
	return sfu
}

// SetNillableFaultKind sets the "FaultKind" field if the given value is not nil.
func (sfu *SpanFaultUpdate) SetNillableFaultKind(s *string) *SpanFaultUpdate {
	if s != nil {
		sfu.SetFaultKind(*s)
	}
	return sfu
}

// SetIsCause sets the "IsCause" field.
func (sfu *SpanFaultUpdate) SetIsCause(b bool) *SpanFaultUpdate {
	sfu.mutation.SetIsCause(b)
	return sfu
}

// SetNillableIsCause sets the "IsCause" field if the given value is not nil.
func (sfu *SpanFaultUpdate) SetNillableIsCause(b *bool) *SpanFaultUpdate {
	if b != nil {
		sfu.SetIsCause(*b)
	}
	return sfu
}

// Mutation returns the SpanFaultMutation object of the builder.
func (sfu *SpanFaultUpdate) Mutation() *SpanFaultMutation {
	return sfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sfu *SpanFaultUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sfu.sqlSave, sfu.mutation, sfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sfu *SpanFaultUpdate) SaveX(ctx context.Context) int {
	affected, err := sfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sfu *SpanFaultUpdate) Exec(ctx context.Context) error {
	_, err := sfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfu *SpanFaultUpdate) ExecX(ctx context.Context) {
	if err := sfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sfu *SpanFaultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(spanfault.Table, spanfault.Columns, sqlgraph.NewFieldSpec(spanfault.FieldID, field.TypeString))
	if ps := sfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sfu.mutation.Timestamp(); ok {
		_spec.SetField(spanfault.FieldTimestamp, field.TypeTime, value)
	}
	if sfu.mutation.TimestampCleared() {
		_spec.ClearField(spanfault.FieldTimestamp, field.TypeTime)
	}
	if value, ok := sfu.mutation.TraceId(); ok {
		_spec.SetField(spanfault.FieldTraceId, field.TypeString, value)
	}
	if value, ok := sfu.mutation.PlatformName(); ok {
		_spec.SetField(spanfault.FieldPlatformName, field.TypeString, value)
	}
	if value, ok := sfu.mutation.ClusterName(); ok {
		_spec.SetField(spanfault.FieldClusterName, field.TypeString, value)
	}
	if value, ok := sfu.mutation.InstanceName(); ok {
		_spec.SetField(spanfault.FieldInstanceName, field.TypeString, value)
	}
	if value, ok := sfu.mutation.RootServiceName(); ok {
		_spec.SetField(spanfault.FieldRootServiceName, field.TypeString, value)
	}
	if sfu.mutation.RootServiceNameCleared() {
		_spec.ClearField(spanfault.FieldRootServiceName, field.TypeString)
	}
	if value, ok := sfu.mutation.RootSpanName(); ok {
		_spec.SetField(spanfault.FieldRootSpanName, field.TypeString, value)
	}
	if sfu.mutation.RootSpanNameCleared() {
		_spec.ClearField(spanfault.FieldRootSpanName, field.TypeString)
	}
	if value, ok := sfu.mutation.ParentSpanId(); ok {
		_spec.SetField(spanfault.FieldParentSpanId, field.TypeString, value)
	}
	if value, ok := sfu.mutation.ServiceName(); ok {
		_spec.SetField(spanfault.FieldServiceName, field.TypeString, value)
	}
	if value, ok := sfu.mutation.SpanName(); ok {
		_spec.SetField(spanfault.FieldSpanName, field.TypeString, value)
	}
	if value, ok := sfu.mutation.FaultKind(); ok {
		_spec.SetField(spanfault.FieldFaultKind, field.TypeString, value)
	}
	if value, ok := sfu.mutation.IsCause(); ok {
		_spec.SetField(spanfault.FieldIsCause, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spanfault.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sfu.mutation.done = true
	return n, nil
}

// SpanFaultUpdateOne is the builder for updating a single SpanFault entity.
type SpanFaultUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpanFaultMutation
}

// SetTimestamp sets the "Timestamp" field.
func (sfuo *SpanFaultUpdateOne) SetTimestamp(t time.Time) *SpanFaultUpdateOne {
	sfuo.mutation.SetTimestamp(t)
	return sfuo
}

// SetNillableTimestamp sets the "Timestamp" field if the given value is not nil.
func (sfuo *SpanFaultUpdateOne) SetNillableTimestamp(t *time.Time) *SpanFaultUpdateOne {
	if t != nil {
		sfuo.SetTimestamp(*t)
	}
	return sfuo
}

// ClearTimestamp clears the value of the "Timestamp" field.
func (sfuo *SpanFaultUpdateOne) ClearTimestamp() *SpanFaultUpdateOne {
	sfuo.mutation.ClearTimestamp()
	return sfuo
}

// SetTraceId sets the "TraceId" field.
func (sfuo *SpanFaultUpdateOne) SetTraceId(s string) *SpanFaultUpdateOne {
	sfuo.mutation.SetTraceId(s)
	return sfuo
}

// SetNillableTraceId sets the "TraceId" field if the given value is not nil.
func (sfuo *SpanFaultUpdateOne) SetNillableTraceId(s *string) *SpanFaultUpdateOne {
	if s != nil {
		sfuo.SetTraceId(*s)
	}
	return sfuo
}

// SetPlatformName sets the "PlatformName" field.
func (sfuo *SpanFaultUpdateOne) SetPlatformName(s string) *SpanFaultUpdateOne {
	sfuo.mutation.SetPlatformName(s)
	return sfuo
}

// SetNillablePlatformName sets the "PlatformName" field if the given value is not nil.
func (sfuo *SpanFaultUpdateOne) SetNillablePlatformName(s *string) *SpanFaultUpdateOne {
	if s != nil {
		sfuo.SetPlatformName(*s)
	}
	return sfuo
}

// SetClusterName sets the "ClusterName" field.
func (sfuo *SpanFaultUpdateOne) SetClusterName(s string) *SpanFaultUpdateOne {
	sfuo.mutation.SetClusterName(s)
	return sfuo
}

// SetNillableClusterName sets the "ClusterName" field if the given value is not nil.
func (sfuo *SpanFaultUpdateOne) SetNillableClusterName(s *string) *SpanFaultUpdateOne {
	if s != nil {
		sfuo.SetClusterName(*s)
	}
	return sfuo
}

// SetInstanceName sets the "InstanceName" field.
func (sfuo *SpanFaultUpdateOne) SetInstanceName(s string) *SpanFaultUpdateOne {
	sfuo.mutation.SetInstanceName(s)
	return sfuo
}

// SetNillableInstanceName sets the "InstanceName" field if the given value is not nil.
func (sfuo *SpanFaultUpdateOne) SetNillableInstanceName(s *string) *SpanFaultUpdateOne {
	if s != nil {
		sfuo.SetInstanceName(*s)
	}
	return sfuo
}

// SetRootServiceName sets the "RootServiceName" field.
func (sfuo *SpanFaultUpdateOne) SetRootServiceName(s string) *SpanFaultUpdateOne {
	sfuo.mutation.SetRootServiceName(s)
	return sfuo
}

// SetNillableRootServiceName sets the "RootServiceName" field if the given value is not nil.
func (sfuo *SpanFaultUpdateOne) SetNillableRootServiceName(s *string) *SpanFaultUpdateOne {
	if s != nil {
		sfuo.SetRootServiceName(*s)
	}
	return sfuo
}

// ClearRootServiceName clears the value of the "RootServiceName" field.
func (sfuo *SpanFaultUpdateOne) ClearRootServiceName() *SpanFaultUpdateOne {
	sfuo.mutation.ClearRootServiceName()
	return sfuo
}

// SetRootSpanName sets the "RootSpanName" field.
func (sfuo *SpanFaultUpdateOne) SetRootSpanName(s string) *SpanFaultUpdateOne {
	sfuo.mutation.SetRootSpanName(s)
	return sfuo
}

// SetNillableRootSpanName sets the "RootSpanName" field if the given value is not nil.
func (sfuo *SpanFaultUpdateOne) SetNillableRootSpanName(s *string) *SpanFaultUpdateOne {
	if s != nil {
		sfuo.SetRootSpanName(*s)
	}
	return sfuo
}

// ClearRootSpanName clears the value of the "RootSpanName" field.
func (sfuo *SpanFaultUpdateOne) ClearRootSpanName() *SpanFaultUpdateOne {
	sfuo.mutation.ClearRootSpanName()
	return sfuo
}

// SetParentSpanId sets the "ParentSpanId" field.
func (sfuo *SpanFaultUpdateOne) SetParentSpanId(s string) *SpanFaultUpdateOne {
	sfuo.mutation.SetParentSpanId(s)
	return sfuo
}

// SetNillableParentSpanId sets the "ParentSpanId" field if the given value is not nil.
func (sfuo *SpanFaultUpdateOne) SetNillableParentSpanId(s *string) *SpanFaultUpdateOne {
	if s != nil {
		sfuo.SetParentSpanId(*s)
	}
	return sfuo
}

// SetServiceName sets the "ServiceName" field.
func (sfuo *SpanFaultUpdateOne) SetServiceName(s string) *SpanFaultUpdateOne {
	sfuo.mutation.SetServiceName(s)
	return sfuo
}

// SetNillableServiceName sets the "ServiceName" field if the given value is not nil.
func (sfuo *SpanFaultUpdateOne) SetNillableServiceName(s *string) *SpanFaultUpdateOne {
	if s != nil {
		sfuo.SetServiceName(*s)
	}
	return sfuo
}

// SetSpanName sets the "SpanName" field.
func (sfuo *SpanFaultUpdateOne) SetSpanName(s string) *SpanFaultUpdateOne {
	sfuo.mutation.SetSpanName(s)
	return sfuo
}

// SetNillableSpanName sets the "SpanName" field if the given value is not nil.
func (sfuo *SpanFaultUpdateOne) SetNillableSpanName(s *string) *SpanFaultUpdateOne {
	if s != nil {
		sfuo.SetSpanName(*s)
	}
	return sfuo
}

// SetFaultKind sets the "FaultKind" field.
func (sfuo *SpanFaultUpdateOne) SetFaultKind(s string) *SpanFaultUpdateOne {
	sfuo.mutation.SetFaultKind(s)
	return sfuo
}

// SetNillableFaultKind sets the "FaultKind" field if the given value is not nil.
func (sfuo *SpanFaultUpdateOne) SetNillableFaultKind(s *string) *SpanFaultUpdateOne {
	if s != nil {
		sfuo.SetFaultKind(*s)
	}
	return sfuo
}

// SetIsCause sets the "IsCause" field.
func (sfuo *SpanFaultUpdateOne) SetIsCause(b bool) *SpanFaultUpdateOne {
	sfuo.mutation.SetIsCause(b)
	return sfuo
}

// SetNillableIsCause sets the "IsCause" field if the given value is not nil.
func (sfuo *SpanFaultUpdateOne) SetNillableIsCause(b *bool) *SpanFaultUpdateOne {
	if b != nil {
		sfuo.SetIsCause(*b)
	}
	return sfuo
}

// Mutation returns the SpanFaultMutation object of the builder.
func (sfuo *SpanFaultUpdateOne) Mutation() *SpanFaultMutation {
	return sfuo.mutation
}

// Where appends a list predicates to the SpanFaultUpdate builder.
func (sfuo *SpanFaultUpdateOne) Where(ps ...predicate.SpanFault) *SpanFaultUpdateOne {
	sfuo.mutation.Where(ps...)
	return sfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sfuo *SpanFaultUpdateOne) Select(field string, fields ...string) *SpanFaultUpdateOne {
	sfuo.fields = append([]string{field}, fields...)
	return sfuo
}

// Save executes the query and returns the updated SpanFault entity.
func (sfuo *SpanFaultUpdateOne) Save(ctx context.Context) (*SpanFault, error) {
	return withHooks(ctx, sfuo.sqlSave, sfuo.mutation, sfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sfuo *SpanFaultUpdateOne) SaveX(ctx context.Context) *SpanFault {
	node, err := sfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sfuo *SpanFaultUpdateOne) Exec(ctx context.Context) error {
	_, err := sfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfuo *SpanFaultUpdateOne) ExecX(ctx context.Context) {
	if err := sfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sfuo *SpanFaultUpdateOne) sqlSave(ctx context.Context) (_node *SpanFault, err error) {
	_spec := sqlgraph.NewUpdateSpec(spanfault.Table, spanfault.Columns, sqlgraph.NewFieldSpec(spanfault.FieldID, field.TypeString))
	id, ok := sfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SpanFault.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spanfault.FieldID)
		for _, f := range fields {
			if !spanfault.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != spanfault.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sfuo.mutation.Timestamp(); ok {
		_spec.SetField(spanfault.FieldTimestamp, field.TypeTime, value)
	}
	if sfuo.mutation.TimestampCleared() {
		_spec.ClearField(spanfault.FieldTimestamp, field.TypeTime)
	}
	if value, ok := sfuo.mutation.TraceId(); ok {
		_spec.SetField(spanfault.FieldTraceId, field.TypeString, value)
	}
	if value, ok := sfuo.mutation.PlatformName(); ok {
		_spec.SetField(spanfault.FieldPlatformName, field.TypeString, value)
	}
	if value, ok := sfuo.mutation.ClusterName(); ok {
		_spec.SetField(spanfault.FieldClusterName, field.TypeString, value)
	}
	if value, ok := sfuo.mutation.InstanceName(); ok {
		_spec.SetField(spanfault.FieldInstanceName, field.TypeString, value)
	}
	if value, ok := sfuo.mutation.RootServiceName(); ok {
		_spec.SetField(spanfault.FieldRootServiceName, field.TypeString, value)
	}
	if sfuo.mutation.RootServiceNameCleared() {
		_spec.ClearField(spanfault.FieldRootServiceName, field.TypeString)
	}
	if value, ok := sfuo.mutation.RootSpanName(); ok {
		_spec.SetField(spanfault.FieldRootSpanName, field.TypeString, value)
	}
	if sfuo.mutation.RootSpanNameCleared() {
		_spec.ClearField(spanfault.FieldRootSpanName, field.TypeString)
	}
	if value, ok := sfuo.mutation.ParentSpanId(); ok {
		_spec.SetField(spanfault.FieldParentSpanId, field.TypeString, value)
	}
	if value, ok := sfuo.mutation.ServiceName(); ok {
		_spec.SetField(spanfault.FieldServiceName, field.TypeString, value)
	}
	if value, ok := sfuo.mutation.SpanName(); ok {
		_spec.SetField(spanfault.FieldSpanName, field.TypeString, value)
	}
	if value, ok := sfuo.mutation.FaultKind(); ok {
		_spec.SetField(spanfault.FieldFaultKind, field.TypeString, value)
	}
	if value, ok := sfuo.mutation.IsCause(); ok {
		_spec.SetField(spanfault.FieldIsCause, field.TypeBool, value)
	}
	_node = &SpanFault{config: sfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spanfault.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sfuo.mutation.done = true
	return _node, nil
}
