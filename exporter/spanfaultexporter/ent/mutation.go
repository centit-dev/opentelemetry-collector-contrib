// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/spanfaultexporter/ent/predicate"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/spanfaultexporter/ent/spanfault"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSpanFault = "SpanFault"
)

// SpanFaultMutation represents an operation that mutates the SpanFault nodes in the graph.
type SpanFaultMutation struct {
	config
	op               Op
	typ              string
	id               *string
	_Timestamp       *time.Time
	_TraceId         *string
	_PlatformName    *string
	_ClusterName     *string
	_InstanceName    *string
	_RootServiceName *string
	_RootSpanName    *string
	_ParentSpanId    *string
	_ServiceName     *string
	_SpanName        *string
	_FaultKind       *string
	_IsCause         *bool
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*SpanFault, error)
	predicates       []predicate.SpanFault
}

var _ ent.Mutation = (*SpanFaultMutation)(nil)

// spanfaultOption allows management of the mutation configuration using functional options.
type spanfaultOption func(*SpanFaultMutation)

// newSpanFaultMutation creates new mutation for the SpanFault entity.
func newSpanFaultMutation(c config, op Op, opts ...spanfaultOption) *SpanFaultMutation {
	m := &SpanFaultMutation{
		config:        c,
		op:            op,
		typ:           TypeSpanFault,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSpanFaultID sets the ID field of the mutation.
func withSpanFaultID(id string) spanfaultOption {
	return func(m *SpanFaultMutation) {
		var (
			err   error
			once  sync.Once
			value *SpanFault
		)
		m.oldValue = func(ctx context.Context) (*SpanFault, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SpanFault.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSpanFault sets the old SpanFault of the mutation.
func withSpanFault(node *SpanFault) spanfaultOption {
	return func(m *SpanFaultMutation) {
		m.oldValue = func(context.Context) (*SpanFault, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SpanFaultMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SpanFaultMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SpanFault entities.
func (m *SpanFaultMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SpanFaultMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SpanFaultMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SpanFault.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTimestamp sets the "Timestamp" field.
func (m *SpanFaultMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *SpanFaultMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the SpanFault entity.
// If the SpanFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpanFaultMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ClearTimestamp clears the value of the "Timestamp" field.
func (m *SpanFaultMutation) ClearTimestamp() {
	m._Timestamp = nil
	m.clearedFields[spanfault.FieldTimestamp] = struct{}{}
}

// TimestampCleared returns if the "Timestamp" field was cleared in this mutation.
func (m *SpanFaultMutation) TimestampCleared() bool {
	_, ok := m.clearedFields[spanfault.FieldTimestamp]
	return ok
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *SpanFaultMutation) ResetTimestamp() {
	m._Timestamp = nil
	delete(m.clearedFields, spanfault.FieldTimestamp)
}

// SetTraceId sets the "TraceId" field.
func (m *SpanFaultMutation) SetTraceId(s string) {
	m._TraceId = &s
}

// TraceId returns the value of the "TraceId" field in the mutation.
func (m *SpanFaultMutation) TraceId() (r string, exists bool) {
	v := m._TraceId
	if v == nil {
		return
	}
	return *v, true
}

// OldTraceId returns the old "TraceId" field's value of the SpanFault entity.
// If the SpanFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpanFaultMutation) OldTraceId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTraceId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTraceId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTraceId: %w", err)
	}
	return oldValue.TraceId, nil
}

// ResetTraceId resets all changes to the "TraceId" field.
func (m *SpanFaultMutation) ResetTraceId() {
	m._TraceId = nil
}

// SetPlatformName sets the "PlatformName" field.
func (m *SpanFaultMutation) SetPlatformName(s string) {
	m._PlatformName = &s
}

// PlatformName returns the value of the "PlatformName" field in the mutation.
func (m *SpanFaultMutation) PlatformName() (r string, exists bool) {
	v := m._PlatformName
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatformName returns the old "PlatformName" field's value of the SpanFault entity.
// If the SpanFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpanFaultMutation) OldPlatformName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatformName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatformName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatformName: %w", err)
	}
	return oldValue.PlatformName, nil
}

// ResetPlatformName resets all changes to the "PlatformName" field.
func (m *SpanFaultMutation) ResetPlatformName() {
	m._PlatformName = nil
}

// SetClusterName sets the "ClusterName" field.
func (m *SpanFaultMutation) SetClusterName(s string) {
	m._ClusterName = &s
}

// ClusterName returns the value of the "ClusterName" field in the mutation.
func (m *SpanFaultMutation) ClusterName() (r string, exists bool) {
	v := m._ClusterName
	if v == nil {
		return
	}
	return *v, true
}

// OldClusterName returns the old "ClusterName" field's value of the SpanFault entity.
// If the SpanFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpanFaultMutation) OldClusterName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClusterName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClusterName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClusterName: %w", err)
	}
	return oldValue.ClusterName, nil
}

// ResetClusterName resets all changes to the "ClusterName" field.
func (m *SpanFaultMutation) ResetClusterName() {
	m._ClusterName = nil
}

// SetInstanceName sets the "InstanceName" field.
func (m *SpanFaultMutation) SetInstanceName(s string) {
	m._InstanceName = &s
}

// InstanceName returns the value of the "InstanceName" field in the mutation.
func (m *SpanFaultMutation) InstanceName() (r string, exists bool) {
	v := m._InstanceName
	if v == nil {
		return
	}
	return *v, true
}

// OldInstanceName returns the old "InstanceName" field's value of the SpanFault entity.
// If the SpanFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpanFaultMutation) OldInstanceName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstanceName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstanceName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstanceName: %w", err)
	}
	return oldValue.InstanceName, nil
}

// ResetInstanceName resets all changes to the "InstanceName" field.
func (m *SpanFaultMutation) ResetInstanceName() {
	m._InstanceName = nil
}

// SetRootServiceName sets the "RootServiceName" field.
func (m *SpanFaultMutation) SetRootServiceName(s string) {
	m._RootServiceName = &s
}

// RootServiceName returns the value of the "RootServiceName" field in the mutation.
func (m *SpanFaultMutation) RootServiceName() (r string, exists bool) {
	v := m._RootServiceName
	if v == nil {
		return
	}
	return *v, true
}

// OldRootServiceName returns the old "RootServiceName" field's value of the SpanFault entity.
// If the SpanFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpanFaultMutation) OldRootServiceName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRootServiceName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRootServiceName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRootServiceName: %w", err)
	}
	return oldValue.RootServiceName, nil
}

// ClearRootServiceName clears the value of the "RootServiceName" field.
func (m *SpanFaultMutation) ClearRootServiceName() {
	m._RootServiceName = nil
	m.clearedFields[spanfault.FieldRootServiceName] = struct{}{}
}

// RootServiceNameCleared returns if the "RootServiceName" field was cleared in this mutation.
func (m *SpanFaultMutation) RootServiceNameCleared() bool {
	_, ok := m.clearedFields[spanfault.FieldRootServiceName]
	return ok
}

// ResetRootServiceName resets all changes to the "RootServiceName" field.
func (m *SpanFaultMutation) ResetRootServiceName() {
	m._RootServiceName = nil
	delete(m.clearedFields, spanfault.FieldRootServiceName)
}

// SetRootSpanName sets the "RootSpanName" field.
func (m *SpanFaultMutation) SetRootSpanName(s string) {
	m._RootSpanName = &s
}

// RootSpanName returns the value of the "RootSpanName" field in the mutation.
func (m *SpanFaultMutation) RootSpanName() (r string, exists bool) {
	v := m._RootSpanName
	if v == nil {
		return
	}
	return *v, true
}

// OldRootSpanName returns the old "RootSpanName" field's value of the SpanFault entity.
// If the SpanFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpanFaultMutation) OldRootSpanName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRootSpanName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRootSpanName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRootSpanName: %w", err)
	}
	return oldValue.RootSpanName, nil
}

// ClearRootSpanName clears the value of the "RootSpanName" field.
func (m *SpanFaultMutation) ClearRootSpanName() {
	m._RootSpanName = nil
	m.clearedFields[spanfault.FieldRootSpanName] = struct{}{}
}

// RootSpanNameCleared returns if the "RootSpanName" field was cleared in this mutation.
func (m *SpanFaultMutation) RootSpanNameCleared() bool {
	_, ok := m.clearedFields[spanfault.FieldRootSpanName]
	return ok
}

// ResetRootSpanName resets all changes to the "RootSpanName" field.
func (m *SpanFaultMutation) ResetRootSpanName() {
	m._RootSpanName = nil
	delete(m.clearedFields, spanfault.FieldRootSpanName)
}

// SetParentSpanId sets the "ParentSpanId" field.
func (m *SpanFaultMutation) SetParentSpanId(s string) {
	m._ParentSpanId = &s
}

// ParentSpanId returns the value of the "ParentSpanId" field in the mutation.
func (m *SpanFaultMutation) ParentSpanId() (r string, exists bool) {
	v := m._ParentSpanId
	if v == nil {
		return
	}
	return *v, true
}

// OldParentSpanId returns the old "ParentSpanId" field's value of the SpanFault entity.
// If the SpanFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpanFaultMutation) OldParentSpanId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentSpanId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentSpanId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentSpanId: %w", err)
	}
	return oldValue.ParentSpanId, nil
}

// ResetParentSpanId resets all changes to the "ParentSpanId" field.
func (m *SpanFaultMutation) ResetParentSpanId() {
	m._ParentSpanId = nil
}

// SetServiceName sets the "ServiceName" field.
func (m *SpanFaultMutation) SetServiceName(s string) {
	m._ServiceName = &s
}

// ServiceName returns the value of the "ServiceName" field in the mutation.
func (m *SpanFaultMutation) ServiceName() (r string, exists bool) {
	v := m._ServiceName
	if v == nil {
		return
	}
	return *v, true
}

// OldServiceName returns the old "ServiceName" field's value of the SpanFault entity.
// If the SpanFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpanFaultMutation) OldServiceName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServiceName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServiceName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServiceName: %w", err)
	}
	return oldValue.ServiceName, nil
}

// ResetServiceName resets all changes to the "ServiceName" field.
func (m *SpanFaultMutation) ResetServiceName() {
	m._ServiceName = nil
}

// SetSpanName sets the "SpanName" field.
func (m *SpanFaultMutation) SetSpanName(s string) {
	m._SpanName = &s
}

// SpanName returns the value of the "SpanName" field in the mutation.
func (m *SpanFaultMutation) SpanName() (r string, exists bool) {
	v := m._SpanName
	if v == nil {
		return
	}
	return *v, true
}

// OldSpanName returns the old "SpanName" field's value of the SpanFault entity.
// If the SpanFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpanFaultMutation) OldSpanName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpanName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpanName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpanName: %w", err)
	}
	return oldValue.SpanName, nil
}

// ResetSpanName resets all changes to the "SpanName" field.
func (m *SpanFaultMutation) ResetSpanName() {
	m._SpanName = nil
}

// SetFaultKind sets the "FaultKind" field.
func (m *SpanFaultMutation) SetFaultKind(s string) {
	m._FaultKind = &s
}

// FaultKind returns the value of the "FaultKind" field in the mutation.
func (m *SpanFaultMutation) FaultKind() (r string, exists bool) {
	v := m._FaultKind
	if v == nil {
		return
	}
	return *v, true
}

// OldFaultKind returns the old "FaultKind" field's value of the SpanFault entity.
// If the SpanFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpanFaultMutation) OldFaultKind(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFaultKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFaultKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFaultKind: %w", err)
	}
	return oldValue.FaultKind, nil
}

// ResetFaultKind resets all changes to the "FaultKind" field.
func (m *SpanFaultMutation) ResetFaultKind() {
	m._FaultKind = nil
}

// SetIsCause sets the "IsCause" field.
func (m *SpanFaultMutation) SetIsCause(b bool) {
	m._IsCause = &b
}

// IsCause returns the value of the "IsCause" field in the mutation.
func (m *SpanFaultMutation) IsCause() (r bool, exists bool) {
	v := m._IsCause
	if v == nil {
		return
	}
	return *v, true
}

// OldIsCause returns the old "IsCause" field's value of the SpanFault entity.
// If the SpanFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpanFaultMutation) OldIsCause(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsCause is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsCause requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsCause: %w", err)
	}
	return oldValue.IsCause, nil
}

// ResetIsCause resets all changes to the "IsCause" field.
func (m *SpanFaultMutation) ResetIsCause() {
	m._IsCause = nil
}

// Where appends a list predicates to the SpanFaultMutation builder.
func (m *SpanFaultMutation) Where(ps ...predicate.SpanFault) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SpanFaultMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SpanFaultMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SpanFault, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SpanFaultMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SpanFaultMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SpanFault).
func (m *SpanFaultMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SpanFaultMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m._Timestamp != nil {
		fields = append(fields, spanfault.FieldTimestamp)
	}
	if m._TraceId != nil {
		fields = append(fields, spanfault.FieldTraceId)
	}
	if m._PlatformName != nil {
		fields = append(fields, spanfault.FieldPlatformName)
	}
	if m._ClusterName != nil {
		fields = append(fields, spanfault.FieldClusterName)
	}
	if m._InstanceName != nil {
		fields = append(fields, spanfault.FieldInstanceName)
	}
	if m._RootServiceName != nil {
		fields = append(fields, spanfault.FieldRootServiceName)
	}
	if m._RootSpanName != nil {
		fields = append(fields, spanfault.FieldRootSpanName)
	}
	if m._ParentSpanId != nil {
		fields = append(fields, spanfault.FieldParentSpanId)
	}
	if m._ServiceName != nil {
		fields = append(fields, spanfault.FieldServiceName)
	}
	if m._SpanName != nil {
		fields = append(fields, spanfault.FieldSpanName)
	}
	if m._FaultKind != nil {
		fields = append(fields, spanfault.FieldFaultKind)
	}
	if m._IsCause != nil {
		fields = append(fields, spanfault.FieldIsCause)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SpanFaultMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case spanfault.FieldTimestamp:
		return m.Timestamp()
	case spanfault.FieldTraceId:
		return m.TraceId()
	case spanfault.FieldPlatformName:
		return m.PlatformName()
	case spanfault.FieldClusterName:
		return m.ClusterName()
	case spanfault.FieldInstanceName:
		return m.InstanceName()
	case spanfault.FieldRootServiceName:
		return m.RootServiceName()
	case spanfault.FieldRootSpanName:
		return m.RootSpanName()
	case spanfault.FieldParentSpanId:
		return m.ParentSpanId()
	case spanfault.FieldServiceName:
		return m.ServiceName()
	case spanfault.FieldSpanName:
		return m.SpanName()
	case spanfault.FieldFaultKind:
		return m.FaultKind()
	case spanfault.FieldIsCause:
		return m.IsCause()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SpanFaultMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case spanfault.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case spanfault.FieldTraceId:
		return m.OldTraceId(ctx)
	case spanfault.FieldPlatformName:
		return m.OldPlatformName(ctx)
	case spanfault.FieldClusterName:
		return m.OldClusterName(ctx)
	case spanfault.FieldInstanceName:
		return m.OldInstanceName(ctx)
	case spanfault.FieldRootServiceName:
		return m.OldRootServiceName(ctx)
	case spanfault.FieldRootSpanName:
		return m.OldRootSpanName(ctx)
	case spanfault.FieldParentSpanId:
		return m.OldParentSpanId(ctx)
	case spanfault.FieldServiceName:
		return m.OldServiceName(ctx)
	case spanfault.FieldSpanName:
		return m.OldSpanName(ctx)
	case spanfault.FieldFaultKind:
		return m.OldFaultKind(ctx)
	case spanfault.FieldIsCause:
		return m.OldIsCause(ctx)
	}
	return nil, fmt.Errorf("unknown SpanFault field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SpanFaultMutation) SetField(name string, value ent.Value) error {
	switch name {
	case spanfault.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case spanfault.FieldTraceId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTraceId(v)
		return nil
	case spanfault.FieldPlatformName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatformName(v)
		return nil
	case spanfault.FieldClusterName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClusterName(v)
		return nil
	case spanfault.FieldInstanceName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstanceName(v)
		return nil
	case spanfault.FieldRootServiceName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRootServiceName(v)
		return nil
	case spanfault.FieldRootSpanName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRootSpanName(v)
		return nil
	case spanfault.FieldParentSpanId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentSpanId(v)
		return nil
	case spanfault.FieldServiceName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServiceName(v)
		return nil
	case spanfault.FieldSpanName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpanName(v)
		return nil
	case spanfault.FieldFaultKind:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFaultKind(v)
		return nil
	case spanfault.FieldIsCause:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsCause(v)
		return nil
	}
	return fmt.Errorf("unknown SpanFault field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SpanFaultMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SpanFaultMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SpanFaultMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SpanFault numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SpanFaultMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(spanfault.FieldTimestamp) {
		fields = append(fields, spanfault.FieldTimestamp)
	}
	if m.FieldCleared(spanfault.FieldRootServiceName) {
		fields = append(fields, spanfault.FieldRootServiceName)
	}
	if m.FieldCleared(spanfault.FieldRootSpanName) {
		fields = append(fields, spanfault.FieldRootSpanName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SpanFaultMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SpanFaultMutation) ClearField(name string) error {
	switch name {
	case spanfault.FieldTimestamp:
		m.ClearTimestamp()
		return nil
	case spanfault.FieldRootServiceName:
		m.ClearRootServiceName()
		return nil
	case spanfault.FieldRootSpanName:
		m.ClearRootSpanName()
		return nil
	}
	return fmt.Errorf("unknown SpanFault nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SpanFaultMutation) ResetField(name string) error {
	switch name {
	case spanfault.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case spanfault.FieldTraceId:
		m.ResetTraceId()
		return nil
	case spanfault.FieldPlatformName:
		m.ResetPlatformName()
		return nil
	case spanfault.FieldClusterName:
		m.ResetClusterName()
		return nil
	case spanfault.FieldInstanceName:
		m.ResetInstanceName()
		return nil
	case spanfault.FieldRootServiceName:
		m.ResetRootServiceName()
		return nil
	case spanfault.FieldRootSpanName:
		m.ResetRootSpanName()
		return nil
	case spanfault.FieldParentSpanId:
		m.ResetParentSpanId()
		return nil
	case spanfault.FieldServiceName:
		m.ResetServiceName()
		return nil
	case spanfault.FieldSpanName:
		m.ResetSpanName()
		return nil
	case spanfault.FieldFaultKind:
		m.ResetFaultKind()
		return nil
	case spanfault.FieldIsCause:
		m.ResetIsCause()
		return nil
	}
	return fmt.Errorf("unknown SpanFault field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SpanFaultMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SpanFaultMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SpanFaultMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SpanFaultMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SpanFaultMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SpanFaultMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SpanFaultMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SpanFault unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SpanFaultMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SpanFault edge %s", name)
}
