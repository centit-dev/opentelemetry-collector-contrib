// Code generated by ent, DO NOT EDIT.

package spanfault

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/teanoon/opentelemetry-collector-contrib/exporter/spanfaultexporter/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContainsFold(FieldID, id))
}

// Timestamp applies equality check predicate on the "Timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldTimestamp, v))
}

// TraceId applies equality check predicate on the "TraceId" field. It's identical to TraceIdEQ.
func TraceId(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldTraceId, v))
}

// PlatformName applies equality check predicate on the "PlatformName" field. It's identical to PlatformNameEQ.
func PlatformName(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldPlatformName, v))
}

// ClusterName applies equality check predicate on the "ClusterName" field. It's identical to ClusterNameEQ.
func ClusterName(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldClusterName, v))
}

// InstanceName applies equality check predicate on the "InstanceName" field. It's identical to InstanceNameEQ.
func InstanceName(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldInstanceName, v))
}

// RootServiceName applies equality check predicate on the "RootServiceName" field. It's identical to RootServiceNameEQ.
func RootServiceName(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldRootServiceName, v))
}

// RootSpanName applies equality check predicate on the "RootSpanName" field. It's identical to RootSpanNameEQ.
func RootSpanName(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldRootSpanName, v))
}

// ParentSpanId applies equality check predicate on the "ParentSpanId" field. It's identical to ParentSpanIdEQ.
func ParentSpanId(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldParentSpanId, v))
}

// ServiceName applies equality check predicate on the "ServiceName" field. It's identical to ServiceNameEQ.
func ServiceName(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldServiceName, v))
}

// SpanName applies equality check predicate on the "SpanName" field. It's identical to SpanNameEQ.
func SpanName(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldSpanName, v))
}

// FaultKind applies equality check predicate on the "FaultKind" field. It's identical to FaultKindEQ.
func FaultKind(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldFaultKind, v))
}

// IsRoot applies equality check predicate on the "IsRoot" field. It's identical to IsRootEQ.
func IsRoot(v bool) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldIsRoot, v))
}

// TimestampEQ applies the EQ predicate on the "Timestamp" field.
func TimestampEQ(v time.Time) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "Timestamp" field.
func TimestampNEQ(v time.Time) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "Timestamp" field.
func TimestampIn(vs ...time.Time) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "Timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "Timestamp" field.
func TimestampGT(v time.Time) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "Timestamp" field.
func TimestampGTE(v time.Time) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "Timestamp" field.
func TimestampLT(v time.Time) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "Timestamp" field.
func TimestampLTE(v time.Time) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLTE(FieldTimestamp, v))
}

// TimestampIsNil applies the IsNil predicate on the "Timestamp" field.
func TimestampIsNil() predicate.SpanFault {
	return predicate.SpanFault(sql.FieldIsNull(FieldTimestamp))
}

// TimestampNotNil applies the NotNil predicate on the "Timestamp" field.
func TimestampNotNil() predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNotNull(FieldTimestamp))
}

// TraceIdEQ applies the EQ predicate on the "TraceId" field.
func TraceIdEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldTraceId, v))
}

// TraceIdNEQ applies the NEQ predicate on the "TraceId" field.
func TraceIdNEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNEQ(FieldTraceId, v))
}

// TraceIdIn applies the In predicate on the "TraceId" field.
func TraceIdIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldIn(FieldTraceId, vs...))
}

// TraceIdNotIn applies the NotIn predicate on the "TraceId" field.
func TraceIdNotIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNotIn(FieldTraceId, vs...))
}

// TraceIdGT applies the GT predicate on the "TraceId" field.
func TraceIdGT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGT(FieldTraceId, v))
}

// TraceIdGTE applies the GTE predicate on the "TraceId" field.
func TraceIdGTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGTE(FieldTraceId, v))
}

// TraceIdLT applies the LT predicate on the "TraceId" field.
func TraceIdLT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLT(FieldTraceId, v))
}

// TraceIdLTE applies the LTE predicate on the "TraceId" field.
func TraceIdLTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLTE(FieldTraceId, v))
}

// TraceIdContains applies the Contains predicate on the "TraceId" field.
func TraceIdContains(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContains(FieldTraceId, v))
}

// TraceIdHasPrefix applies the HasPrefix predicate on the "TraceId" field.
func TraceIdHasPrefix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasPrefix(FieldTraceId, v))
}

// TraceIdHasSuffix applies the HasSuffix predicate on the "TraceId" field.
func TraceIdHasSuffix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasSuffix(FieldTraceId, v))
}

// TraceIdEqualFold applies the EqualFold predicate on the "TraceId" field.
func TraceIdEqualFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEqualFold(FieldTraceId, v))
}

// TraceIdContainsFold applies the ContainsFold predicate on the "TraceId" field.
func TraceIdContainsFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContainsFold(FieldTraceId, v))
}

// PlatformNameEQ applies the EQ predicate on the "PlatformName" field.
func PlatformNameEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldPlatformName, v))
}

// PlatformNameNEQ applies the NEQ predicate on the "PlatformName" field.
func PlatformNameNEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNEQ(FieldPlatformName, v))
}

// PlatformNameIn applies the In predicate on the "PlatformName" field.
func PlatformNameIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldIn(FieldPlatformName, vs...))
}

// PlatformNameNotIn applies the NotIn predicate on the "PlatformName" field.
func PlatformNameNotIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNotIn(FieldPlatformName, vs...))
}

// PlatformNameGT applies the GT predicate on the "PlatformName" field.
func PlatformNameGT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGT(FieldPlatformName, v))
}

// PlatformNameGTE applies the GTE predicate on the "PlatformName" field.
func PlatformNameGTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGTE(FieldPlatformName, v))
}

// PlatformNameLT applies the LT predicate on the "PlatformName" field.
func PlatformNameLT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLT(FieldPlatformName, v))
}

// PlatformNameLTE applies the LTE predicate on the "PlatformName" field.
func PlatformNameLTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLTE(FieldPlatformName, v))
}

// PlatformNameContains applies the Contains predicate on the "PlatformName" field.
func PlatformNameContains(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContains(FieldPlatformName, v))
}

// PlatformNameHasPrefix applies the HasPrefix predicate on the "PlatformName" field.
func PlatformNameHasPrefix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasPrefix(FieldPlatformName, v))
}

// PlatformNameHasSuffix applies the HasSuffix predicate on the "PlatformName" field.
func PlatformNameHasSuffix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasSuffix(FieldPlatformName, v))
}

// PlatformNameEqualFold applies the EqualFold predicate on the "PlatformName" field.
func PlatformNameEqualFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEqualFold(FieldPlatformName, v))
}

// PlatformNameContainsFold applies the ContainsFold predicate on the "PlatformName" field.
func PlatformNameContainsFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContainsFold(FieldPlatformName, v))
}

// ClusterNameEQ applies the EQ predicate on the "ClusterName" field.
func ClusterNameEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldClusterName, v))
}

// ClusterNameNEQ applies the NEQ predicate on the "ClusterName" field.
func ClusterNameNEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNEQ(FieldClusterName, v))
}

// ClusterNameIn applies the In predicate on the "ClusterName" field.
func ClusterNameIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldIn(FieldClusterName, vs...))
}

// ClusterNameNotIn applies the NotIn predicate on the "ClusterName" field.
func ClusterNameNotIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNotIn(FieldClusterName, vs...))
}

// ClusterNameGT applies the GT predicate on the "ClusterName" field.
func ClusterNameGT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGT(FieldClusterName, v))
}

// ClusterNameGTE applies the GTE predicate on the "ClusterName" field.
func ClusterNameGTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGTE(FieldClusterName, v))
}

// ClusterNameLT applies the LT predicate on the "ClusterName" field.
func ClusterNameLT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLT(FieldClusterName, v))
}

// ClusterNameLTE applies the LTE predicate on the "ClusterName" field.
func ClusterNameLTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLTE(FieldClusterName, v))
}

// ClusterNameContains applies the Contains predicate on the "ClusterName" field.
func ClusterNameContains(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContains(FieldClusterName, v))
}

// ClusterNameHasPrefix applies the HasPrefix predicate on the "ClusterName" field.
func ClusterNameHasPrefix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasPrefix(FieldClusterName, v))
}

// ClusterNameHasSuffix applies the HasSuffix predicate on the "ClusterName" field.
func ClusterNameHasSuffix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasSuffix(FieldClusterName, v))
}

// ClusterNameEqualFold applies the EqualFold predicate on the "ClusterName" field.
func ClusterNameEqualFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEqualFold(FieldClusterName, v))
}

// ClusterNameContainsFold applies the ContainsFold predicate on the "ClusterName" field.
func ClusterNameContainsFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContainsFold(FieldClusterName, v))
}

// InstanceNameEQ applies the EQ predicate on the "InstanceName" field.
func InstanceNameEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldInstanceName, v))
}

// InstanceNameNEQ applies the NEQ predicate on the "InstanceName" field.
func InstanceNameNEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNEQ(FieldInstanceName, v))
}

// InstanceNameIn applies the In predicate on the "InstanceName" field.
func InstanceNameIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldIn(FieldInstanceName, vs...))
}

// InstanceNameNotIn applies the NotIn predicate on the "InstanceName" field.
func InstanceNameNotIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNotIn(FieldInstanceName, vs...))
}

// InstanceNameGT applies the GT predicate on the "InstanceName" field.
func InstanceNameGT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGT(FieldInstanceName, v))
}

// InstanceNameGTE applies the GTE predicate on the "InstanceName" field.
func InstanceNameGTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGTE(FieldInstanceName, v))
}

// InstanceNameLT applies the LT predicate on the "InstanceName" field.
func InstanceNameLT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLT(FieldInstanceName, v))
}

// InstanceNameLTE applies the LTE predicate on the "InstanceName" field.
func InstanceNameLTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLTE(FieldInstanceName, v))
}

// InstanceNameContains applies the Contains predicate on the "InstanceName" field.
func InstanceNameContains(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContains(FieldInstanceName, v))
}

// InstanceNameHasPrefix applies the HasPrefix predicate on the "InstanceName" field.
func InstanceNameHasPrefix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasPrefix(FieldInstanceName, v))
}

// InstanceNameHasSuffix applies the HasSuffix predicate on the "InstanceName" field.
func InstanceNameHasSuffix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasSuffix(FieldInstanceName, v))
}

// InstanceNameEqualFold applies the EqualFold predicate on the "InstanceName" field.
func InstanceNameEqualFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEqualFold(FieldInstanceName, v))
}

// InstanceNameContainsFold applies the ContainsFold predicate on the "InstanceName" field.
func InstanceNameContainsFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContainsFold(FieldInstanceName, v))
}

// RootServiceNameEQ applies the EQ predicate on the "RootServiceName" field.
func RootServiceNameEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldRootServiceName, v))
}

// RootServiceNameNEQ applies the NEQ predicate on the "RootServiceName" field.
func RootServiceNameNEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNEQ(FieldRootServiceName, v))
}

// RootServiceNameIn applies the In predicate on the "RootServiceName" field.
func RootServiceNameIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldIn(FieldRootServiceName, vs...))
}

// RootServiceNameNotIn applies the NotIn predicate on the "RootServiceName" field.
func RootServiceNameNotIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNotIn(FieldRootServiceName, vs...))
}

// RootServiceNameGT applies the GT predicate on the "RootServiceName" field.
func RootServiceNameGT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGT(FieldRootServiceName, v))
}

// RootServiceNameGTE applies the GTE predicate on the "RootServiceName" field.
func RootServiceNameGTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGTE(FieldRootServiceName, v))
}

// RootServiceNameLT applies the LT predicate on the "RootServiceName" field.
func RootServiceNameLT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLT(FieldRootServiceName, v))
}

// RootServiceNameLTE applies the LTE predicate on the "RootServiceName" field.
func RootServiceNameLTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLTE(FieldRootServiceName, v))
}

// RootServiceNameContains applies the Contains predicate on the "RootServiceName" field.
func RootServiceNameContains(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContains(FieldRootServiceName, v))
}

// RootServiceNameHasPrefix applies the HasPrefix predicate on the "RootServiceName" field.
func RootServiceNameHasPrefix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasPrefix(FieldRootServiceName, v))
}

// RootServiceNameHasSuffix applies the HasSuffix predicate on the "RootServiceName" field.
func RootServiceNameHasSuffix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasSuffix(FieldRootServiceName, v))
}

// RootServiceNameIsNil applies the IsNil predicate on the "RootServiceName" field.
func RootServiceNameIsNil() predicate.SpanFault {
	return predicate.SpanFault(sql.FieldIsNull(FieldRootServiceName))
}

// RootServiceNameNotNil applies the NotNil predicate on the "RootServiceName" field.
func RootServiceNameNotNil() predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNotNull(FieldRootServiceName))
}

// RootServiceNameEqualFold applies the EqualFold predicate on the "RootServiceName" field.
func RootServiceNameEqualFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEqualFold(FieldRootServiceName, v))
}

// RootServiceNameContainsFold applies the ContainsFold predicate on the "RootServiceName" field.
func RootServiceNameContainsFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContainsFold(FieldRootServiceName, v))
}

// RootSpanNameEQ applies the EQ predicate on the "RootSpanName" field.
func RootSpanNameEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldRootSpanName, v))
}

// RootSpanNameNEQ applies the NEQ predicate on the "RootSpanName" field.
func RootSpanNameNEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNEQ(FieldRootSpanName, v))
}

// RootSpanNameIn applies the In predicate on the "RootSpanName" field.
func RootSpanNameIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldIn(FieldRootSpanName, vs...))
}

// RootSpanNameNotIn applies the NotIn predicate on the "RootSpanName" field.
func RootSpanNameNotIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNotIn(FieldRootSpanName, vs...))
}

// RootSpanNameGT applies the GT predicate on the "RootSpanName" field.
func RootSpanNameGT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGT(FieldRootSpanName, v))
}

// RootSpanNameGTE applies the GTE predicate on the "RootSpanName" field.
func RootSpanNameGTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGTE(FieldRootSpanName, v))
}

// RootSpanNameLT applies the LT predicate on the "RootSpanName" field.
func RootSpanNameLT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLT(FieldRootSpanName, v))
}

// RootSpanNameLTE applies the LTE predicate on the "RootSpanName" field.
func RootSpanNameLTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLTE(FieldRootSpanName, v))
}

// RootSpanNameContains applies the Contains predicate on the "RootSpanName" field.
func RootSpanNameContains(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContains(FieldRootSpanName, v))
}

// RootSpanNameHasPrefix applies the HasPrefix predicate on the "RootSpanName" field.
func RootSpanNameHasPrefix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasPrefix(FieldRootSpanName, v))
}

// RootSpanNameHasSuffix applies the HasSuffix predicate on the "RootSpanName" field.
func RootSpanNameHasSuffix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasSuffix(FieldRootSpanName, v))
}

// RootSpanNameIsNil applies the IsNil predicate on the "RootSpanName" field.
func RootSpanNameIsNil() predicate.SpanFault {
	return predicate.SpanFault(sql.FieldIsNull(FieldRootSpanName))
}

// RootSpanNameNotNil applies the NotNil predicate on the "RootSpanName" field.
func RootSpanNameNotNil() predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNotNull(FieldRootSpanName))
}

// RootSpanNameEqualFold applies the EqualFold predicate on the "RootSpanName" field.
func RootSpanNameEqualFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEqualFold(FieldRootSpanName, v))
}

// RootSpanNameContainsFold applies the ContainsFold predicate on the "RootSpanName" field.
func RootSpanNameContainsFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContainsFold(FieldRootSpanName, v))
}

// ParentSpanIdEQ applies the EQ predicate on the "ParentSpanId" field.
func ParentSpanIdEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldParentSpanId, v))
}

// ParentSpanIdNEQ applies the NEQ predicate on the "ParentSpanId" field.
func ParentSpanIdNEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNEQ(FieldParentSpanId, v))
}

// ParentSpanIdIn applies the In predicate on the "ParentSpanId" field.
func ParentSpanIdIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldIn(FieldParentSpanId, vs...))
}

// ParentSpanIdNotIn applies the NotIn predicate on the "ParentSpanId" field.
func ParentSpanIdNotIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNotIn(FieldParentSpanId, vs...))
}

// ParentSpanIdGT applies the GT predicate on the "ParentSpanId" field.
func ParentSpanIdGT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGT(FieldParentSpanId, v))
}

// ParentSpanIdGTE applies the GTE predicate on the "ParentSpanId" field.
func ParentSpanIdGTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGTE(FieldParentSpanId, v))
}

// ParentSpanIdLT applies the LT predicate on the "ParentSpanId" field.
func ParentSpanIdLT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLT(FieldParentSpanId, v))
}

// ParentSpanIdLTE applies the LTE predicate on the "ParentSpanId" field.
func ParentSpanIdLTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLTE(FieldParentSpanId, v))
}

// ParentSpanIdContains applies the Contains predicate on the "ParentSpanId" field.
func ParentSpanIdContains(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContains(FieldParentSpanId, v))
}

// ParentSpanIdHasPrefix applies the HasPrefix predicate on the "ParentSpanId" field.
func ParentSpanIdHasPrefix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasPrefix(FieldParentSpanId, v))
}

// ParentSpanIdHasSuffix applies the HasSuffix predicate on the "ParentSpanId" field.
func ParentSpanIdHasSuffix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasSuffix(FieldParentSpanId, v))
}

// ParentSpanIdEqualFold applies the EqualFold predicate on the "ParentSpanId" field.
func ParentSpanIdEqualFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEqualFold(FieldParentSpanId, v))
}

// ParentSpanIdContainsFold applies the ContainsFold predicate on the "ParentSpanId" field.
func ParentSpanIdContainsFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContainsFold(FieldParentSpanId, v))
}

// ServiceNameEQ applies the EQ predicate on the "ServiceName" field.
func ServiceNameEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldServiceName, v))
}

// ServiceNameNEQ applies the NEQ predicate on the "ServiceName" field.
func ServiceNameNEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNEQ(FieldServiceName, v))
}

// ServiceNameIn applies the In predicate on the "ServiceName" field.
func ServiceNameIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldIn(FieldServiceName, vs...))
}

// ServiceNameNotIn applies the NotIn predicate on the "ServiceName" field.
func ServiceNameNotIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNotIn(FieldServiceName, vs...))
}

// ServiceNameGT applies the GT predicate on the "ServiceName" field.
func ServiceNameGT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGT(FieldServiceName, v))
}

// ServiceNameGTE applies the GTE predicate on the "ServiceName" field.
func ServiceNameGTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGTE(FieldServiceName, v))
}

// ServiceNameLT applies the LT predicate on the "ServiceName" field.
func ServiceNameLT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLT(FieldServiceName, v))
}

// ServiceNameLTE applies the LTE predicate on the "ServiceName" field.
func ServiceNameLTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLTE(FieldServiceName, v))
}

// ServiceNameContains applies the Contains predicate on the "ServiceName" field.
func ServiceNameContains(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContains(FieldServiceName, v))
}

// ServiceNameHasPrefix applies the HasPrefix predicate on the "ServiceName" field.
func ServiceNameHasPrefix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasPrefix(FieldServiceName, v))
}

// ServiceNameHasSuffix applies the HasSuffix predicate on the "ServiceName" field.
func ServiceNameHasSuffix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasSuffix(FieldServiceName, v))
}

// ServiceNameEqualFold applies the EqualFold predicate on the "ServiceName" field.
func ServiceNameEqualFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEqualFold(FieldServiceName, v))
}

// ServiceNameContainsFold applies the ContainsFold predicate on the "ServiceName" field.
func ServiceNameContainsFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContainsFold(FieldServiceName, v))
}

// SpanNameEQ applies the EQ predicate on the "SpanName" field.
func SpanNameEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldSpanName, v))
}

// SpanNameNEQ applies the NEQ predicate on the "SpanName" field.
func SpanNameNEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNEQ(FieldSpanName, v))
}

// SpanNameIn applies the In predicate on the "SpanName" field.
func SpanNameIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldIn(FieldSpanName, vs...))
}

// SpanNameNotIn applies the NotIn predicate on the "SpanName" field.
func SpanNameNotIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNotIn(FieldSpanName, vs...))
}

// SpanNameGT applies the GT predicate on the "SpanName" field.
func SpanNameGT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGT(FieldSpanName, v))
}

// SpanNameGTE applies the GTE predicate on the "SpanName" field.
func SpanNameGTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGTE(FieldSpanName, v))
}

// SpanNameLT applies the LT predicate on the "SpanName" field.
func SpanNameLT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLT(FieldSpanName, v))
}

// SpanNameLTE applies the LTE predicate on the "SpanName" field.
func SpanNameLTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLTE(FieldSpanName, v))
}

// SpanNameContains applies the Contains predicate on the "SpanName" field.
func SpanNameContains(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContains(FieldSpanName, v))
}

// SpanNameHasPrefix applies the HasPrefix predicate on the "SpanName" field.
func SpanNameHasPrefix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasPrefix(FieldSpanName, v))
}

// SpanNameHasSuffix applies the HasSuffix predicate on the "SpanName" field.
func SpanNameHasSuffix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasSuffix(FieldSpanName, v))
}

// SpanNameEqualFold applies the EqualFold predicate on the "SpanName" field.
func SpanNameEqualFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEqualFold(FieldSpanName, v))
}

// SpanNameContainsFold applies the ContainsFold predicate on the "SpanName" field.
func SpanNameContainsFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContainsFold(FieldSpanName, v))
}

// FaultKindEQ applies the EQ predicate on the "FaultKind" field.
func FaultKindEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldFaultKind, v))
}

// FaultKindNEQ applies the NEQ predicate on the "FaultKind" field.
func FaultKindNEQ(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNEQ(FieldFaultKind, v))
}

// FaultKindIn applies the In predicate on the "FaultKind" field.
func FaultKindIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldIn(FieldFaultKind, vs...))
}

// FaultKindNotIn applies the NotIn predicate on the "FaultKind" field.
func FaultKindNotIn(vs ...string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNotIn(FieldFaultKind, vs...))
}

// FaultKindGT applies the GT predicate on the "FaultKind" field.
func FaultKindGT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGT(FieldFaultKind, v))
}

// FaultKindGTE applies the GTE predicate on the "FaultKind" field.
func FaultKindGTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldGTE(FieldFaultKind, v))
}

// FaultKindLT applies the LT predicate on the "FaultKind" field.
func FaultKindLT(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLT(FieldFaultKind, v))
}

// FaultKindLTE applies the LTE predicate on the "FaultKind" field.
func FaultKindLTE(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldLTE(FieldFaultKind, v))
}

// FaultKindContains applies the Contains predicate on the "FaultKind" field.
func FaultKindContains(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContains(FieldFaultKind, v))
}

// FaultKindHasPrefix applies the HasPrefix predicate on the "FaultKind" field.
func FaultKindHasPrefix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasPrefix(FieldFaultKind, v))
}

// FaultKindHasSuffix applies the HasSuffix predicate on the "FaultKind" field.
func FaultKindHasSuffix(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldHasSuffix(FieldFaultKind, v))
}

// FaultKindEqualFold applies the EqualFold predicate on the "FaultKind" field.
func FaultKindEqualFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEqualFold(FieldFaultKind, v))
}

// FaultKindContainsFold applies the ContainsFold predicate on the "FaultKind" field.
func FaultKindContainsFold(v string) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldContainsFold(FieldFaultKind, v))
}

// IsRootEQ applies the EQ predicate on the "IsRoot" field.
func IsRootEQ(v bool) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldEQ(FieldIsRoot, v))
}

// IsRootNEQ applies the NEQ predicate on the "IsRoot" field.
func IsRootNEQ(v bool) predicate.SpanFault {
	return predicate.SpanFault(sql.FieldNEQ(FieldIsRoot, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SpanFault) predicate.SpanFault {
	return predicate.SpanFault(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SpanFault) predicate.SpanFault {
	return predicate.SpanFault(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SpanFault) predicate.SpanFault {
	return predicate.SpanFault(sql.NotPredicates(p))
}
